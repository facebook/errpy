@generated

Errpy makes empty AST (weird) with input prior to and including:
17.->def fib(a: int) -><-

88.->
    inset = a in {0, 1}
    i<-

89.->    inset = a in {0, 1}
    if<-

130.->a == 1:
        return 1
    e<-

131.-> == 1:
        return 1
    el<-

132.->== 1:
        return 1
    eli<-

133.->= 1:
        return 1
    elif<-

163.-> inset:
        return 1
    e<-

275.->rmat_a_string(astring: str) -><-

337.-> x in astring])

def main() -><-

442.->rmat_a_string()
    return 0
i<-

443.->mat_a_string()
    return 0
if<-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

0. Input. char of interest: ' def def f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
 def def fib(a: int) -> int:                  | def def(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def def(a: int) -> int:
+ def def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
1. Input. char of interest: 'd def ef fi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
d def ef fib(a: int) -> int:                  | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+d def ef fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
2. Input. char of interest: 'de def f fib':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
de def f fib(a: int) -> int:                  | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+de def f fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
4. Input. char of interest: 'def  def fib(a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def  def fib(a: int) -> int:                  | def def(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def def(a: int) -> int:
+def  def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
5. Input. char of interest: 'def f def ib(a:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def f def ib(a: int) -> int:                  | def ib(a: int) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def ib(a: int) -> int:
+def f def ib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
6. Input. char of interest: 'def fi def b(a: ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fi def b(a: int) -> int:                  | def fi(a: int) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fi(a: int) -> int:
+def fi def b(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
7. Input. char of interest: 'def fib def (a: i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib def (a: int) -> int:                  | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib def (a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
8. Input. char of interest: 'def fib( def a: in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib( def a: int) -> int:                  | def fib(def: int) -> int:                     
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(def: int) -> int:
+def fib( def a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
9. Input. char of interest: 'def fib(a def : int':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a def : int) -> int:                  | def fib(def: int) -> int:                     
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(def: int) -> int:
+def fib(a def : int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
11. Input. char of interest: 'ef fib(a:  def int) ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a:  def int) -> int:                  | def fib(a: def) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: def) -> int:
+def fib(a:  def int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
12. Input. char of interest: 'f fib(a: i def nt) -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: i def nt) -> int:                  | def fib(a: nt) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: nt) -> int:
+def fib(a: i def nt) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
13. Input. char of interest: ' fib(a: in def t) ->':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: in def t) -> int:                  | def fib(a: in) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: in) -> int:
+def fib(a: in def t) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
14. Input. char of interest: 'fib(a: int def ) -> ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int def ) -> int:                  | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a: int def ) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
16. Input. char of interest: 'b(a: int)  def -> in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int)  def -> int:                  | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a: int)  def -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
17. Input. char of interest: '(a: int) - def > int':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) - def > int:                  |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) - def > int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
19. Input. char of interest: ': int) ->  def int:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) ->  def int:                  | def fib(a: int) -> def:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: expected ':' (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> def:
+def fib(a: int) ->  def int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
20. Input. char of interest: ' int) -> i def nt:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> i def nt:                  | def fib(a: int) -> nt:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> nt:
+def fib(a: int) -> i def nt:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
21. Input. char of interest: 'int) -> in def t:
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> in def t:                  | def fib(a: int) -> in:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: expected ':' (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> in:
+def fib(a: int) -> in def t:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
22. Input. char of interest: 'nt) -> int def :
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int def :                  | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a: int) -> int def :
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
23. Input. char of interest: 't) -> int: def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int: def                   | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     def                                       
    (ba, bb) = tmp                            | tmp = (a, a)                                  
    inset = a in {0, 1}                       | (ba, bb) = tmp                                
    if a <= 2 or a == 1:                      | inset = a in {0, 1}                           
        return 1                              | if a <= 2 or a == 1:                          
    elif inset:                               |     return 1                                  
        return 1                              | elif inset:                                   
    else:                                     |     return 1                                  
        return fib(a - 1) + fib(a - 2)        | else:                                         
                                              |     return fib(a - 1) + fib(a - 2)            
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 2)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,14 +1,13 @@
-def fib(a: int) -> int:
-    def
-tmp = (a, a)
-(ba, bb) = tmp
-inset = a in {0, 1}
-if a <= 2 or a == 1:
-    return 1
-elif inset:
-    return 1
-else:
-    return fib(a - 1) + fib(a - 2)
+def fib(a: int) -> int: def 
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
28. Input. char of interest: ' int:
     def tmp =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
     def tmp = (a, a)                         | (ba, bb) = tmp                                
    (ba, bb) = tmp                            | inset = a in {0, 1}                           
    inset = a in {0, 1}                       | if a <= 2 or a == 1:                          
    if a <= 2 or a == 1:                      |     return 1                                  
        return 1                              | elif inset:                                   
    elif inset:                               |     return 1                                  
        return 1                              | else:                                         
    else:                                     |     return fib(a - 1) + fib(a - 2)            
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

Output AST is not valid according to CPython: expected an indented block after function definition on line 1 (<unknown>, line 2)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,12 +1,13 @@
 def fib(a: int) -> int:
-(ba, bb) = tmp
-inset = a in {0, 1}
-if a <= 2 or a == 1:
-    return 1
-elif inset:
-    return 1
-else:
-    return fib(a - 1) + fib(a - 2)
+     def tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
29. Input. char of interest: 'int:
    t def mp = ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    t def mp = (a, a)                         |     mp = (a, a)                               
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    mp = (a, a)
+    t def mp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
30. Input. char of interest: 'nt:
    tm def p = (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tm def p = (a, a)                         |     p = (a, a)                                
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    p = (a, a)
+    tm def p = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
32. Input. char of interest: ':
    tmp  def = (a,':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp  def = (a, a)                         |     tmp(a, a)                                 
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp(a, a)
+    tmp  def = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
34. Input. char of interest: '    tmp =  def (a, a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp =  def (a, a)                         |     tmp = def(a, a)                           
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 2)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = def(a, a)
+    tmp =  def (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
35. Input. char of interest: '   tmp = ( def a, a)':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = ( def a, a)                         |     tmp = (def, a)                            
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [2:16 - 2:17]
CST Stack:
    {Node ERROR (1, 16) - (1, 17)}
    {Node tuple (1, 10) - (1, 21)}
    {Node assignment (1, 4) - (1, 21)}
    {Node expression_statement (1, 4) - (1, 21)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 2)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (def, a)
+    tmp = ( def a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
36. Input. char of interest: '  tmp = (a def , a)
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a def , a)                         |     tmp = (def, a)                            
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [2:11 - 2:12]
CST Stack:
    {Node ERROR (1, 11) - (1, 12)}
    {Node tuple (1, 10) - (1, 21)}
    {Node assignment (1, 4) - (1, 21)}
    {Node expression_statement (1, 4) - (1, 21)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 2)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (def, a)
+    tmp = (a def , a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
38. Input. char of interest: 'tmp = (a,  def a)
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a,  def a)                         |     tmp = (a, def)                            
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [2:19 - 2:20]
CST Stack:
    {Node ERROR (1, 19) - (1, 20)}
    {Node tuple (1, 10) - (1, 21)}
    {Node assignment (1, 4) - (1, 21)}
    {Node expression_statement (1, 4) - (1, 21)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 2)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, def)
+    tmp = (a,  def a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
39. Input. char of interest: 'mp = (a, a def )
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a def )                         |     tmp = (a, def)                            
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [2:14 - 2:15]
CST Stack:
    {Node ERROR (1, 14) - (1, 15)}
    {Node tuple (1, 10) - (1, 21)}
    {Node assignment (1, 4) - (1, 21)}
    {Node expression_statement (1, 4) - (1, 21)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 2)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, def)
+    tmp = (a, a def )
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
40. Input. char of interest: 'p = (a, a) def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a) def                          |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
+    tmp = (a, a) def 
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
45. Input. char of interest: 'a, a)
     def (ba, ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
     def (ba, bb) = tmp                       |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+     def (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
46. Input. char of interest: ', a)
    ( def ba, b':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    ( def ba, bb) = tmp                       |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected token in pattern: {Node ERROR (2, 6) - (2, 9)}" at [3:6 - 3:9]
CST Stack:
    {Node ERROR (2, 6) - (2, 9)}
    {Node tuple_pattern (2, 4) - (2, 17)}
    {Node assignment (2, 4) - (2, 23)}
    {Node expression_statement (2, 4) - (2, 23)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    ( def ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
47. Input. char of interest: ' a)
    (b def a, bb':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (b def a, bb) = tmp                       |     (a, bb) = tmp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected token in pattern: {Node ERROR (2, 5) - (2, 10)}" at [3:5 - 3:10]
CST Stack:
    {Node ERROR (2, 5) - (2, 10)}
    {Node tuple_pattern (2, 4) - (2, 17)}
    {Node assignment (2, 4) - (2, 23)}
    {Node expression_statement (2, 4) - (2, 23)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (a, bb) = tmp
+    (b def a, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
48. Input. char of interest: 'a)
    (ba def , bb)':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba def , bb) = tmp                       |     (def, bb) = tmp                           
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected token in pattern: {Node ERROR (2, 5) - (2, 7)}" at [3:5 - 3:7]
CST Stack:
    {Node ERROR (2, 5) - (2, 7)}
    {Node tuple_pattern (2, 4) - (2, 17)}
    {Node assignment (2, 4) - (2, 23)}
    {Node expression_statement (2, 4) - (2, 23)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 3)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (def, bb) = tmp
+    (ba def , bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
50. Input. char of interest: '
    (ba,  def bb) =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba,  def bb) = tmp                       |     tmp                                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    tmp
+    (ba,  def bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
51. Input. char of interest: '    (ba, b def b) = ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, b def b) = tmp                       |     tmp                                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    tmp
+    (ba, b def b) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
52. Input. char of interest: '   (ba, bb def ) = t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb def ) = tmp                       |     tmp                                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    tmp
+    (ba, bb def ) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
54. Input. char of interest: ' (ba, bb)  def = tmp':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb)  def = tmp                       |     tmp                                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    tmp
+    (ba, bb)  def = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
56. Input. char of interest: 'ba, bb) =  def tmp
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) =  def tmp                       |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    (ba, bb) =  def tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
57. Input. char of interest: 'a, bb) = t def mp
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = t def mp                       |     (ba, bb) = mp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = mp
+    (ba, bb) = t def mp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
58. Input. char of interest: ', bb) = tm def p
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tm def p                       |     (ba, bb) = p                              
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = p
+    (ba, bb) = tm def p
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
59. Input. char of interest: ' bb) = tmp def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp def                        |     (ba, bb) = def                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 3)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = def
+    (ba, bb) = tmp def 
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
64. Input. char of interest: '= tmp
     def inset':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
     def inset = a in {0, 1}                  |     {0, 1}                                    
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    {0, 1}
+     def inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
65. Input. char of interest: ' tmp
    i def nset ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    i def nset = a in {0, 1}                  |     nset = a in {0, 1}                        
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    nset = a in {0, 1}
+    i def nset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
66. Input. char of interest: 'tmp
    in def set =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    in def set = a in {0, 1}                  |     set = a in {0, 1}                         
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    set = a in {0, 1}
+    in def set = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
67. Input. char of interest: 'mp
    ins def et = ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    ins def et = a in {0, 1}                  |     et = a in {0, 1}                          
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    et = a in {0, 1}
+    ins def et = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
68. Input. char of interest: 'p
    inse def t = a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inse def t = a in {0, 1}                  |     t = a in {0, 1}                           
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    t = a in {0, 1}
+    inse def t = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
70. Input. char of interest: '    inset  def = a i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset  def = a in {0, 1}                  |     inset in {0, 1}                           
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset in {0, 1}
+    inset  def = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
72. Input. char of interest: '  inset =  def a in ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset =  def a in {0, 1}                  |     inset = def in {0, 1}                     
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 4)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = def in {0, 1}
+    inset =  def a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
74. Input. char of interest: 'inset = a  def in {0':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a  def in {0, 1}                  |     inset = def in {0, 1}                     
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 4)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = def in {0, 1}
+    inset = a  def in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
75. Input. char of interest: 'nset = a i def n {0,':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a i def n {0, 1}                  |     inset = {0, 1}                            
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = {0, 1}
+    inset = a i def n {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
77. Input. char of interest: 'et = a in  def {0, 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in  def {0, 1}                  |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a in  def {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
78. Input. char of interest: 't = a in { def 0, 1}':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in { def 0, 1}                  |     inset = a in {def, 1}                     
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [4:23 - 4:24]
CST Stack:
    {Node ERROR (3, 23) - (3, 24)}
    {Node set (3, 17) - (3, 28)}
    {Node comparison_operator (3, 12) - (3, 28)}
    {Node assignment (3, 4) - (3, 28)}
    {Node expression_statement (3, 4) - (3, 28)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 4)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {def, 1}
+    inset = a in { def 0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
79. Input. char of interest: ' = a in {0 def , 1}
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0 def , 1}                  |     inset = a in {def, 1}                     
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [4:18 - 4:19]
CST Stack:
    {Node ERROR (3, 18) - (3, 19)}
    {Node set (3, 17) - (3, 28)}
    {Node comparison_operator (3, 12) - (3, 28)}
    {Node assignment (3, 4) - (3, 28)}
    {Node expression_statement (3, 4) - (3, 28)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 4)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {def, 1}
+    inset = a in {0 def , 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
81. Input. char of interest: ' a in {0,  def 1}
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0,  def 1}                  |     inset = a in {0, def}                     
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [4:26 - 4:27]
CST Stack:
    {Node ERROR (3, 26) - (3, 27)}
    {Node set (3, 17) - (3, 28)}
    {Node comparison_operator (3, 12) - (3, 28)}
    {Node assignment (3, 4) - (3, 28)}
    {Node expression_statement (3, 4) - (3, 28)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 4)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, def}
+    inset = a in {0,  def 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
82. Input. char of interest: 'a in {0, 1 def }
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1 def }                  |     inset = a in {0, def}                     
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [4:21 - 4:22]
CST Stack:
    {Node ERROR (3, 21) - (3, 22)}
    {Node set (3, 17) - (3, 28)}
    {Node comparison_operator (3, 12) - (3, 28)}
    {Node assignment (3, 4) - (3, 28)}
    {Node expression_statement (3, 4) - (3, 28)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 4)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, def}
+    inset = a in {0, 1 def }
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
83. Input. char of interest: ' in {0, 1} def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1} def                   |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a in {0, 1} def 
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
88. Input. char of interest: '0, 1}
     def if a ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
     def if a <= 2 or a == 1:                 | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+     def if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
89. Input. char of interest: ', 1}
    i def f a <':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    i def f a <= 2 or a == 1:                 | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    i def f a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
91. Input. char of interest: '1}
    if  def a <= ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if  def a <= 2 or a == 1:                 |     if def <= 2 or a == 1:                    
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if def <= 2 or a == 1:
+    if  def a <= 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
93. Input. char of interest: '
    if a  def <= 2 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a  def <= 2 or a == 1:                 |     if def <= 2 or a == 1:                    
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if def <= 2 or a == 1:
+    if a  def <= 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
94. Input. char of interest: '    if a < def = 2 o':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a < def = 2 or a == 1:                 |     if a < def or a == 1:                     
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a < def or a == 1:
+    if a < def = 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
96. Input. char of interest: '  if a <=  def 2 or ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <=  def 2 or a == 1:                 |     if a <= def or a == 1:                    
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= def or a == 1:
+    if a <=  def 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
98. Input. char of interest: 'if a <= 2  def or a ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2  def or a == 1:                 |     if a <= def or a == 1:                    
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= def or a == 1:
+    if a <= 2  def or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
99. Input. char of interest: 'f a <= 2 o def r a =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 o def r a == 1:                 |     if a <= 2 == 1:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 == 1:
+    if a <= 2 o def r a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
101. Input. char of interest: 'a <= 2 or  def a == ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or  def a == 1:                 |     if a <= 2 or def == 1:                    
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or def == 1:
+    if a <= 2 or  def a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
103. Input. char of interest: '<= 2 or a  def == 1:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a  def == 1:                 |     if a <= 2 or def == 1:                    
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or def == 1:
+    if a <= 2 or a  def == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
104. Input. char of interest: '= 2 or a = def = 1:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a = def = 1:                 |     if a <= 2 or a:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a:
+    if a <= 2 or a = def = 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
106. Input. char of interest: '2 or a ==  def 1:
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a ==  def 1:                 |     if a <= 2 or a == def:                    
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == def:
+    if a <= 2 or a ==  def 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
107. Input. char of interest: ' or a == 1 def :
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1 def :                 |     if a <= 2 or a == def:                    
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == def:
+    if a <= 2 or a == 1 def :
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
108. Input. char of interest: 'or a == 1: def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1: def                  |     if a <= 2 or a == 1:                      
        return 1                              |         def                                   
    elif inset:                               |     return 1                                  
        return 1                              |     inset: 1                                  
    else:                                     |     else: return(a - 1) + fib(a - 2)          
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 6)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,11 +2,12 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
-        def
-    return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    if a <= 2 or a == 1: def 
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
117. Input. char of interest: ':
         def retur':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
         def return 1                         |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+         def return 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
118. Input. char of interest: '
        r def eturn':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        r def eturn 1                         |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        r def eturn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
119. Input. char of interest: '        re def turn ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        re def turn 1                         |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        re def turn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
120. Input. char of interest: '       ret def urn 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        ret def urn 1                         |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        ret def urn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
121. Input. char of interest: '      retu def rn 1
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        retu def rn 1                         |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        retu def rn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
122. Input. char of interest: '     retur def n 1
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        retur def n 1                         |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        retur def n 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
124. Input. char of interest: '   return  def 1
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return  def 1                         |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return 1
+        return  def 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
125. Input. char of interest: '  return 1 def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1 def                          |         return def                            
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 6)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return def
+        return 1 def 
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
130. Input. char of interest: 'urn 1
     def elif ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
     def elif inset:                          | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+     def elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
131. Input. char of interest: 'rn 1
    e def lif i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    e def lif inset:                          | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    e def lif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
132. Input. char of interest: 'n 1
    el def if in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    el def if inset:                          | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    el def if inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
133. Input. char of interest: ' 1
    eli def f ins':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    eli def f inset:                          | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    eli def f inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
135. Input. char of interest: '
    elif  def inset':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif  def inset:                          |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
+    elif  def inset:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
136. Input. char of interest: '    elif i def nset:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif i def nset:                          |     elif nset:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif nset:
+    elif i def nset:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
137. Input. char of interest: '   elif in def set:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif in def set:                          |     elif set:                                 
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif set:
+    elif in def set:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
138. Input. char of interest: '  elif ins def et:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif ins def et:                          |     elif ins:                                 
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif ins:
+    elif ins def et:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
139. Input. char of interest: ' elif inse def t:
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inse def t:                          |     elif inse:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inse:
+    elif inse def t:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
140. Input. char of interest: 'elif inset def :
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset def :                          |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
+    elif inset def :
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
141. Input. char of interest: 'lif inset: def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset: def                           |     elif inset:                               
        return 1                              |         def                                   
    else:                                     |     return 1                                  
        return fib(a - 1) + fib(a - 2)        |     else: return(a - 1) + fib(a - 2)          
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,10 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
-        def
-    return 1
-    else: return(a - 1) + fib(a - 2)
+    elif inset: def 
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
150. Input. char of interest: ':
         def retur':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
         def return 1                         |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+         def return 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
151. Input. char of interest: '
        r def eturn':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        r def eturn 1                         |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        r def eturn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
152. Input. char of interest: '        re def turn ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        re def turn 1                         |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        re def turn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
153. Input. char of interest: '       ret def urn 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        ret def urn 1                         |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        ret def urn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
154. Input. char of interest: '      retu def rn 1
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        retu def rn 1                         |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        retu def rn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
155. Input. char of interest: '     retur def n 1
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        retur def n 1                         |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        retur def n 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
157. Input. char of interest: '   return  def 1
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return  def 1                         |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return 1
+        return  def 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
158. Input. char of interest: '  return 1 def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1 def                          |         return def                            
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return def
+        return 1 def 
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
163. Input. char of interest: 'urn 1
     def else:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
     def else:                                | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+     def else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
164. Input. char of interest: 'rn 1
    e def lse:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    e def lse:                                |     lse: return(a - 1) + fib(a - 2)           
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    lse: return(a - 1) + fib(a - 2)
+    e def lse:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
165. Input. char of interest: 'n 1
    el def se:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    el def se:                                |     se: return(a - 1) + fib(a - 2)            
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    se: return(a - 1) + fib(a - 2)
+    el def se:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
166. Input. char of interest: ' 1
    els def e:
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    els def e:                                |     e: return(a - 1) + fib(a - 2)             
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    e: return(a - 1) + fib(a - 2)
+    els def e:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
167. Input. char of interest: '1
    else def :
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else def :                                |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,7 @@
         return 1
     elif inset:
         return 1
-    else:
+    else def :
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
168. Input. char of interest: '
    else: def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else: def                                 |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         def                                   
                                              |     return fib(a - 1) + fib(a - 2)            
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,9 +6,8 @@
         return 1
     elif inset:
         return 1
-    else:
-        def
-    return fib(a - 1) + fib(a - 2)
+    else: def 
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
177. Input. char of interest: ':
         def retur':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |                                                 
         def return fib(a - 1) + fib(a - 2)     | def somethingelse():                            
                                                |     pass                                        
def somethingelse():                            |                                                 
    pass                                        | def format_a_string(astring: str) -> str:       
                                                |     return ','.join([x for x in astring])       
def format_a_string(astring: str) -> str:       |                                                 
    return ','.join([x for x in astring])       | def main() -> int:                              
                                                |     """DOC_STRING"""                            
def main() -> int:                              |     somethingelse()                             
    """DOC_STRING"""                            |     fib(12)                                     
    somethingelse()                             |     astring = format_a_string()                 
    fib(12)                                     |     return 0                                    
    astring = format_a_string()                 | if __name__ == '__main__':                      
    return 0                                    |     main()                                      
if __name__ == '__main__':                      | 
    main()                                      | 
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,6 +6,8 @@
         return 1
     elif inset:
         return 1
+    else:
+         def return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
178. Input. char of interest: '
        r def eturn':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        r def eturn fib(a - 1) + fib(a - 2)     |         -1 + fib(a - 2)                         
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        -1 + fib(a - 2)
+        r def eturn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
179. Input. char of interest: '        re def turn ':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        re def turn fib(a - 1) + fib(a - 2)     |         -1 + fib(a - 2)                         
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        -1 + fib(a - 2)
+        re def turn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
180. Input. char of interest: '       ret def urn f':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        ret def urn fib(a - 1) + fib(a - 2)     |         -1 + fib(a - 2)                         
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        -1 + fib(a - 2)
+        ret def urn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
181. Input. char of interest: '      retu def rn fi':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        retu def rn fib(a - 1) + fib(a - 2)     |         -1 + fib(a - 2)                         
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        -1 + fib(a - 2)
+        retu def rn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
182. Input. char of interest: '     retur def n fib':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        retur def n fib(a - 1) + fib(a - 2)     |         -1 + fib(a - 2)                         
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        -1 + fib(a - 2)
+        retur def n fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
184. Input. char of interest: '   return  def fib(a':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return  def fib(a - 1) + fib(a - 2)     |         return fib(a - 1) + fib(a - 2)          
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return  def fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
185. Input. char of interest: '  return f def ib(a ':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return f def ib(a - 1) + fib(a - 2)     |         return ib(a - 1) + fib(a - 2)           
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return ib(a - 1) + fib(a - 2)
+        return f def ib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
186. Input. char of interest: ' return fi def b(a -':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fi def b(a - 1) + fib(a - 2)     |         return fi(a - 1) + fib(a - 2)           
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fi(a - 1) + fib(a - 2)
+        return fi def b(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
187. Input. char of interest: 'return fib def (a - ':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib def (a - 1) + fib(a - 2)     |         return def(a - 1) + fib(a - 2)          
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return def(a - 1) + fib(a - 2)
+        return fib def (a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
188. Input. char of interest: 'eturn fib( def a - 1':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib( def a - 1) + fib(a - 2)     |         return fib(def - 1) + fib(a - 2)        
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(def - 1) + fib(a - 2)
+        return fib( def a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
190. Input. char of interest: 'urn fib(a  def - 1) ':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a  def - 1) + fib(a - 2)     |         return fib(def - 1) + fib(a - 2)        
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected argument handling: Error" at [10:19 - 10:20]
CST Stack:
    {Node ERROR (9, 19) - (9, 20)}
    {Node argument_list (9, 18) - (9, 30)}
    {Node call (9, 15) - (9, 30)}
    {Node binary_operator (9, 15) - (9, 43)}
    {Node return_statement (9, 8) - (9, 43)}
    {Node block (9, 8) - (9, 43)}
    {Node else_clause (8, 4) - (9, 43)}
    {Node if_statement (4, 4) - (9, 43)}
    {Node block (1, 4) - (9, 43)}
    {Node function_definition (0, 0) - (9, 43)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(def - 1) + fib(a - 2)
+        return fib(a  def - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
192. Input. char of interest: 'n fib(a -  def 1) + ':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a -  def 1) + fib(a - 2)     |         return fib(a - def) + fib(a - 2)        
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected argument handling: Error" at [10:28 - 10:29]
CST Stack:
    {Node ERROR (9, 28) - (9, 29)}
    {Node argument_list (9, 18) - (9, 30)}
    {Node call (9, 15) - (9, 30)}
    {Node binary_operator (9, 15) - (9, 43)}
    {Node return_statement (9, 8) - (9, 43)}
    {Node block (9, 8) - (9, 43)}
    {Node else_clause (8, 4) - (9, 43)}
    {Node if_statement (4, 4) - (9, 43)}
    {Node block (1, 4) - (9, 43)}
    {Node function_definition (0, 0) - (9, 43)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - def) + fib(a - 2)
+        return fib(a -  def 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
193. Input. char of interest: ' fib(a - 1 def ) + f':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1 def ) + fib(a - 2)     |         return fib(a - def) + fib(a - 2)        
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - def) + fib(a - 2)
+        return fib(a - 1 def ) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
195. Input. char of interest: 'ib(a - 1)  def + fib':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1)  def + fib(a - 2)     |         return fib(a - 1) + fib(a - 2)          
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1)  def + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
197. Input. char of interest: '(a - 1) +  def fib(a':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) +  def fib(a - 2)     |         return fib(a - 1) + fib(a - 2)          
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1) +  def fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
198. Input. char of interest: 'a - 1) + f def ib(a ':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) + f def ib(a - 2)     |         return fib(a - 1) + ib(a - 2)           
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + ib(a - 2)
+        return fib(a - 1) + f def ib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
199. Input. char of interest: ' - 1) + fi def b(a -':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) + fi def b(a - 2)     |         return fib(a - 1) + b(a - 2)            
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + b(a - 2)
+        return fib(a - 1) + fi def b(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
200. Input. char of interest: '- 1) + fib def (a - ':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) + fib def (a - 2)     |         return fib(a - 1) + def(a - 2)          
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + def(a - 2)
+        return fib(a - 1) + fib def (a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
201. Input. char of interest: ' 1) + fib( def a - 2':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) + fib( def a - 2)     |         return fib(a - 1) + fib(def - 2)        
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(def - 2)
+        return fib(a - 1) + fib( def a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
203. Input. char of interest: ') + fib(a  def - 2)
':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) + fib(a  def - 2)     |         return fib(a - 1) + fib(def - 2)        
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected argument handling: Error" at [10:32 - 10:33]
CST Stack:
    {Node ERROR (9, 32) - (9, 33)}
    {Node argument_list (9, 31) - (9, 43)}
    {Node call (9, 28) - (9, 43)}
    {Node binary_operator (9, 15) - (9, 43)}
    {Node return_statement (9, 8) - (9, 43)}
    {Node block (9, 8) - (9, 43)}
    {Node else_clause (8, 4) - (9, 43)}
    {Node if_statement (4, 4) - (9, 43)}
    {Node block (1, 4) - (9, 43)}
    {Node function_definition (0, 0) - (9, 43)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(def - 2)
+        return fib(a - 1) + fib(a  def - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
205. Input. char of interest: '+ fib(a -  def 2)

d':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) + fib(a -  def 2)     |         return fib(a - 1) + fib(a - def)        
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected argument handling: Error" at [10:41 - 10:42]
CST Stack:
    {Node ERROR (9, 41) - (9, 42)}
    {Node argument_list (9, 31) - (9, 43)}
    {Node call (9, 28) - (9, 43)}
    {Node binary_operator (9, 15) - (9, 43)}
    {Node return_statement (9, 8) - (9, 43)}
    {Node block (9, 8) - (9, 43)}
    {Node else_clause (8, 4) - (9, 43)}
    {Node if_statement (4, 4) - (9, 43)}
    {Node block (1, 4) - (9, 43)}
    {Node function_definition (0, 0) - (9, 43)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - def)
+        return fib(a - 1) + fib(a -  def 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
206. Input. char of interest: ' fib(a - 2 def )

de':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) + fib(a - 2 def )     |         return fib(a - 1) + fib(a - def)        
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - def)
+        return fib(a - 1) + fib(a - 2 def )
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
207. Input. char of interest: 'fib(a - 2) def 

def':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) + fib(a - 2) def      |         return fib(a - 1) + def                 
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()                 |     astring = format_a_string()                 
    return 0                                    |     return 0                                    
if __name__ == '__main__':                      | if __name__ == '__main__':                      
    main()                                      |     main()                                      
                                                | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + def
+        return fib(a - 1) + fib(a - 2) def 
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
208. Input. char of interest: 'ib(a - 2)
 def 
def ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
 def                                          |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -8,7 +8,7 @@
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
-
+ def 
 def somethingelse():
     pass
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
209. Input. char of interest: 'b(a - 2)

 def def s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
 def def somethingelse():                     | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+ def def somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
210. Input. char of interest: '(a - 2)

d def ef so':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
d def ef somethingelse():                     | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+d def ef somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
211. Input. char of interest: 'a - 2)

de def f som':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
de def f somethingelse():                     | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+de def f somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
213. Input. char of interest: '- 2)

def  def somet':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def  def somethingelse():                     | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def  def somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
214. Input. char of interest: ' 2)

def s def ometh':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def s def omethingelse():                     | def omethingelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def omethingelse():
+def s def omethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
215. Input. char of interest: '2)

def so def methi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def so def methingelse():                     | def methingelse():                            
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def methingelse():
+def so def methingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
216. Input. char of interest: ')

def som def ethin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def som def ethingelse():                     | def ethingelse():                             
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def ethingelse():
+def som def ethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
217. Input. char of interest: '

def some def thing':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def some def thingelse():                     | def thingelse():                              
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def thingelse():
+def some def thingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
218. Input. char of interest: '
def somet def hinge':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somet def hingelse():                     | def hingelse():                               
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def hingelse():
+def somet def hingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
219. Input. char of interest: 'def someth def ingel':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def someth def ingelse():                     | def ingelse():                                
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def ingelse():
+def someth def ingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
220. Input. char of interest: 'ef somethi def ngels':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethi def ngelse():                     | def somethi():                                
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethi():
+def somethi def ngelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
221. Input. char of interest: 'f somethin def gelse':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethin def gelse():                     | def somethin():                               
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethin():
+def somethin def gelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
222. Input. char of interest: ' something def else(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def something def else():                     | def something():                              
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def something():
+def something def else():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
223. Input. char of interest: 'somethinge def lse()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethinge def lse():                     | def somethinge():                             
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethinge():
+def somethinge def lse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
224. Input. char of interest: 'omethingel def se():':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingel def se():                     | def somethingel():                            
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingel():
+def somethingel def se():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
225. Input. char of interest: 'methingels def e():
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingels def e():                     | def somethingels():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingels():
+def somethingels def e():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
226. Input. char of interest: 'ethingelse def ():
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse def ():                     | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def somethingelse def ():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
227. Input. char of interest: 'thingelse( def ):
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse( def ):                     | def somethingelse(def):                       
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 12)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse(def):
+def somethingelse( def ):
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
228. Input. char of interest: 'hingelse() def :
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse() def :                     | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def somethingelse() def :
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
229. Input. char of interest: 'ingelse(): def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse(): def                      | def somethingelse():                          
    pass                                      |     def                                       
                                              | pass                                          
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 13)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,9 +9,8 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
-    def
-pass
+def somethingelse(): def 
+    pass
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
234. Input. char of interest: 'se():
     def pass
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
     def pass                                 |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

Output AST is not valid according to CPython: expected an indented block after function definition on line 12 (<unknown>, line 14)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,6 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
+     def pass
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
235. Input. char of interest: 'e():
    p def ass

':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    p def ass                                 |     ass                                       
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    ass
+    p def ass
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
236. Input. char of interest: '():
    pa def ss

d':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pa def ss                                 |     ss                                        
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    ss
+    pa def ss
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
237. Input. char of interest: '):
    pas def s

de':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pas def s                                 |     s                                         
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    s
+    pas def s
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
238. Input. char of interest: ':
    pass def 

def':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass def                                  |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

Output AST is not valid according to CPython: expected an indented block after function definition on line 12 (<unknown>, line 14)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,6 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
+    pass def 
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
239. Input. char of interest: '
    pass
 def 
def ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
 def                                          |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -11,7 +11,7 @@
 
 def somethingelse():
     pass
-
+ def 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
240. Input. char of interest: '    pass

 def def f':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
 def def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+ def def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
241. Input. char of interest: '   pass

d def ef fo':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
d def ef format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+d def ef format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
242. Input. char of interest: '  pass

de def f for':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
de def f format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+de def f format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
244. Input. char of interest: 'pass

def  def forma':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def  def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def  def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
245. Input. char of interest: 'ass

def f def ormat':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def f def ormat_a_string(astring: str) -> str:     | def ormat_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def ormat_a_string(astring: str) -> str:
+def f def ormat_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
246. Input. char of interest: 'ss

def fo def rmat_':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def fo def rmat_a_string(astring: str) -> str:     | def rmat_a_string(astring: str) -> str:            
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def rmat_a_string(astring: str) -> str:
+def fo def rmat_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
247. Input. char of interest: 's

def for def mat_a':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def for def mat_a_string(astring: str) -> str:     | def mat_a_string(astring: str) -> str:             
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def mat_a_string(astring: str) -> str:
+def for def mat_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
248. Input. char of interest: '

def form def at_a_':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def form def at_a_string(astring: str) -> str:     | def at_a_string(astring: str) -> str:              
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def at_a_string(astring: str) -> str:
+def form def at_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
249. Input. char of interest: '
def forma def t_a_s':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def forma def t_a_string(astring: str) -> str:     | def t_a_string(astring: str) -> str:               
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def t_a_string(astring: str) -> str:
+def forma def t_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
250. Input. char of interest: 'def format def _a_st':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format def _a_string(astring: str) -> str:     | def _a_string(astring: str) -> str:                
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def _a_string(astring: str) -> str:
+def format def _a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
251. Input. char of interest: 'ef format_ def a_str':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_ def a_string(astring: str) -> str:     | def a_string(astring: str) -> str:                 
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def a_string(astring: str) -> str:
+def format_ def a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
252. Input. char of interest: 'f format_a def _stri':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a def _string(astring: str) -> str:     | def format_a(astring: str) -> str:                 
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a(astring: str) -> str:
+def format_a def _string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
253. Input. char of interest: ' format_a_ def strin':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_ def string(astring: str) -> str:     | def format_a_(astring: str) -> str:                
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_(astring: str) -> str:
+def format_a_ def string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
254. Input. char of interest: 'format_a_s def tring':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_s def tring(astring: str) -> str:     | def format_a_s(astring: str) -> str:               
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_s(astring: str) -> str:
+def format_a_s def tring(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
255. Input. char of interest: 'ormat_a_st def ring(':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_st def ring(astring: str) -> str:     | def format_a_st(astring: str) -> str:              
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_st(astring: str) -> str:
+def format_a_st def ring(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
256. Input. char of interest: 'rmat_a_str def ing(a':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_str def ing(astring: str) -> str:     | def format_a_str(astring: str) -> str:             
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_str(astring: str) -> str:
+def format_a_str def ing(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
257. Input. char of interest: 'mat_a_stri def ng(as':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_stri def ng(astring: str) -> str:     | def format_a_stri(astring: str) -> str:            
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_stri(astring: str) -> str:
+def format_a_stri def ng(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
258. Input. char of interest: 'at_a_strin def g(ast':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_strin def g(astring: str) -> str:     | def format_a_strin(astring: str) -> str:           
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_strin(astring: str) -> str:
+def format_a_strin def g(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
259. Input. char of interest: 't_a_string def (astr':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string def (astring: str) -> str:     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string def (astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
260. Input. char of interest: '_a_string( def astri':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string( def astring: str) -> str:     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string( def astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
261. Input. char of interest: 'a_string(a def strin':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(a def string: str) -> str:     | def format_a_string(string: str) -> str:           
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(string: str) -> str:
+def format_a_string(a def string: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
262. Input. char of interest: '_string(as def tring':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(as def tring: str) -> str:     | def format_a_string(tring: str) -> str:            
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(tring: str) -> str:
+def format_a_string(as def tring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
263. Input. char of interest: 'string(ast def ring:':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(ast def ring: str) -> str:     | def format_a_string(ring: str) -> str:             
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(ring: str) -> str:
+def format_a_string(ast def ring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
264. Input. char of interest: 'tring(astr def ing: ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astr def ing: str) -> str:     | def format_a_string(astr: str) -> str:             
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astr: str) -> str:
+def format_a_string(astr def ing: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
265. Input. char of interest: 'ring(astri def ng: s':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astri def ng: str) -> str:     | def format_a_string(astri: str) -> str:            
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astri: str) -> str:
+def format_a_string(astri def ng: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
266. Input. char of interest: 'ing(astrin def g: st':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astrin def g: str) -> str:     | def format_a_string(astrin: str) -> str:           
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astrin: str) -> str:
+def format_a_string(astrin def g: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
267. Input. char of interest: 'ng(astring def : str':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring def : str) -> str:     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring def : str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
269. Input. char of interest: '(astring:  def str) ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring:  def str) -> str:     | def format_a_string(astring: def) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 15)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: def) -> str:
+def format_a_string(astring:  def str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
270. Input. char of interest: 'astring: s def tr) -':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: s def tr) -> str:     | def format_a_string(astring: tr) -> str:           
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: tr) -> str:
+def format_a_string(astring: s def tr) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
271. Input. char of interest: 'string: st def r) ->':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: st def r) -> str:     | def format_a_string(astring: st) -> str:           
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: st) -> str:
+def format_a_string(astring: st def r) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
272. Input. char of interest: 'tring: str def ) -> ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str def ) -> str:     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring: str def ) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
274. Input. char of interest: 'ing: str)  def -> st':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str)  def -> str:     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring: str)  def -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
275. Input. char of interest: 'ng: str) - def > str':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            |                                                    
    tmp = (a, a)                                   | 
    (ba, bb) = tmp                                 | 
    inset = a in {0, 1}                            | 
    if a <= 2 or a == 1:                           | 
        return 1                                   | 
    elif inset:                                    | 
        return 1                                   | 
    else:                                          | 
        return fib(a - 1) + fib(a - 2)             | 
                                                   | 
def somethingelse():                               | 
    pass                                           | 
                                                   | 
def format_a_string(astring: str) - def > str:     | 
    return ','.join([x for x in astring])          | 
                                                   | 
def main() -> int:                                 | 
    """DOC_STRING"""                               | 
    somethingelse()                                | 
    fib(12)                                        | 
    astring = format_a_string()                    | 
    return 0                                       | 
if __name__ == '__main__':                         | 
    main()                                         | 
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) - def > str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
277. Input. char of interest: ': str) ->  def str:
':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) ->  def str:     | def format_a_string(astring: str) -> def:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: expected ':' (<unknown>, line 15)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> def:
+def format_a_string(astring: str) ->  def str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
278. Input. char of interest: ' str) -> s def tr:
 ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> s def tr:     | def format_a_string(astring: str) -> tr:           
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> tr:
+def format_a_string(astring: str) -> s def tr:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
279. Input. char of interest: 'str) -> st def r:
  ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> st def r:     | def format_a_string(astring: str) -> st:           
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> st:
+def format_a_string(astring: str) -> st def r:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
280. Input. char of interest: 'tr) -> str def :
   ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str def :     | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring: str) -> str def :
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
281. Input. char of interest: 'r) -> str: def 
    ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str: def      | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])          |     def                                            
                                                   | return ','.join([x for x in astring])              
def main() -> int:                                 |                                                    
    """DOC_STRING"""                               | def main() -> int:                                 
    somethingelse()                                |     """DOC_STRING"""                               
    fib(12)                                        |     somethingelse()                                
    astring = format_a_string()                    |     fib(12)                                        
    return 0                                       |     astring = format_a_string()                    
if __name__ == '__main__':                         |     return 0                                       
    main()                                         | if __name__ == '__main__':                         
                                                   |     main()                                         

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,9 +12,8 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
-    def
-return ','.join([x for x in astring])
+def format_a_string(astring: str) -> str: def 
+    return ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
286. Input. char of interest: ' str:
     def retur':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
     def return ','.join([x for x in astring])     |     ','.join([x for x in astring])                 
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+     def return ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
287. Input. char of interest: 'str:
    r def eturn':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    r def eturn ','.join([x for x in astring])     |     ','.join([x for x in astring])                 
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    r def eturn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
288. Input. char of interest: 'tr:
    re def turn ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    re def turn ','.join([x for x in astring])     |     ','.join([x for x in astring])                 
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    re def turn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
289. Input. char of interest: 'r:
    ret def urn '':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    ret def urn ','.join([x for x in astring])     |     ','.join([x for x in astring])                 
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    ret def urn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
290. Input. char of interest: ':
    retu def rn ',':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    retu def rn ','.join([x for x in astring])     |     ','.join([x for x in astring])                 
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    retu def rn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
291. Input. char of interest: '
    retur def n ','':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    retur def n ','.join([x for x in astring])     |     ','.join([x for x in astring])                 
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    retur def n ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
293. Input. char of interest: '   return  def ','.j':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return  def ','.join([x for x in astring])     |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return  def ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
294. Input. char of interest: '  return ' def ,'.jo':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ' def ,'.join([x for x in astring])     |     return ' def ,'.join([x for x in astring])     
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
295. Input. char of interest: ' return ', def '.joi':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ', def '.join([x for x in astring])     |     return ', def '.join([x for x in astring])     
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
296. Input. char of interest: 'return ',' def .join':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ',' def .join([x for x in astring])     |     return def.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return def.join([x for x in astring])
+    return ',' def .join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
297. Input. char of interest: 'eturn ','. def join(':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','. def join([x for x in astring])     |     return ','.def([x for x in astring])           
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.def([x for x in astring])
+    return ','. def join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
298. Input. char of interest: 'turn ','.j def oin([':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.j def oin([x for x in astring])     |     return oin([x for x in astring])               
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return oin([x for x in astring])
+    return ','.j def oin([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
299. Input. char of interest: 'urn ','.jo def in([x':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.jo def in([x for x in astring])     |     return ','.jo in [x for x in astring]          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.jo in [x for x in astring]
+    return ','.jo def in([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
300. Input. char of interest: 'rn ','.joi def n([x ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.joi def n([x for x in astring])     |     return n([x for x in astring])                 
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return n([x for x in astring])
+    return ','.joi def n([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
301. Input. char of interest: 'n ','.join def ([x f':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join def ([x for x in astring])     |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join def ([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
302. Input. char of interest: ' ','.join( def [x fo':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join( def [x for x in astring])     |     return ','.join(def[x in astring])             
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join(def[x in astring])
+    return ','.join( def [x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
303. Input. char of interest: '','.join([ def x for':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([ def x for x in astring])     |     return ','.join([def for x in astring])        
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([def for x in astring])
+    return ','.join([ def x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
305. Input. char of interest: ''.join([x  def for x':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x  def for x in astring])     |     return ','.join([def for x in astring])        
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([def for x in astring])
+    return ','.join([x  def for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
306. Input. char of interest: '.join([x f def or x ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x f def or x in astring])     |     return ','.join([x or x in astring])           
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x or x in astring])
+    return ','.join([x f def or x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
307. Input. char of interest: 'join([x fo def r x i':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x fo def r x in astring])     |     return ','.join([x in astring])                
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [16:21 - 16:31]
CST Stack:
    {Node ERROR (15, 21) - (15, 31)}
    {Node list (15, 20) - (15, 45)}
    {Node argument_list (15, 19) - (15, 46)}
    {Node call (15, 11) - (15, 46)}
    {Node return_statement (15, 4) - (15, 46)}
    {Node block (15, 4) - (15, 46)}
    {Node function_definition (14, 0) - (15, 46)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x in astring])
+    return ','.join([x fo def r x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
309. Input. char of interest: 'in([x for  def x in ':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for  def x in astring])     |     return ','.join([x for def in astring])        
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for def in astring])
+    return ','.join([x for  def x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
311. Input. char of interest: '([x for x  def in as':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x  def in astring])     |     return ','.join([x for def in astring])        
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for def in astring])
+    return ','.join([x for x  def in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
312. Input. char of interest: '[x for x i def n ast':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x i def n astring])     |     return ','.join([x])                           
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

1 Recoverable error detected:
UnexpectedExpression: "Error" at [16:23 - 16:44]
CST Stack:
    {Node ERROR (15, 23) - (15, 44)}
    {Node list (15, 20) - (15, 45)}
    {Node argument_list (15, 19) - (15, 46)}
    {Node call (15, 11) - (15, 46)}
    {Node return_statement (15, 4) - (15, 46)}
    {Node block (15, 4) - (15, 46)}
    {Node function_definition (14, 0) - (15, 46)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x])
+    return ','.join([x for x i def n astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
314. Input. char of interest: ' for x in  def astri':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in  def astring])     |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x in  def astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
315. Input. char of interest: 'for x in a def strin':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in a def string])     |     return ','.join([x for x in string])           
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in string])
+    return ','.join([x for x in a def string])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
316. Input. char of interest: 'or x in as def tring':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in as def tring])     |     return ','.join([x for x in tring])            
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in tring])
+    return ','.join([x for x in as def tring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
317. Input. char of interest: 'r x in ast def ring]':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in ast def ring])     |     return ','.join([x for x in ring])             
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in ring])
+    return ','.join([x for x in ast def ring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
318. Input. char of interest: ' x in astr def ing])':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astr def ing])     |     return ','.join([x for x in astr])             
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astr])
+    return ','.join([x for x in astr def ing])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
319. Input. char of interest: 'x in astri def ng])
':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astri def ng])     |     return ','.join([x for x in astri])            
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astri])
+    return ','.join([x for x in astri def ng])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
320. Input. char of interest: ' in astrin def g])

':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astrin def g])     |     return ','.join([x for x in astrin])           
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astrin])
+    return ','.join([x for x in astrin def g])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
321. Input. char of interest: 'in astring def ])

d':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring def ])     |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x in astring def ])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
322. Input. char of interest: 'n astring] def )

de':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring] def )     |     return ','.join([x for x in astring])          
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected argument handling: Error" at [16:41 - 16:44]
CST Stack:
    {Node ERROR (15, 41) - (15, 44)}
    {Node argument_list (15, 19) - (15, 46)}
    {Node call (15, 11) - (15, 46)}
    {Node return_statement (15, 4) - (15, 46)}
    {Node block (15, 4) - (15, 46)}
    {Node function_definition (14, 0) - (15, 46)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x in astring] def )
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
323. Input. char of interest: ' astring]) def 

def':

Input:                                             | ERRPY Recovered AST:                               
---------------------------------------------------| ---------------------------------------------------
def fib(a: int) -> int:                            | def fib(a: int) -> int:                            
    tmp = (a, a)                                   |     tmp = (a, a)                                   
    (ba, bb) = tmp                                 |     (ba, bb) = tmp                                 
    inset = a in {0, 1}                            |     inset = a in {0, 1}                            
    if a <= 2 or a == 1:                           |     if a <= 2 or a == 1:                           
        return 1                                   |         return 1                                   
    elif inset:                                    |     elif inset:                                    
        return 1                                   |         return 1                                   
    else:                                          |     else:                                          
        return fib(a - 1) + fib(a - 2)             |         return fib(a - 1) + fib(a - 2)             
                                                   |                                                    
def somethingelse():                               | def somethingelse():                               
    pass                                           |     pass                                           
                                                   |                                                    
def format_a_string(astring: str) -> str:          | def format_a_string(astring: str) -> str:          
    return ','.join([x for x in astring]) def      |     return def                                     
                                                   |                                                    
def main() -> int:                                 | def main() -> int:                                 
    """DOC_STRING"""                               |     """DOC_STRING"""                               
    somethingelse()                                |     somethingelse()                                
    fib(12)                                        |     fib(12)                                        
    astring = format_a_string()                    |     astring = format_a_string()                    
    return 0                                       |     return 0                                       
if __name__ == '__main__':                         | if __name__ == '__main__':                         
    main()                                         |     main()                                         
                                                   | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return def
+    return ','.join([x for x in astring]) def 
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
324. Input. char of interest: 'astring])
 def 
def ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
 def                                          |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -14,7 +14,7 @@
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
-
+ def 
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
325. Input. char of interest: 'string])

 def def m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
 def def main() -> int:                       | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+ def def main() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
326. Input. char of interest: 'tring])

d def ef ma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
d def ef main() -> int:                       | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+d def ef main() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
327. Input. char of interest: 'ring])

de def f mai':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
de def f main() -> int:                       | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+de def f main() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
329. Input. char of interest: 'ng])

def  def main(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def  def main() -> int:                       | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def  def main() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
330. Input. char of interest: 'g])

def m def ain()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def m def ain() -> int:                       | def ain() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def ain() -> int:
+def m def ain() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
331. Input. char of interest: '])

def ma def in() ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def ma def in() -> int:                       | def ma() -> int:                              
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def ma() -> int:
+def ma def in() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
332. Input. char of interest: ')

def mai def n() -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def mai def n() -> int:                       | def mai() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def mai() -> int:
+def mai def n() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
333. Input. char of interest: '

def main def () ->':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main def () -> int:                       | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main def () -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
334. Input. char of interest: '
def main( def ) -> ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main( def ) -> int:                       | def main(def) -> int:                         
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 18)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main(def) -> int:
+def main( def ) -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
336. Input. char of interest: 'ef main()  def -> in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main()  def -> int:                       | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main()  def -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
337. Input. char of interest: 'f main() - def > int':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() - def > int:                       | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() - def > int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
339. Input. char of interest: 'main() ->  def int:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() ->  def int:                       | def main() -> def:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: expected ':' (<unknown>, line 18)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> def:
+def main() ->  def int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
340. Input. char of interest: 'ain() -> i def nt:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> i def nt:                       | def main() -> nt:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> nt:
+def main() -> i def nt:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
341. Input. char of interest: 'in() -> in def t:
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> in def t:                       | def main() -> in:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: expected ':' (<unknown>, line 18)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> in:
+def main() -> in def t:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
342. Input. char of interest: 'n() -> int def :
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int def :                       | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main() -> int def :
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
343. Input. char of interest: '() -> int: def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int: def                        | def main() -> int:                            
    """DOC_STRING"""                          |     def                                       
    somethingelse()                           | 'DOC_STRING'                                  
    fib(12)                                   | somethingelse()                               
    astring = format_a_string()               | fib(12)                                       
    return 0                                  | astring = format_a_string()                   
if __name__ == '__main__':                    | return 0                                      
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 19)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,12 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
-    def
-'DOC_STRING'
-somethingelse()
-fib(12)
-astring = format_a_string()
-return 0
+def main() -> int: def 
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
348. Input. char of interest: ' int:
     def """DO':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
     def """DOC_STRING"""                     |     """DOC_STRING"""                          
    somethingelse()                           | somethingelse()                               
    fib(12)                                   | fib(12)                                       
    astring = format_a_string()               | astring = format_a_string()                   
    return 0                                  | return 0                                      
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """DOC_STRING"""
-somethingelse()
-fib(12)
-astring = format_a_string()
-return 0
+     def """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
349. Input. char of interest: 'int:
    " def ""DOC':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    " def ""DOC_STRING"""                     |     """ def DOC_STRING"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """ def DOC_STRING"""
+    " def ""DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
350. Input. char of interest: 'nt:
    "" def "DOC_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    "" def "DOC_STRING"""                     |     """eDOC_STRING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """eDOC_STRING"""
+    "" def "DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
351. Input. char of interest: 't:
    """ def DOC_S':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """ def DOC_STRING"""                     |     """ def DOC_STRING"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
352. Input. char of interest: ':
    """D def OC_ST':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """D def OC_STRING"""                     |     """D def OC_STRING"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
353. Input. char of interest: '
    """DO def C_STR':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DO def C_STRING"""                     |     """DO def C_STRING"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
354. Input. char of interest: '    """DOC def _STRI':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC def _STRING"""                     |     """DOC def _STRING"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
355. Input. char of interest: '   """DOC_ def STRIN':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_ def STRING"""                     |     """DOC_ def STRING"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
356. Input. char of interest: '  """DOC_S def TRING':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_S def TRING"""                     |     """DOC_S def TRING"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
357. Input. char of interest: ' """DOC_ST def RING"':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_ST def RING"""                     |     """DOC_ST def RING"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
358. Input. char of interest: '"""DOC_STR def ING""':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STR def ING"""                     |     """DOC_STR def ING"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
359. Input. char of interest: '""DOC_STRI def NG"""':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRI def NG"""                     |     """DOC_STRI def NG"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
360. Input. char of interest: '"DOC_STRIN def G"""
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRIN def G"""                     |     """DOC_STRIN def G"""                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
361. Input. char of interest: 'DOC_STRING def """
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING def """                     |     """DOC_STRING def """                     
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
362. Input. char of interest: 'OC_STRING" def ""
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING" def ""                     |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING" def ""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
363. Input. char of interest: 'C_STRING"" def "
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"" def "                     |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING"" def "
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
364. Input. char of interest: '_STRING""" def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING""" def                      |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING""" def 
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
369. Input. char of interest: 'NG"""
     def somet':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
     def somethingelse()                      |     0                                         
    fib(12)                                   | if __name__ == '__main__':                    
    astring = format_a_string()               |     main()                                    
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,6 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    0
+     def somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
370. Input. char of interest: 'G"""
    s def ometh':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    s def omethingelse()                      |     omethingelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    omethingelse()
+    s def omethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
371. Input. char of interest: '"""
    so def methi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    so def methingelse()                      |     methingelse()                             
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    methingelse()
+    so def methingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
372. Input. char of interest: '""
    som def ethin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    som def ethingelse()                      |     ethingelse()                              
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    ethingelse()
+    som def ethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
373. Input. char of interest: '"
    some def thing':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    some def thingelse()                      |     thingelse()                               
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    thingelse()
+    some def thingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
374. Input. char of interest: '
    somet def hinge':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somet def hingelse()                      |     hingelse()                                
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    hingelse()
+    somet def hingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
375. Input. char of interest: '    someth def ingel':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    someth def ingelse()                      |     ingelse()                                 
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    ingelse()
+    someth def ingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
376. Input. char of interest: '   somethi def ngels':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethi def ngelse()                      |     ngelse()                                  
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    ngelse()
+    somethi def ngelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
377. Input. char of interest: '  somethin def gelse':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethin def gelse()                      |     gelse()                                   
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    gelse()
+    somethin def gelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
378. Input. char of interest: ' something def else(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    something def else()                      |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,7 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
+    something def else()
+    fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
379. Input. char of interest: 'somethinge def lse()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethinge def lse()                      |     lse()                                     
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    lse()
+    somethinge def lse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
380. Input. char of interest: 'omethingel def se()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingel def se()                      |     se()                                      
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    se()
+    somethingel def se()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
381. Input. char of interest: 'methingels def e()
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingels def e()                      |     e()                                       
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    e()
+    somethingels def e()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
382. Input. char of interest: 'ethingelse def ()
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse def ()                      |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse()
+    somethingelse def ()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
383. Input. char of interest: 'thingelse( def )
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse( def )                      |     somethingelse(def)                        
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 20)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse(def)
+    somethingelse( def )
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
384. Input. char of interest: 'hingelse() def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse() def                       |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,8 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
+    somethingelse() def 
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
389. Input. char of interest: 'lse()
     def fib(1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
     def fib(12)                              |     0                                         
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,6 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    0
+     def fib(12)
+    astring = format_a_string()
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
390. Input. char of interest: 'se()
    f def ib(12':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    f def ib(12)                              |     ib(12)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    ib(12)
+    f def ib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
391. Input. char of interest: 'e()
    fi def b(12)':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fi def b(12)                              |     b(12)                                     
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    b(12)
+    fi def b(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
392. Input. char of interest: '()
    fib def (12)
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib def (12)                              |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(12)
+    fib def (12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
393. Input. char of interest: ')
    fib( def 12)
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib( def 12)                              |     fib(def)                                  
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected argument handling: Error" at [21:13 - 21:15]
CST Stack:
    {Node ERROR (20, 13) - (20, 15)}
    {Node argument_list (20, 7) - (20, 16)}
    {Node call (20, 4) - (20, 16)}
    {Node expression_statement (20, 4) - (20, 16)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 21)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(def)
+    fib( def 12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
394. Input. char of interest: '
    fib(1 def 2)
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(1 def 2)                              |     fib(1)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected argument handling: Error" at [21:10 - 21:15]
CST Stack:
    {Node ERROR (20, 10) - (20, 15)}
    {Node argument_list (20, 7) - (20, 16)}
    {Node call (20, 4) - (20, 16)}
    {Node expression_statement (20, 4) - (20, 16)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(1)
+    fib(1 def 2)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
395. Input. char of interest: '    fib(12 def )
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12 def )                              |     fib(def)                                  
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
UnexpectedExpression: "unexpected argument handling: Error" at [21:8 - 21:10]
CST Stack:
    {Node ERROR (20, 8) - (20, 10)}
    {Node argument_list (20, 7) - (20, 16)}
    {Node call (20, 4) - (20, 16)}
    {Node expression_statement (20, 4) - (20, 16)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 21)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(def)
+    fib(12 def )
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
396. Input. char of interest: '   fib(12) def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12) def                               |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,7 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
+    fib(12) def 
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
401. Input. char of interest: 'b(12)
     def astri':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
     def astring = format_a_string()          |     0                                         
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,6 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    0
+     def astring = format_a_string()
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
402. Input. char of interest: '(12)
    a def strin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    a def string = format_a_string()          |     string = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    string = format_a_string()
+    a def string = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
403. Input. char of interest: '12)
    as def tring':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    as def tring = format_a_string()          |     tring = format_a_string()                 
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    tring = format_a_string()
+    as def tring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
404. Input. char of interest: '2)
    ast def ring ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    ast def ring = format_a_string()          |     ring = format_a_string()                  
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    ring = format_a_string()
+    ast def ring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
405. Input. char of interest: ')
    astr def ing =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astr def ing = format_a_string()          |     ing = format_a_string()                   
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    ing = format_a_string()
+    astr def ing = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
406. Input. char of interest: '
    astri def ng = ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astri def ng = format_a_string()          |     ng = format_a_string()                    
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    ng = format_a_string()
+    astri def ng = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
407. Input. char of interest: '    astrin def g = f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astrin def g = format_a_string()          |     g = format_a_string()                     
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    g = format_a_string()
+    astrin def g = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
409. Input. char of interest: '  astring  def = for':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring  def = format_a_string()          |     format_a_string()                         
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    format_a_string()
+    astring  def = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
411. Input. char of interest: 'astring =  def forma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring =  def format_a_string()          |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+    astring =  def format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
412. Input. char of interest: 'string = f def ormat':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = f def ormat_a_string()          |     astring = ormat_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = ormat_a_string()
+    astring = f def ormat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
413. Input. char of interest: 'tring = fo def rmat_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = fo def rmat_a_string()          |     astring = rmat_a_string()                 
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = rmat_a_string()
+    astring = fo def rmat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
414. Input. char of interest: 'ring = for def mat_a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = for def mat_a_string()          |     astring = mat_a_string()                  
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = mat_a_string()
+    astring = for def mat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
415. Input. char of interest: 'ing = form def at_a_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = form def at_a_string()          |     astring = at_a_string()                   
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = at_a_string()
+    astring = form def at_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
416. Input. char of interest: 'ng = forma def t_a_s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = forma def t_a_string()          |     astring = t_a_string()                    
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = t_a_string()
+    astring = forma def t_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
417. Input. char of interest: 'g = format def _a_st':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format def _a_string()          |     astring = _a_string()                     
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = _a_string()
+    astring = format def _a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
418. Input. char of interest: ' = format_ def a_str':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_ def a_string()          |     astring = a_string()                      
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = a_string()
+    astring = format_ def a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
419. Input. char of interest: '= format_a def _stri':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a def _string()          |     astring = format_a()                      
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a()
+    astring = format_a def _string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
420. Input. char of interest: ' format_a_ def strin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_ def string()          |     astring = format_a_()                     
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_()
+    astring = format_a_ def string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
421. Input. char of interest: 'format_a_s def tring':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_s def tring()          |     astring = format_a_s()                    
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_s()
+    astring = format_a_s def tring()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
422. Input. char of interest: 'ormat_a_st def ring(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_st def ring()          |     astring = format_a_st()                   
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_st()
+    astring = format_a_st def ring()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
423. Input. char of interest: 'rmat_a_str def ing()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_str def ing()          |     astring = format_a_str()                  
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_str()
+    astring = format_a_str def ing()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
424. Input. char of interest: 'mat_a_stri def ng()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_stri def ng()          |     astring = format_a_stri()                 
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_stri()
+    astring = format_a_stri def ng()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
425. Input. char of interest: 'at_a_strin def g()
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_strin def g()          |     astring = format_a_strin()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_strin()
+    astring = format_a_strin def g()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
426. Input. char of interest: 't_a_string def ()
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string def ()          |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+    astring = format_a_string def ()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
427. Input. char of interest: '_a_string( def )
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string( def )          |     astring = format_a_string(def)            
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 22)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string(def)
+    astring = format_a_string( def )
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
428. Input. char of interest: 'a_string() def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string() def           |     astring = def                             
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 22)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = def
+    astring = format_a_string() def 
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
433. Input. char of interest: 'ing()
     def retur':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
     def return 0                             |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+     def return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
434. Input. char of interest: 'ng()
    r def eturn':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    r def eturn 0                             |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    r def eturn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
435. Input. char of interest: 'g()
    re def turn ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    re def turn 0                             |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    re def turn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
436. Input. char of interest: '()
    ret def urn 0':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    ret def urn 0                             |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    ret def urn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
437. Input. char of interest: ')
    retu def rn 0
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    retu def rn 0                             |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    retu def rn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
438. Input. char of interest: '
    retur def n 0
i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    retur def n 0                             |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    retur def n 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
440. Input. char of interest: '   return  def 0
if ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return  def 0                             |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return 0
+    return  def 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
441. Input. char of interest: '  return 0 def 
if _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0 def                              |     return def                                
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 23)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return def
+    return 0 def 
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
442. Input. char of interest: ' return 0
 def if __':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
 def if __name__ == '__main__':               | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+ def if __name__ == '__main__':
+    main()


===============================================================================
443. Input. char of interest: 'return 0
i def f __n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
i def f __name__ == '__main__':               | 
    main()                                    | 
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+i def f __name__ == '__main__':
+    main()


===============================================================================
445. Input. char of interest: 'turn 0
if  def __nam':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if  def __name__ == '__main__':               | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if  def __name__ == '__main__':
+    main()


===============================================================================
446. Input. char of interest: 'urn 0
if _ def _name':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if _ def _name__ == '__main__':               | if _name__ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if _name__ == '__main__':
-    main()+if _ def _name__ == '__main__':
+    main()


===============================================================================
447. Input. char of interest: 'rn 0
if __ def name_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __ def name__ == '__main__':               | if name__ == '__main__':                      
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if name__ == '__main__':
-    main()+if __ def name__ == '__main__':
+    main()


===============================================================================
448. Input. char of interest: 'n 0
if __n def ame__':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __n def ame__ == '__main__':               | if ame__ == '__main__':                       
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if ame__ == '__main__':
-    main()+if __n def ame__ == '__main__':
+    main()


===============================================================================
449. Input. char of interest: ' 0
if __na def me__ ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __na def me__ == '__main__':               | if me__ == '__main__':                        
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if me__ == '__main__':
-    main()+if __na def me__ == '__main__':
+    main()


===============================================================================
450. Input. char of interest: '0
if __nam def e__ =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __nam def e__ == '__main__':               | if __nam == '__main__':                       
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __nam == '__main__':
-    main()+if __nam def e__ == '__main__':
+    main()


===============================================================================
451. Input. char of interest: '
if __name def __ ==':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name def __ == '__main__':               | if __name == '__main__':                      
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name == '__main__':
-    main()+if __name def __ == '__main__':
+    main()


===============================================================================
452. Input. char of interest: 'if __name_ def _ == ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name_ def _ == '__main__':               | if __name_ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name_ == '__main__':
-    main()+if __name_ def _ == '__main__':
+    main()


===============================================================================
454. Input. char of interest: ' __name__  def == '_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__  def == '__main__':               | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__  def == '__main__':
+    main()


===============================================================================
455. Input. char of interest: '__name__ = def = '__':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ = def = '__main__':               | if '__main__':                                
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if '__main__':
-    main()+if __name__ = def = '__main__':
+    main()


===============================================================================
457. Input. char of interest: 'name__ ==  def '__ma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ ==  def '__main__':               | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__ ==  def '__main__':
+    main()


===============================================================================
458. Input. char of interest: 'ame__ == ' def __mai':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == ' def __main__':               | if __name__ == ' def __main__':               
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == ' def __main__':
-    main()+    main()


===============================================================================
459. Input. char of interest: 'me__ == '_ def _main':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '_ def _main__':               | if __name__ == '_ def _main__':               
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '_ def _main__':
-    main()+    main()


===============================================================================
460. Input. char of interest: 'e__ == '__ def main_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__ def main__':               | if __name__ == '__ def main__':               
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__ def main__':
-    main()+    main()


===============================================================================
461. Input. char of interest: '__ == '__m def ain__':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__m def ain__':               | if __name__ == '__m def ain__':               
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__m def ain__':
-    main()+    main()


===============================================================================
462. Input. char of interest: '_ == '__ma def in__'':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__ma def in__':               | if __name__ == '__ma def in__':               
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__ma def in__':
-    main()+    main()


===============================================================================
463. Input. char of interest: ' == '__mai def n__':':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__mai def n__':               | if __name__ == '__mai def n__':               
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__mai def n__':
-    main()+    main()


===============================================================================
464. Input. char of interest: '== '__main def __':
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main def __':               | if __name__ == '__main def __':               
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main def __':
-    main()+    main()


===============================================================================
465. Input. char of interest: '= '__main_ def _':
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main_ def _':               | if __name__ == '__main_ def _':               
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main_ def _':
-    main()+    main()


===============================================================================
466. Input. char of interest: ' '__main__ def ':
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__ def ':               | if __name__ == '__main__ def ':               
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__ def ':
-    main()+    main()


===============================================================================
467. Input. char of interest: ''__main__' def :
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__' def :               | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__ == '__main__' def :
+    main()


===============================================================================
468. Input. char of interest: '__main__': def 
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__': def                | if __name__ == '__main__':                    
    main()                                    |     def                                       
                                              | main()                                        

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 25)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,6 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    def
-main()+if __name__ == '__main__': def 
+    main()


===============================================================================
473. Input. char of interest: 'n__':
     def main(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
     def main()                               | 
                                              | 

Output AST is not valid according to CPython: expected an indented block after 'if' statement on line 24 (<unknown>, line 24)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,4 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':+if __name__ == '__main__':
+     def main()


===============================================================================
474. Input. char of interest: '__':
    m def ain()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    m def ain()                               |     ain()                                     
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    ain()+    m def ain()


===============================================================================
475. Input. char of interest: '_':
    ma def in()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    ma def in()                               |     ma in )                                   
                                              | 

Output AST is not valid according to CPython: unmatched ')' (<unknown>, line 25)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    ma in )+    ma def in()


===============================================================================
476. Input. char of interest: '':
    mai def n()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    mai def n()                               |     n()                                       
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    n()+    mai def n()


===============================================================================
477. Input. char of interest: ':
    main def ()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main def ()                               |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main def ()


===============================================================================
478. Input. char of interest: '
    main( def )
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main( def )                               |     main(def)                                 
                                              | 

Output AST is not valid according to CPython: invalid syntax (<unknown>, line 25)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main(def)+    main( def )


===============================================================================
479. Input. char of interest: '    main() def 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main() def                                | 
                                              | 

Output AST is not valid according to CPython: expected an indented block after 'if' statement on line 24 (<unknown>, line 24)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,4 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':+if __name__ == '__main__':
+    main() def 


===============================================================================
