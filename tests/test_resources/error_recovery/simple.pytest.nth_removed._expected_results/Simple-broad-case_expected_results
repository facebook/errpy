@generated

Errpy makes empty AST (weird) with input prior to and including:
0.->d<-

1.->de<-

2.->def<-

22.->def fib(a: int) -> int:<-

52.->
    tmp = (a, a)
    (ba, bb)<-

82.-> = tmp
    inset = a in {0, 1}<-

88.->
    inset = a in {0, 1}
    i<-

89.->    inset = a in {0, 1}
    if<-

209.->urn fib(a - 1) + fib(a - 2)

d<-

210.->rn fib(a - 1) + fib(a - 2)

de<-

211.->n fib(a - 1) + fib(a - 2)

def<-

240.->f somethingelse():
    pass

d<-

241.-> somethingelse():
    pass

de<-

242.->somethingelse():
    pass

def<-

259.->    pass

def format_a_string(<-

325.->.join([x for x in astring])

d<-

326.->join([x for x in astring])

de<-

327.->oin([x for x in astring])

def<-

333.-> for x in astring])

def main(<-

442.->rmat_a_string()
    return 0
i<-

443.->mat_a_string()
    return 0
if<-

478.->me__ == '__main__':
    main()<-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

0. Input. char of interest: 'ef fib(a: ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
ef fib(a: int) -> int:                        |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+ef fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
1. Input. char of interest: 'df fib(a: i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
df fib(a: int) -> int:                        |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+df fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
2. Input. char of interest: 'de fib(a: in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
de fib(a: int) -> int:                        |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+de fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
4. Input. char of interest: 'def ib(a: int)':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def ib(a: int) -> int:                        | def ib(a: int) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
5. Input. char of interest: 'def fb(a: int) ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fb(a: int) -> int:                        | def fb(a: int) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
6. Input. char of interest: 'def fi(a: int) -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fi(a: int) -> int:                        | def fi(a: int) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
7. Input. char of interest: 'def fiba: int) ->':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fiba: int) -> int:                        | def somethingelse():                          
    tmp = (a, a)                              |     pass                                      
    (ba, bb) = tmp                            |                                               
    inset = a in {0, 1}                       | def format_a_string(astring: str) -> str:     
    if a <= 2 or a == 1:                      |     return ','.join([x for x in astring])     
        return 1                              |                                               
    elif inset:                               | def main() -> int:                            
        return 1                              |     """DOC_STRING"""                          
    else:                                     |     somethingelse()                           
        return fib(a - 1) + fib(a - 2)        |     fib(12)                                   
                                              |     astring = format_a_string()               
def somethingelse():                          |     return 0                                  
    pass                                      | if __name__ == '__main__':                    
                                              |     main()                                    
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 10:39]
CST Stack:
    {Node ERROR (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,3 +1,14 @@
+def fiba: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
 def somethingelse():
     pass
 
@@ -11,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
8. Input. char of interest: 'def fib(: int) -> ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(: int) -> int:                        | def fib(int) -> int:                          
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:9 - 1:10]
CST Stack:
    {Node ERROR (0, 8) - (0, 9)}
    {Node parameters (0, 7) - (0, 14)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(int) -> int:
+def fib(: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
9. Input. char of interest: 'def fib(a int) -> i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a int) -> int:                        | def fib(int) -> int:                          
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:9 - 1:10]
CST Stack:
    {Node ERROR (0, 8) - (0, 9)}
    {Node parameters (0, 7) - (0, 14)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(int) -> int:
+def fib(a int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
11. Input. char of interest: 'ef fib(a: nt) -> int':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: nt) -> int:                        | def fib(a: nt) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
12. Input. char of interest: 'f fib(a: it) -> int:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: it) -> int:                        | def fib(a: it) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
13. Input. char of interest: ' fib(a: in) -> int:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: in) -> int:                        | def fib(a: in) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: keyword: "in" cannot be used as identifier at [1:12 - 1:14]
CST Stack:
    {Node identifier (0, 11) - (0, 13)}
    {Node type (0, 11) - (0, 13)}
    {Node typed_parameter (0, 8) - (0, 13)}
    {Node parameters (0, 7) - (0, 14)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
14. Input. char of interest: 'fib(a: int -> int:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int -> int:                        | def fib(a: int - int):                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:17 - 1:18]
CST Stack:
    {Node ERROR (0, 16) - (0, 17)}
    {Node binary_operator (0, 11) - (0, 21)}
    {Node type (0, 11) - (0, 21)}
    {Node typed_parameter (0, 8) - (0, 21)}
    {Node parameters (0, 7) - (0, 21)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int - int):
+def fib(a: int -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
16. Input. char of interest: 'b(a: int) > int:
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) > int:                        | def fib(a: int):                              
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:17 - 1:22]
CST Stack:
    {Node ERROR (0, 16) - (0, 21)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int):
+def fib(a: int) > int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
17. Input. char of interest: '(a: int) - int:
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) - int:                        | def fib(a: int):                              
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:17 - 1:22]
CST Stack:
    {Node ERROR (0, 16) - (0, 21)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int):
+def fib(a: int) - int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
19. Input. char of interest: ': int) -> nt:
    tm':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> nt:                        | def fib(a: int) -> nt:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
20. Input. char of interest: ' int) -> it:
    tmp':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> it:                        | def fib(a: int) -> it:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
21. Input. char of interest: 'int) -> in:
    tmp ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> in:                        | def fib(a: int) -> in:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: keyword: "in" cannot be used as identifier at [1:20 - 1:22]
CST Stack:
    {Node identifier (0, 19) - (0, 21)}
    {Node type (0, 19) - (0, 21)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: expected ':' (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
22. Input. char of interest: 'nt) -> int
    tmp =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int                        |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
23. Input. char of interest: 't) -> int:    tmp = ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:    tmp = (a, a)       | def fib(a: int) -> int:                       
    (ba, bb) = tmp                            |     tmp = (a, a)                              
    inset = a in {0, 1}                       | (ba, bb) = tmp                                
    if a <= 2 or a == 1:                      | inset = a in {0, 1}                           
        return 1                              | if a <= 2 or a == 1:                          
    elif inset:                               |     return 1                                  
        return 1                              | elif inset:                                   
    else:                                     |     return 1                                  
        return fib(a - 1) + fib(a - 2)        | else:                                         
                                              |     return fib(a - 1) + fib(a - 2)            
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,13 +1,12 @@
-def fib(a: int) -> int:
-    tmp = (a, a)
-(ba, bb) = tmp
-inset = a in {0, 1}
-if a <= 2 or a == 1:
-    return 1
-elif inset:
-    return 1
-else:
-    return fib(a - 1) + fib(a - 2)
+def fib(a: int) -> int:    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
28. Input. char of interest: ' int:
    mp = (a, a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    mp = (a, a)                               |     mp = (a, a)                               
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
29. Input. char of interest: 'int:
    tp = (a, a)':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tp = (a, a)                               |     tp = (a, a)                               
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
30. Input. char of interest: 'nt:
    tm = (a, a)
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tm = (a, a)                               |     tm = (a, a)                               
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
32. Input. char of interest: ':
    tmp  (a, a)
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp  (a, a)                               |     tmp(a, a)                                 
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp(a, a)
+    tmp  (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
34. Input. char of interest: '    tmp = a, a)
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = a, a)                               |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:15 - 2:16]
CST Stack:
    {Node ERROR (1, 14) - (1, 15)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
+    tmp = a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
35. Input. char of interest: '   tmp = (, a)
    (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (, a)                               |     (ba, bb) = tmp                            
    (ba, bb) = tmp                            |     inset = a in {0, 1}                       
    inset = a in {0, 1}                       |     if a <= 2 or a == 1:                      
    if a <= 2 or a == 1:                      |         return 1                              
        return 1                              |     elif inset:                               
    elif inset:                               |         return 1                              
        return 1                              |     else:                                     
    else:                                     |         return fib(a - 1) + fib(a - 2)        
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:12 - 2:13]
CST Stack:
    {Node ERROR (1, 11) - (1, 12)}
    {Node parenthesized_expression (1, 10) - (1, 15)}
    {Node assignment (1, 4) - (1, 15)}
    {Node expression_statement (1, 4) - (1, 15)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,5 @@
 def fib(a: int) -> int:
+    tmp = (, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
36. Input. char of interest: '  tmp = (a a)
    (b':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a a)                               |     tmp = a                                   
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:14 - 2:15]
CST Stack:
    {Node ERROR (1, 13) - (1, 14)}
    {Node parenthesized_expression (1, 10) - (1, 15)}
    {Node assignment (1, 4) - (1, 15)}
    {Node expression_statement (1, 4) - (1, 15)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = a
+    tmp = (a a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
38. Input. char of interest: 'tmp = (a, )
    (ba,':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, )                               |     tmp = (a,)                                
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a,)
+    tmp = (a, )
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
39. Input. char of interest: 'mp = (a, a
    (ba, ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a                               |     tmp = tmp                                 
    (ba, bb) = tmp                            |     inset = a in {0, 1}                       
    inset = a in {0, 1}                       |     if a <= 2 or a == 1:                      
    if a <= 2 or a == 1:                      |         return 1                              
        return 1                              |     elif inset:                               
    elif inset:                               |         return 1                              
        return 1                              |     else:                                     
    else:                                     |         return fib(a - 1) + fib(a - 2)        
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:9 - 3:13]
CST Stack:
    {Node ERROR (1, 8) - (2, 12)}
    {Node assignment (1, 4) - (2, 18)}
    {Node expression_statement (1, 4) - (2, 18)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,6 @@
 def fib(a: int) -> int:
-    tmp = tmp
+    tmp = (a, a
+    (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
40. Input. char of interest: 'p = (a, a)    (ba, b':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)    (ba, bb) = tmp            |     tmp = tmp                                 
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:11 - 2:31]
CST Stack:
    {Node ERROR (1, 10) - (1, 30)}
    {Node assignment (1, 4) - (1, 34)}
    {Node expression_statement (1, 4) - (1, 34)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = tmp
+    tmp = (a, a)    (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -21,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
45. Input. char of interest: 'a, a)
    ba, bb) = ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    ba, bb) = tmp                             |     (ba, tmp)                                 
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:9 - 3:14]
CST Stack:
    {Node ERROR (2, 8) - (2, 13)}
    {Node expression_statement (2, 4) - (2, 17)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, tmp)
+    ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
46. Input. char of interest: ', a)
    (a, bb) = t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (a, bb) = tmp                             |     (a, bb) = tmp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
47. Input. char of interest: ' a)
    (b, bb) = tm':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (b, bb) = tmp                             |     (b, bb) = tmp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
48. Input. char of interest: 'a)
    (ba bb) = tmp':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba bb) = tmp                             |     (bb,) = tmp                               
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:6 - 3:8]
CST Stack:
    {Node ERROR (2, 5) - (2, 7)}
    {Node tuple_pattern (2, 4) - (2, 11)}
    {Node assignment (2, 4) - (2, 17)}
    {Node expression_statement (2, 4) - (2, 17)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (bb,) = tmp
+    (ba bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
50. Input. char of interest: '
    (ba, b) = tmp
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, b) = tmp                             |     (ba, b) = tmp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
51. Input. char of interest: '    (ba, b) = tmp
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, b) = tmp                             |     (ba, b) = tmp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
52. Input. char of interest: '   (ba, bb = tmp
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb = tmp                             | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
54. Input. char of interest: ' (ba, bb)  tmp
    i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb)  tmp                             |     (ba, bb)                                  
    inset = a in {0, 1}                       |     tmp                                       
    if a <= 2 or a == 1:                      |     inset = a in {0, 1}                       
        return 1                              |     if a <= 2 or a == 1:                      
    elif inset:                               |         return 1                              
        return 1                              |     elif inset:                               
    else:                                     |         return 1                              
        return fib(a - 1) + fib(a - 2)        |     else:                                     
                                              |         return fib(a - 1) + fib(a - 2)        
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb)
-    tmp
+    (ba, bb)  tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
56. Input. char of interest: 'ba, bb) = mp
    ins':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = mp                             |     (ba, bb) = mp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
57. Input. char of interest: 'a, bb) = tp
    inse':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tp                             |     (ba, bb) = tp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
58. Input. char of interest: ', bb) = tm
    inset':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tm                             |     (ba, bb) = tm                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
59. Input. char of interest: ' bb) = tmp    inset ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp    inset = a in {0, 1}     |     (ba, bb) = inset = a in {0, 1}            
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:16 - 3:19]
CST Stack:
    {Node ERROR (2, 15) - (2, 18)}
    {Node assignment (2, 4) - (2, 41)}
    {Node expression_statement (2, 4) - (2, 41)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = inset = a in {0, 1}
+    (ba, bb) = tmp    inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -21,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
64. Input. char of interest: '= tmp
    nset = a i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    nset = a in {0, 1}                        |     nset = a in {0, 1}                        
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
65. Input. char of interest: ' tmp
    iset = a in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    iset = a in {0, 1}                        |     iset = a in {0, 1}                        
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
66. Input. char of interest: 'tmp
    inet = a in ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inet = a in {0, 1}                        |     inet = a in {0, 1}                        
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
67. Input. char of interest: 'mp
    inst = a in {':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inst = a in {0, 1}                        |     inst = a in {0, 1}                        
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
68. Input. char of interest: 'p
    inse = a in {0':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inse = a in {0, 1}                        |     inse = a in {0, 1}                        
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
70. Input. char of interest: '    inset  a in {0, ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset  a in {0, 1}                        |     inset in {0, 1}                           
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:12 - 4:13]
CST Stack:
    {Node ERROR (3, 11) - (3, 12)}
    {Node comparison_operator (3, 4) - (3, 22)}
    {Node expression_statement (3, 4) - (3, 22)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset in {0, 1}
+    inset  a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
72. Input. char of interest: '  inset =  in {0, 1}':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset =  in {0, 1}                        |     inset = {0, 1}                            
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:14 - 4:16]
CST Stack:
    {Node ERROR (3, 13) - (3, 15)}
    {Node assignment (3, 4) - (3, 22)}
    {Node expression_statement (3, 4) - (3, 22)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = {0, 1}
+    inset =  in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
74. Input. char of interest: 'inset = a n {0, 1}
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a n {0, 1}                        |     inset = {0, 1}                            
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:13 - 4:16]
CST Stack:
    {Node ERROR (3, 12) - (3, 15)}
    {Node assignment (3, 4) - (3, 22)}
    {Node expression_statement (3, 4) - (3, 22)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = {0, 1}
+    inset = a n {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
75. Input. char of interest: 'nset = a i {0, 1}
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a i {0, 1}                        |     inset = {0, 1}                            
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:13 - 4:16]
CST Stack:
    {Node ERROR (3, 12) - (3, 15)}
    {Node assignment (3, 4) - (3, 22)}
    {Node expression_statement (3, 4) - (3, 22)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = {0, 1}
+    inset = a i {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
77. Input. char of interest: 'et = a in 0, 1}
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in 0, 1}                        |     inset = (a in 0, 1)                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:22 - 4:23]
CST Stack:
    {Node ERROR (3, 21) - (3, 22)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = (a in 0, 1)
+    inset = a in 0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
78. Input. char of interest: 't = a in {, 1}
    i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {, 1}                        |     inset = a in {1}                          
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:19 - 4:20]
CST Stack:
    {Node ERROR (3, 18) - (3, 19)}
    {Node set (3, 17) - (3, 22)}
    {Node comparison_operator (3, 12) - (3, 22)}
    {Node assignment (3, 4) - (3, 22)}
    {Node expression_statement (3, 4) - (3, 22)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {1}
+    inset = a in {, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
79. Input. char of interest: ' = a in {0 1}
    if':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0 1}                        |     inset = a in {0}                          
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:21 - 4:22]
CST Stack:
    {Node ERROR (3, 20) - (3, 21)}
    {Node set (3, 17) - (3, 22)}
    {Node comparison_operator (3, 12) - (3, 22)}
    {Node assignment (3, 4) - (3, 22)}
    {Node expression_statement (3, 4) - (3, 22)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0}
+    inset = a in {0 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
81. Input. char of interest: ' a in {0, }
    if a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, }                        |     inset = a in {0}                          
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0}
+    inset = a in {0, }
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
82. Input. char of interest: 'a in {0, 1
    if a ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1                        | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
83. Input. char of interest: ' in {0, 1}    if a <':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}    if a <= 2 or a == 1:     |     inset: 1                                        
        return 1                                    |     inset: 1                                        
    elif inset:                                     |     else: return(a - 1) + fib(a - 2)                
        return 1                                    |                                                     
    else:                                           | def somethingelse():                                
        return fib(a - 1) + fib(a - 2)              |     pass                                            
                                                    |                                                     
def somethingelse():                                | def format_a_string(astring: str) -> str:           
    pass                                            |     return ','.join([x for x in astring])           
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def main() -> int:                                  
    return ','.join([x for x in astring])           |     """DOC_STRING"""                                
                                                    |     somethingelse()                                 
def main() -> int:                                  |     fib(12)                                         
    """DOC_STRING"""                                |     astring = format_a_string()                     
    somethingelse()                                 |     return 0                                        
    fib(12)                                         | if __name__ == '__main__':                          
    astring = format_a_string()                     |     main()                                          
    return 0                                        | 
if __name__ == '__main__':                          | 
    main()                                          | 
                                                    | 

7 Recoverable errors detected:
SyntaxError: invalid syntax at [4:11 - 4:47]
CST Stack:
    {Node ERROR (3, 10) - (3, 46)}
    {Node assignment (3, 4) - (4, 16)}
    {Node expression_statement (3, 4) - (4, 16)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
SyntaxError: invalid syntax at [5:9 - 5:15]
CST Stack:
    {Node ERROR (4, 8) - (4, 14)}
    {Node assignment (3, 4) - (4, 16)}
    {Node expression_statement (3, 4) - (4, 16)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
SyntaxError: invalid syntax at [6:5 - 6:9]
CST Stack:
    {Node ERROR (5, 4) - (5, 8)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
SyntaxError: invalid syntax at [7:9 - 7:15]
CST Stack:
    {Node ERROR (6, 8) - (6, 14)}
    {Node assignment (5, 9) - (6, 16)}
    {Node expression_statement (5, 9) - (6, 16)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
SyntaxError: invalid syntax at [9:16 - 9:19]
CST Stack:
    {Node ERROR (8, 15) - (8, 18)}
    {Node call (8, 8) - (8, 25)}
    {Node binary_operator (8, 8) - (8, 38)}
    {Node type (8, 8) - (8, 38)}
    {Node assignment (7, 4) - (8, 38)}
    {Node expression_statement (7, 4) - (8, 38)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [8:5 - 8:9]
CST Stack:
    {Node identifier (7, 4) - (7, 8)}
    {Node assignment (7, 4) - (8, 38)}
    {Node expression_statement (7, 4) - (8, 38)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [9:9 - 9:15]
CST Stack:
    {Node identifier (8, 8) - (8, 14)}
    {Node call (8, 8) - (8, 25)}
    {Node binary_operator (8, 8) - (8, 38)}
    {Node type (8, 8) - (8, 38)}
    {Node assignment (7, 4) - (8, 38)}
    {Node expression_statement (7, 4) - (8, 38)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 6)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,9 +1,12 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset: 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    inset = a in {0, 1}    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -18,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
88. Input. char of interest: '0, 1}
    f a <= 2 o':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    f a <= 2 or a == 1:                       | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    f a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
89. Input. char of interest: ', 1}
    i a <= 2 or':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    i a <= 2 or a == 1:                       | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    i a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
91. Input. char of interest: '1}
    if  <= 2 or a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if  <= 2 or a == 1:                       |     if 2 or a == 1:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:9 - 5:11]
CST Stack:
    {Node ERROR (4, 8) - (4, 10)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if 2 or a == 1:
+    if  <= 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
93. Input. char of interest: '
    if a = 2 or a =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a = 2 or a == 1:                       |     if 2 or a == 1:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:8 - 5:11]
CST Stack:
    {Node ERROR (4, 7) - (4, 10)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if 2 or a == 1:
+    if a = 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
94. Input. char of interest: '    if a < 2 or a ==':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a < 2 or a == 1:                       |     if a < 2 or a == 1:                       
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
96. Input. char of interest: '  if a <=  or a == 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <=  or a == 1:                       |     if a <= or == 1:                          
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [5:17 - 5:18]
CST Stack:
    {Node ERROR (4, 16) - (4, 17)}
    {Node comparison_operator (4, 7) - (4, 22)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "or" cannot be used as identifier at [5:14 - 5:16]
CST Stack:
    {Node identifier (4, 13) - (4, 15)}
    {Node comparison_operator (4, 7) - (4, 22)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 5)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= or == 1:
+    if a <=  or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
98. Input. char of interest: 'if a <= 2 r a == 1:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 r a == 1:                       |     if a <= 2 == 1:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:15 - 5:18]
CST Stack:
    {Node ERROR (4, 14) - (4, 17)}
    {Node comparison_operator (4, 7) - (4, 22)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 == 1:
+    if a <= 2 r a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
99. Input. char of interest: 'f a <= 2 o a == 1:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 o a == 1:                       |     if a <= 2 == 1:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:15 - 5:18]
CST Stack:
    {Node ERROR (4, 14) - (4, 17)}
    {Node comparison_operator (4, 7) - (4, 22)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 == 1:
+    if a <= 2 o a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
101. Input. char of interest: 'a <= 2 or  == 1:
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or  == 1:                       |     if a <= 2 or 1:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:19 - 5:21]
CST Stack:
    {Node ERROR (4, 18) - (4, 20)}
    {Node boolean_operator (4, 7) - (4, 22)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or 1:
+    if a <= 2 or  == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
103. Input. char of interest: '<= 2 or a = 1:
     ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a = 1:                       |     if a <= 2 or a:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:20 - 5:23]
CST Stack:
    {Node ERROR (4, 19) - (4, 22)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a:
+    if a <= 2 or a = 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
104. Input. char of interest: '= 2 or a = 1:
      ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a = 1:                       |     if a <= 2 or a:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:20 - 5:23]
CST Stack:
    {Node ERROR (4, 19) - (4, 22)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a:
+    if a <= 2 or a = 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
106. Input. char of interest: '2 or a == :
        ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == :                       |     if a <= 2 or a:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:20 - 5:22]
CST Stack:
    {Node ERROR (4, 19) - (4, 21)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a:
+    if a <= 2 or a == :
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
107. Input. char of interest: ' or a == 1
        r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1                       |     if a <= 2 or a == inset:                  
        return 1                              |         return 1                              
    elif inset:                               |     else:                                     
        return 1                              |         return fib(a - 1) + fib(a - 2)        
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:23 - 7:9]
CST Stack:
    {Node ERROR (4, 22) - (6, 8)}
    {Node comparison_operator (4, 17) - (6, 14)}
    {Node boolean_operator (4, 7) - (6, 14)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,9 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == inset:
+    if a <= 2 or a == 1
+        return 1
+    elif inset:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
108. Input. char of interest: 'or a == 1:        re':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:        return 1      |     if a <= 2 or a == 1:                      
    elif inset:                               |         return 1                              
        return 1                              |     elif inset:                               
    else:                                     |         return 1                              
        return fib(a - 1) + fib(a - 2)        |     else:                                     
                                              |         return fib(a - 1) + fib(a - 2)        
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,8 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
-        return 1
+    if a <= 2 or a == 1:        return 1
     elif inset:
         return 1
     else:
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
117. Input. char of interest: ':
        eturn 1
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        eturn 1                               |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:14]
CST Stack:
    {Node ERROR (5, 8) - (5, 13)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        eturn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
118. Input. char of interest: '
        rturn 1
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        rturn 1                               |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:14]
CST Stack:
    {Node ERROR (5, 8) - (5, 13)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        rturn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
119. Input. char of interest: '        reurn 1
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        reurn 1                               |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:14]
CST Stack:
    {Node ERROR (5, 8) - (5, 13)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        reurn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
120. Input. char of interest: '       retrn 1
    e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        retrn 1                               |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:14]
CST Stack:
    {Node ERROR (5, 8) - (5, 13)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        retrn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
121. Input. char of interest: '      retun 1
    el':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        retun 1                               |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:14]
CST Stack:
    {Node ERROR (5, 8) - (5, 13)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        retun 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
122. Input. char of interest: '     retur 1
    eli':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        retur 1                               |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:14]
CST Stack:
    {Node ERROR (5, 8) - (5, 13)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        retur 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
124. Input. char of interest: '   return 
    elif ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return                                |         return                                
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return
+        return 
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
125. Input. char of interest: '  return 1    elif i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1    elif inset:               |         return                                
        return 1                              |     else:                                     
    else:                                     |         return fib(a - 1) + fib(a - 2)        
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:16 - 7:15]
CST Stack:
    {Node ERROR (5, 15) - (6, 14)}
    {Node return_statement (5, 8) - (6, 16)}
    {Node block (5, 8) - (6, 16)}
    {Node if_statement (4, 4) - (8, 38)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,8 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return
+        return 1    elif inset:
+        return 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -20,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
130. Input. char of interest: 'urn 1
    lif inset:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    lif inset:                                |     inset: 1                                  
        return 1                              |     else: return(a - 1) + fib(a - 2)          
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: invalid syntax at [7:5 - 7:8]
CST Stack:
    {Node ERROR (6, 4) - (6, 7)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 8) - (7, 16)}
    {Node expression_statement (6, 8) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    lif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
131. Input. char of interest: 'rn 1
    eif inset:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    eif inset:                                |     inset: 1                                  
        return 1                              |     else: return(a - 1) + fib(a - 2)          
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: invalid syntax at [7:5 - 7:8]
CST Stack:
    {Node ERROR (6, 4) - (6, 7)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 8) - (7, 16)}
    {Node expression_statement (6, 8) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    eif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
132. Input. char of interest: 'n 1
    elf inset:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elf inset:                                |     inset: 1                                  
        return 1                              |     else: return(a - 1) + fib(a - 2)          
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: invalid syntax at [7:5 - 7:8]
CST Stack:
    {Node ERROR (6, 4) - (6, 7)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 8) - (7, 16)}
    {Node expression_statement (6, 8) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    elf inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
133. Input. char of interest: ' 1
    eli inset:
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    eli inset:                                |     inset: 1                                  
        return 1                              |     else: return(a - 1) + fib(a - 2)          
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: invalid syntax at [7:5 - 7:8]
CST Stack:
    {Node ERROR (6, 4) - (6, 7)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 8) - (7, 16)}
    {Node expression_statement (6, 8) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    eli inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
135. Input. char of interest: '
    elif nset:
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif nset:                                |     elif nset:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
136. Input. char of interest: '    elif iset:
     ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif iset:                                |     elif iset:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
137. Input. char of interest: '   elif inet:
      ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inet:                                |     elif inet:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
138. Input. char of interest: '  elif inst:
       ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inst:                                |     elif inst:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
139. Input. char of interest: ' elif inse:
        ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inse:                                |     elif inse:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
140. Input. char of interest: 'elif inset
        r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset                                |     elif inset:                               
        return 1                              |         return fib(a - 1) + fib(a - 2)        
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 9:9]
CST Stack:
    {Node ERROR (7, 8) - (8, 8)}
    {Node elif_clause (6, 4) - (9, 38)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,9 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
+    elif inset
+        return 1
+    else:
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
141. Input. char of interest: 'lif inset:        re':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:        return 1               |     elif inset:                               
    else:                                     |         return 1                              
        return fib(a - 1) + fib(a - 2)        |     else:                                     
                                              |         return fib(a - 1) + fib(a - 2)        
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
-        return 1
+    elif inset:        return 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
150. Input. char of interest: ':
        eturn 1
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        eturn 1                               |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:14]
CST Stack:
    {Node ERROR (7, 8) - (7, 13)}
    {Node elif_clause (6, 4) - (7, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        eturn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
151. Input. char of interest: '
        rturn 1
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        rturn 1                               |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:14]
CST Stack:
    {Node ERROR (7, 8) - (7, 13)}
    {Node elif_clause (6, 4) - (7, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        rturn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
152. Input. char of interest: '        reurn 1
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        reurn 1                               |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:14]
CST Stack:
    {Node ERROR (7, 8) - (7, 13)}
    {Node elif_clause (6, 4) - (7, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        reurn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
153. Input. char of interest: '       retrn 1
    e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        retrn 1                               |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:14]
CST Stack:
    {Node ERROR (7, 8) - (7, 13)}
    {Node elif_clause (6, 4) - (7, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        retrn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
154. Input. char of interest: '      retun 1
    el':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        retun 1                               |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:14]
CST Stack:
    {Node ERROR (7, 8) - (7, 13)}
    {Node elif_clause (6, 4) - (7, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        retun 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
155. Input. char of interest: '     retur 1
    els':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        retur 1                               |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:14]
CST Stack:
    {Node ERROR (7, 8) - (7, 13)}
    {Node elif_clause (6, 4) - (7, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        retur 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
157. Input. char of interest: '   return 
    else:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return                                |         return                                
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return
+        return 
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
158. Input. char of interest: '  return 1    else:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1    else:                     |         return 1                              
        return fib(a - 1) + fib(a - 2)        |         else: return(a - 1) + fib(a - 2)      
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

3 Recoverable errors detected:
SyntaxError: invalid syntax at [9:16 - 9:19]
CST Stack:
    {Node ERROR (8, 15) - (8, 18)}
    {Node call (8, 8) - (8, 25)}
    {Node binary_operator (8, 8) - (8, 38)}
    {Node type (8, 8) - (8, 38)}
    {Node assignment (7, 20) - (8, 38)}
    {Node expression_statement (7, 20) - (8, 38)}
    {Node block (7, 8) - (8, 38)}
    {Node elif_clause (6, 4) - (8, 38)}
    {Node if_statement (4, 4) - (8, 38)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [8:21 - 8:25]
CST Stack:
    {Node identifier (7, 20) - (7, 24)}
    {Node assignment (7, 20) - (8, 38)}
    {Node expression_statement (7, 20) - (8, 38)}
    {Node block (7, 8) - (8, 38)}
    {Node elif_clause (6, 4) - (8, 38)}
    {Node if_statement (4, 4) - (8, 38)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [9:9 - 9:15]
CST Stack:
    {Node identifier (8, 8) - (8, 14)}
    {Node call (8, 8) - (8, 25)}
    {Node binary_operator (8, 8) - (8, 38)}
    {Node type (8, 8) - (8, 38)}
    {Node assignment (7, 20) - (8, 38)}
    {Node expression_statement (7, 20) - (8, 38)}
    {Node block (7, 8) - (8, 38)}
    {Node elif_clause (6, 4) - (8, 38)}
    {Node if_statement (4, 4) - (8, 38)}
    {Node block (1, 4) - (8, 38)}
    {Node function_definition (0, 0) - (8, 38)}
    {Node module (0, 0) - (24, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,8 +5,8 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return 1
-        else: return(a - 1) + fib(a - 2)
+        return 1    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
163. Input. char of interest: 'urn 1
    lse:
     ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    lse:                                      |     lse: return(a - 1) + fib(a - 2)           
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    lse: return(a - 1) + fib(a - 2)
+    lse:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
164. Input. char of interest: 'rn 1
    ese:
      ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    ese:                                      |     ese: return(a - 1) + fib(a - 2)           
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    ese: return(a - 1) + fib(a - 2)
+    ese:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
165. Input. char of interest: 'n 1
    ele:
       ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    ele:                                      |     ele: return(a - 1) + fib(a - 2)           
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    ele: return(a - 1) + fib(a - 2)
+    ele:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
166. Input. char of interest: ' 1
    els:
        ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    els:                                      |     els: return(a - 1) + fib(a - 2)           
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    els: return(a - 1) + fib(a - 2)
+    els:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
167. Input. char of interest: '1
    else
        r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else                                      |     return fib(a - 1) + fib(a - 2)            
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [9:5 - 9:9]
CST Stack:
    {Node ERROR (8, 4) - (8, 8)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    return fib(a - 1) + fib(a - 2)
+    else
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
168. Input. char of interest: '
    else:        re':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:        return fib(a - 1) + fib(a - 2)     |     else:                                           
                                                    |         return fib(a - 1) + fib(a - 2)              
def somethingelse():                                |                                                     
    pass                                            | def somethingelse():                                
                                                    |     pass                                            
def format_a_string(astring: str) -> str:           |                                                     
    return ','.join([x for x in astring])           | def format_a_string(astring: str) -> str:           
                                                    |     return ','.join([x for x in astring])           
def main() -> int:                                  |                                                     
    """DOC_STRING"""                                | def main() -> int:                                  
    somethingelse()                                 |     """DOC_STRING"""                                
    fib(12)                                         |     somethingelse()                                 
    astring = format_a_string()                     |     fib(12)                                         
    return 0                                        |     astring = format_a_string()                     
if __name__ == '__main__':                          |     return 0                                        
    main()                                          | if __name__ == '__main__':                          
                                                    |     main()                                          


ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,8 +6,7 @@
         return 1
     elif inset:
         return 1
-    else:
-        return fib(a - 1) + fib(a - 2)
+    else:        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
177. Input. char of interest: ':
        eturn fib(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        eturn fib(a - 1) + fib(a - 2)         |         eturn(a - 1) + fib(a - 2)             
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:15 - 10:18]
CST Stack:
    {Node ERROR (9, 14) - (9, 17)}
    {Node call (9, 8) - (9, 24)}
    {Node binary_operator (9, 8) - (9, 37)}
    {Node expression_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        eturn(a - 1) + fib(a - 2)
+        eturn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
178. Input. char of interest: '
        rturn fib(a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        rturn fib(a - 1) + fib(a - 2)         |         rturn(a - 1) + fib(a - 2)             
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:15 - 10:18]
CST Stack:
    {Node ERROR (9, 14) - (9, 17)}
    {Node call (9, 8) - (9, 24)}
    {Node binary_operator (9, 8) - (9, 37)}
    {Node expression_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        rturn(a - 1) + fib(a - 2)
+        rturn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
179. Input. char of interest: '        reurn fib(a ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        reurn fib(a - 1) + fib(a - 2)         |         reurn(a - 1) + fib(a - 2)             
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:15 - 10:18]
CST Stack:
    {Node ERROR (9, 14) - (9, 17)}
    {Node call (9, 8) - (9, 24)}
    {Node binary_operator (9, 8) - (9, 37)}
    {Node expression_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        reurn(a - 1) + fib(a - 2)
+        reurn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
180. Input. char of interest: '       retrn fib(a -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        retrn fib(a - 1) + fib(a - 2)         |         retrn(a - 1) + fib(a - 2)             
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:15 - 10:18]
CST Stack:
    {Node ERROR (9, 14) - (9, 17)}
    {Node call (9, 8) - (9, 24)}
    {Node binary_operator (9, 8) - (9, 37)}
    {Node expression_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        retrn(a - 1) + fib(a - 2)
+        retrn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
181. Input. char of interest: '      retun fib(a - ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        retun fib(a - 1) + fib(a - 2)         |         retun(a - 1) + fib(a - 2)             
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:15 - 10:18]
CST Stack:
    {Node ERROR (9, 14) - (9, 17)}
    {Node call (9, 8) - (9, 24)}
    {Node binary_operator (9, 8) - (9, 37)}
    {Node expression_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        retun(a - 1) + fib(a - 2)
+        retun fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
182. Input. char of interest: '     retur fib(a - 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        retur fib(a - 1) + fib(a - 2)         |         retur(a - 1) + fib(a - 2)             
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:15 - 10:18]
CST Stack:
    {Node ERROR (9, 14) - (9, 17)}
    {Node call (9, 8) - (9, 24)}
    {Node binary_operator (9, 8) - (9, 37)}
    {Node expression_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        retur(a - 1) + fib(a - 2)
+        retur fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
184. Input. char of interest: '   return ib(a - 1) ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return ib(a - 1) + fib(a - 2)         |         return ib(a - 1) + fib(a - 2)         
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
185. Input. char of interest: '  return fb(a - 1) +':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fb(a - 1) + fib(a - 2)         |         return fb(a - 1) + fib(a - 2)         
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
186. Input. char of interest: ' return fi(a - 1) + ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fi(a - 1) + fib(a - 2)         |         return fi(a - 1) + fib(a - 2)         
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
187. Input. char of interest: 'return fiba - 1) + f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fiba - 1) + fib(a - 2)         |         return fiba - 1 + fib(a - 2)          
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:24 - 10:25]
CST Stack:
    {Node ERROR (9, 23) - (9, 24)}
    {Node binary_operator (9, 15) - (9, 37)}
    {Node return_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fiba - 1 + fib(a - 2)
+        return fiba - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
188. Input. char of interest: 'eturn fib( - 1) + fi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib( - 1) + fib(a - 2)         |         return fib(-1) + fib(a - 2)           
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(-1) + fib(a - 2)
+        return fib( - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
190. Input. char of interest: 'urn fib(a  1) + fib(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a  1) + fib(a - 2)         |         return fib(a) + fib(a - 2)            
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:23 - 10:24]
CST Stack:
    {Node ERROR (9, 22) - (9, 23)}
    {Node argument_list (9, 18) - (9, 24)}
    {Node call (9, 15) - (9, 24)}
    {Node binary_operator (9, 15) - (9, 37)}
    {Node return_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a) + fib(a - 2)
+        return fib(a  1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
192. Input. char of interest: 'n fib(a - ) + fib(a ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - ) + fib(a - 2)         |         return fib(a) + fib(a - 2)            
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:22 - 10:23]
CST Stack:
    {Node ERROR (9, 21) - (9, 22)}
    {Node argument_list (9, 18) - (9, 24)}
    {Node call (9, 15) - (9, 24)}
    {Node binary_operator (9, 15) - (9, 37)}
    {Node return_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a) + fib(a - 2)
+        return fib(a - ) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
193. Input. char of interest: ' fib(a - 1 + fib(a -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     pass                                      
        return fib(a - 1 + fib(a - 2)         |                                               
                                              | def format_a_string(astring: str) -> str:     
def somethingelse():                          |     return ','.join([x for x in astring])     
    pass                                      |                                               
                                              | def main() -> int:                            
def format_a_string(astring: str) -> str:     |     """DOC_STRING"""                          
    return ','.join([x for x in astring])     |     somethingelse()                           
                                              |     fib(12)                                   
def main() -> int:                            |     astring = format_a_string()               
    """DOC_STRING"""                          |     return 0                                  
    somethingelse()                           | if __name__ == '__main__':                    
    fib(12)                                   |     main()                                    
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:9 - 12:21]
CST Stack:
    {Node ERROR (9, 8) - (11, 20)}
    {Node else_clause (8, 4) - (11, 20)}
    {Node if_statement (4, 4) - (11, 20)}
    {Node block (1, 4) - (12, 8)}
    {Node function_definition (0, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,6 +6,10 @@
         return 1
     elif inset:
         return 1
+    else:
+        return fib(a - 1 + fib(a - 2)
+
+def somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -18,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
195. Input. char of interest: 'ib(a - 1)  fib(a - 2':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1)  fib(a - 2)         |         return fib(a - 1)(a - 2)              
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:28 - 10:31]
CST Stack:
    {Node ERROR (9, 27) - (9, 30)}
    {Node call (9, 15) - (9, 37)}
    {Node return_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1)(a - 2)
+        return fib(a - 1)  fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
197. Input. char of interest: '(a - 1) + ib(a - 2)
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + ib(a - 2)         |         return fib(a - 1) + ib(a - 2)         
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
198. Input. char of interest: 'a - 1) + fb(a - 2)

':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fb(a - 2)         |         return fib(a - 1) + fb(a - 2)         
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
199. Input. char of interest: ' - 1) + fi(a - 2)

d':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fi(a - 2)         |         return fib(a - 1) + fi(a - 2)         
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
200. Input. char of interest: '- 1) + fiba - 2)

de':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |                                               
        return fib(a - 1) + fiba - 2)         | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:9 - 10:38]
CST Stack:
    {Node ERROR (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,6 +6,8 @@
         return 1
     elif inset:
         return 1
+    else:
+        return fib(a - 1) + fiba - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
201. Input. char of interest: ' 1) + fib( - 2)

def':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib( - 2)         |         return fib(a - 1) + fib(-2)           
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(-2)
+        return fib(a - 1) + fib( - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
203. Input. char of interest: ') + fib(a  2)

def s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a  2)         |         return fib(a - 1) + fib(a)            
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:36 - 10:37]
CST Stack:
    {Node ERROR (9, 35) - (9, 36)}
    {Node argument_list (9, 31) - (9, 37)}
    {Node call (9, 28) - (9, 37)}
    {Node binary_operator (9, 15) - (9, 37)}
    {Node return_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a)
+        return fib(a - 1) + fib(a  2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
205. Input. char of interest: '+ fib(a - )

def som':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - )         |         return fib(a - 1) + fib(a)            
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:35 - 10:36]
CST Stack:
    {Node ERROR (9, 34) - (9, 35)}
    {Node argument_list (9, 31) - (9, 37)}
    {Node call (9, 28) - (9, 37)}
    {Node binary_operator (9, 15) - (9, 37)}
    {Node return_statement (9, 8) - (9, 37)}
    {Node block (9, 8) - (9, 37)}
    {Node else_clause (8, 4) - (9, 37)}
    {Node if_statement (4, 4) - (9, 37)}
    {Node block (1, 4) - (9, 37)}
    {Node function_definition (0, 0) - (9, 37)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a)
+        return fib(a - 1) + fib(a - )
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
206. Input. char of interest: ' fib(a - 2

def some':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     pass                                      
        return fib(a - 1) + fib(a - 2         |                                               
                                              | def format_a_string(astring: str) -> str:     
def somethingelse():                          |     return ','.join([x for x in astring])     
    pass                                      |                                               
                                              | def main() -> int:                            
def format_a_string(astring: str) -> str:     |     """DOC_STRING"""                          
    return ','.join([x for x in astring])     |     somethingelse()                           
                                              |     fib(12)                                   
def main() -> int:                            |     astring = format_a_string()               
    """DOC_STRING"""                          |     return 0                                  
    somethingelse()                           | if __name__ == '__main__':                    
    fib(12)                                   |     main()                                    
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:9 - 12:21]
CST Stack:
    {Node ERROR (9, 8) - (11, 20)}
    {Node else_clause (8, 4) - (11, 20)}
    {Node if_statement (4, 4) - (11, 20)}
    {Node block (1, 4) - (12, 8)}
    {Node function_definition (0, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,6 +6,10 @@
         return 1
     elif inset:
         return 1
+    else:
+        return fib(a - 1) + fib(a - 2
+
+def somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -18,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
207. Input. char of interest: 'fib(a - 2)
def somet':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -8,7 +8,6 @@
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
-
 def somethingelse():
     pass
 
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
208. Input. char of interest: 'ib(a - 2)
def someth':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -8,7 +8,6 @@
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
-
 def somethingelse():
     pass
 
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
209. Input. char of interest: 'b(a - 2)

ef somethi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
ef somethingelse():                           | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+ef somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
210. Input. char of interest: '(a - 2)

df somethin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
df somethingelse():                           | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+df somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
211. Input. char of interest: 'a - 2)

de something':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
de somethingelse():                           | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+de somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
213. Input. char of interest: '- 2)

def omethingel':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def omethingelse():                           | def omethingelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
214. Input. char of interest: ' 2)

def smethingels':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def smethingelse():                           | def smethingelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
215. Input. char of interest: '2)

def soethingelse':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def soethingelse():                           | def soethingelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
216. Input. char of interest: ')

def somthingelse(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somthingelse():                           | def somthingelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
217. Input. char of interest: '

def somehingelse()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somehingelse():                           | def somehingelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
218. Input. char of interest: '
def sometingelse():':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def sometingelse():                           | def sometingelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
219. Input. char of interest: 'def somethngelse():
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethngelse():                           | def somethngelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
220. Input. char of interest: 'ef somethigelse():
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethigelse():                           | def somethigelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
221. Input. char of interest: 'f somethinelse():
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethinelse():                           | def somethinelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
222. Input. char of interest: ' somethinglse():
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethinglse():                           | def somethinglse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
223. Input. char of interest: 'somethingese():
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingese():                           | def somethingese():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
224. Input. char of interest: 'omethingele():
    p':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingele():                           | def somethingele():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
225. Input. char of interest: 'methingels():
    pa':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingels():                           | def somethingels():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
226. Input. char of interest: 'ethingelse):
    pas':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse):                           | def format_a_string(astring: str) -> str:     
    pass                                      |     return ','.join([x for x in astring])     
                                              |                                               
def format_a_string(astring: str) -> str:     | def main() -> int:                            
    return ','.join([x for x in astring])     |     """DOC_STRING"""                          
                                              |     somethingelse()                           
def main() -> int:                            |     fib(12)                                   
    """DOC_STRING"""                          |     astring = format_a_string()               
    somethingelse()                           |     return 0                                  
    fib(12)                                   | if __name__ == '__main__':                    
    astring = format_a_string()               |     main()                                    
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:1 - 13:9]
CST Stack:
    {Node ERROR (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,6 +9,9 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
+def somethingelse):
+    pass
+
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
@@ -19,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
227. Input. char of interest: 'thingelse(:
    pass':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse(:                           | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def somethingelse(:
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
228. Input. char of interest: 'hingelse()
    pass
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse()                           | def format_a_string(astring: str) -> str:     
    pass                                      |     return ','.join([x for x in astring])     
                                              |                                               
def format_a_string(astring: str) -> str:     | def main() -> int:                            
    return ','.join([x for x in astring])     |     """DOC_STRING"""                          
                                              |     somethingelse()                           
def main() -> int:                            |     fib(12)                                   
    """DOC_STRING"""                          |     astring = format_a_string()               
    somethingelse()                           |     return 0                                  
    fib(12)                                   | if __name__ == '__main__':                    
    astring = format_a_string()               |     main()                                    
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:1 - 13:9]
CST Stack:
    {Node ERROR (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,6 +9,9 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
+def somethingelse()
+    pass
+
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
@@ -19,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
229. Input. char of interest: 'ingelse():    pass

':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():    pass                  | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,8 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
-    pass
+def somethingelse():    pass
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
234. Input. char of interest: 'se():
    ass

def f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    ass                                       |     ass                                       
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
235. Input. char of interest: 'e():
    pss

def fo':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pss                                       |     pss                                       
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
236. Input. char of interest: '():
    pas

def for':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pas                                       |     pas                                       
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
237. Input. char of interest: '):
    pas

def form':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pas                                       |     pas                                       
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
238. Input. char of interest: ':
    pass
def forma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -11,7 +11,6 @@
 
 def somethingelse():
     pass
-
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
239. Input. char of interest: '
    pass
def format':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -11,7 +11,6 @@
 
 def somethingelse():
     pass
-
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
240. Input. char of interest: '    pass

ef format_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
ef format_a_string(astring: str) -> str:      | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+ef format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
241. Input. char of interest: '   pass

df format_a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
df format_a_string(astring: str) -> str:      | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+df format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
242. Input. char of interest: '  pass

de format_a_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
de format_a_string(astring: str) -> str:      | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+de format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
244. Input. char of interest: 'pass

def ormat_a_st':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def ormat_a_string(astring: str) -> str:      | def ormat_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
245. Input. char of interest: 'ass

def frmat_a_str':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def frmat_a_string(astring: str) -> str:      | def frmat_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
246. Input. char of interest: 'ss

def fomat_a_stri':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def fomat_a_string(astring: str) -> str:      | def fomat_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
247. Input. char of interest: 's

def forat_a_strin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def forat_a_string(astring: str) -> str:      | def forat_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
248. Input. char of interest: '

def formt_a_string':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def formt_a_string(astring: str) -> str:      | def formt_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
249. Input. char of interest: '
def forma_a_string(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def forma_a_string(astring: str) -> str:      | def forma_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
250. Input. char of interest: 'def formata_string(a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def formata_string(astring: str) -> str:      | def formata_string(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
251. Input. char of interest: 'ef format__string(as':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format__string(astring: str) -> str:      | def format__string(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
252. Input. char of interest: 'f format_astring(ast':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_astring(astring: str) -> str:      | def format_astring(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
253. Input. char of interest: ' format_a_tring(astr':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_tring(astring: str) -> str:      | def format_a_tring(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
254. Input. char of interest: 'format_a_sring(astri':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_sring(astring: str) -> str:      | def format_a_sring(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
255. Input. char of interest: 'ormat_a_sting(astrin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_sting(astring: str) -> str:      | def format_a_sting(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
256. Input. char of interest: 'rmat_a_strng(astring':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_strng(astring: str) -> str:      | def format_a_strng(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
257. Input. char of interest: 'mat_a_strig(astring:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_strig(astring: str) -> str:      | def format_a_strig(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
258. Input. char of interest: 'at_a_strin(astring: ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_strin(astring: str) -> str:      | def format_a_strin(astring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
259. Input. char of interest: 't_a_stringastring: s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_stringastring: str) -> str:      | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_stringastring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
260. Input. char of interest: '_a_string(string: st':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(string: str) -> str:      | def format_a_string(string: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
261. Input. char of interest: 'a_string(atring: str':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(atring: str) -> str:      | def format_a_string(atring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
262. Input. char of interest: '_string(asring: str)':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(asring: str) -> str:      | def format_a_string(asring: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
263. Input. char of interest: 'string(asting: str) ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(asting: str) -> str:      | def format_a_string(asting: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
264. Input. char of interest: 'tring(astrng: str) -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astrng: str) -> str:      | def format_a_string(astrng: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
265. Input. char of interest: 'ring(astrig: str) ->':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astrig: str) -> str:      | def format_a_string(astrig: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
266. Input. char of interest: 'ing(astrin: str) -> ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astrin: str) -> str:      | def format_a_string(astrin: str) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
267. Input. char of interest: 'ng(astring str) -> s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring str) -> str:      | def format_a_string(astring) -> str:          
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:29 - 15:32]
CST Stack:
    {Node ERROR (14, 28) - (14, 31)}
    {Node parameters (14, 19) - (14, 32)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring) -> str:
+def format_a_string(astring str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
269. Input. char of interest: '(astring: tr) -> str':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: tr) -> str:      | def format_a_string(astring: tr) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
270. Input. char of interest: 'astring: sr) -> str:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: sr) -> str:      | def format_a_string(astring: sr) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
271. Input. char of interest: 'string: st) -> str:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: st) -> str:      | def format_a_string(astring: st) -> str:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
272. Input. char of interest: 'tring: str -> str:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str -> str:      | def format_a_string(astring: str - str):      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:35 - 15:36]
CST Stack:
    {Node ERROR (14, 34) - (14, 35)}
    {Node binary_operator (14, 29) - (14, 39)}
    {Node type (14, 29) - (14, 39)}
    {Node typed_parameter (14, 20) - (14, 39)}
    {Node parameters (14, 19) - (14, 39)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str - str):
+def format_a_string(astring: str -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
274. Input. char of interest: 'ing: str) > str:
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) > str:      | def format_a_string(astring: str):            
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:35 - 15:40]
CST Stack:
    {Node ERROR (14, 34) - (14, 39)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str):
+def format_a_string(astring: str) > str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
275. Input. char of interest: 'ng: str) - str:
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) - str:      | def format_a_string(astring: str):            
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:35 - 15:40]
CST Stack:
    {Node ERROR (14, 34) - (14, 39)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str):
+def format_a_string(astring: str) - str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
277. Input. char of interest: ': str) -> tr:
    re':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> tr:      | def format_a_string(astring: str) -> tr:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
278. Input. char of interest: ' str) -> sr:
    ret':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> sr:      | def format_a_string(astring: str) -> sr:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
279. Input. char of interest: 'str) -> st:
    retu':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> st:      | def format_a_string(astring: str) -> st:      
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
280. Input. char of interest: 'tr) -> str
    retur':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str      | def format_a_string(astring: str) -> main() - 
    return ','.join([x for x in astring])     |     """DOC_STRING"""                          
                                              |     somethingelse()                           
def main() -> int:                            |     fib(12)                                   
    """DOC_STRING"""                          |     astring = format_a_string()               
    somethingelse()                           |     return 0                                  
    fib(12)                                   | if __name__ == '__main__':                    
    astring = format_a_string()               |     main()                                    
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [15:38 - 18:4]
CST Stack:
    {Node ERROR (14, 37) - (17, 3)}
    {Node function_definition (14, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [18:13 - 18:14]
CST Stack:
    {Node ERROR (17, 12) - (17, 13)}
    {Node binary_operator (17, 4) - (17, 17)}
    {Node type (17, 4) - (17, 17)}
    {Node function_definition (14, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,11 +12,14 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> main() - int:
+def format_a_string(astring: str) -> str
+    return ','.join([x for x in astring])
+
+def main() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
281. Input. char of interest: 'r) -> str:    return':

Input:                                                                                 | ERRPY Recovered AST:                                                                   
---------------------------------------------------------------------------------------| ---------------------------------------------------------------------------------------
def fib(a: int) -> int:                                                                | def fib(a: int) -> int:                                                                
    tmp = (a, a)                                                                       |     tmp = (a, a)                                                                       
    (ba, bb) = tmp                                                                     |     (ba, bb) = tmp                                                                     
    inset = a in {0, 1}                                                                |     inset = a in {0, 1}                                                                
    if a <= 2 or a == 1:                                                               |     if a <= 2 or a == 1:                                                               
        return 1                                                                       |         return 1                                                                       
    elif inset:                                                                        |     elif inset:                                                                        
        return 1                                                                       |         return 1                                                                       
    else:                                                                              |     else:                                                                              
        return fib(a - 1) + fib(a - 2)                                                 |         return fib(a - 1) + fib(a - 2)                                                 
                                                                                       |                                                                                        
def somethingelse():                                                                   | def somethingelse():                                                                   
    pass                                                                               |     pass                                                                               
                                                                                       |                                                                                        
def format_a_string(astring: str) -> str:    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:                                              
                                                                                       |     return ','.join([x for x in astring])                                              
def main() -> int:                                                                     |                                                                                        
    """DOC_STRING"""                                                                   | def main() -> int:                                                                     
    somethingelse()                                                                    |     """DOC_STRING"""                                                                   
    fib(12)                                                                            |     somethingelse()                                                                    
    astring = format_a_string()                                                        |     fib(12)                                                                            
    return 0                                                                           |     astring = format_a_string()                                                        
if __name__ == '__main__':                                                             |     return 0                                                                           
    main()                                                                             | if __name__ == '__main__':                                                             
                                                                                       |     main()                                                                             


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,8 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+def format_a_string(astring: str) -> str:    return ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
286. Input. char of interest: ' str:
    eturn ','.':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    eturn ','.join([x for x in astring])      |     ','.join([x for x in astring])            
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:10]
CST Stack:
    {Node ERROR (15, 4) - (15, 9)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    eturn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
287. Input. char of interest: 'str:
    rturn ','.j':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    rturn ','.join([x for x in astring])      |     ','.join([x for x in astring])            
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:10]
CST Stack:
    {Node ERROR (15, 4) - (15, 9)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    rturn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
288. Input. char of interest: 'tr:
    reurn ','.jo':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    reurn ','.join([x for x in astring])      |     ','.join([x for x in astring])            
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:10]
CST Stack:
    {Node ERROR (15, 4) - (15, 9)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    reurn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
289. Input. char of interest: 'r:
    retrn ','.joi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    retrn ','.join([x for x in astring])      |     ','.join([x for x in astring])            
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:10]
CST Stack:
    {Node ERROR (15, 4) - (15, 9)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    retrn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
290. Input. char of interest: ':
    retun ','.join':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    retun ','.join([x for x in astring])      |     ','.join([x for x in astring])            
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:10]
CST Stack:
    {Node ERROR (15, 4) - (15, 9)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    retun ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
291. Input. char of interest: '
    retur ','.join(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    retur ','.join([x for x in astring])      |     ','.join([x for x in astring])            
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:10]
CST Stack:
    {Node ERROR (15, 4) - (15, 9)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    retur ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
293. Input. char of interest: '   return ,'.join([x':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ,'.join([x for x in astring])      |     return (, '.join([x for x in astring]))   
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: empty string cannot be used as identifier at [16:11 - 16:11]
CST Stack:
    {Node identifier (15, 10) - (15, 10)}
    {Node return (15, 4) - (15, 10)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: unterminated string literal (detected at line 16) (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return (, '.join([x for x in astring]))
+    return ,'.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
294. Input. char of interest: '  return ''.join([x ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ''.join([x for x in astring])      |     return ''.join([x for x in astring])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
295. Input. char of interest: ' return ',.join([x f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ',.join([x for x in astring])      |     return                                    
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:12 - 16:15]
CST Stack:
    {Node ERROR (15, 11) - (15, 14)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return
+    return ',.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
296. Input. char of interest: 'return ','join([x fo':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','join([x for x in astring])      |     return                                    
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:12 - 16:15]
CST Stack:
    {Node ERROR (15, 11) - (15, 14)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return
+    return ','join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
297. Input. char of interest: 'eturn ','.oin([x for':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.oin([x for x in astring])      |     return ','.oin([x for x in astring])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
298. Input. char of interest: 'turn ','.jin([x for ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.jin([x for x in astring])      |     return ','.jin([x for x in astring])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
299. Input. char of interest: 'urn ','.jon([x for x':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.jon([x for x in astring])      |     return ','.jon([x for x in astring])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
300. Input. char of interest: 'rn ','.joi([x for x ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.joi([x for x in astring])      |     return ','.joi([x for x in astring])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
301. Input. char of interest: 'n ','.join[x for x i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join[x for x in astring])      |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:41]
CST Stack:
    {Node ERROR (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: expected an indented block after function definition on line 15 (<unknown>, line 17)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,6 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
+    return ','.join[x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
302. Input. char of interest: ' ','.join(x for x in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join(x for x in astring])      |     return ','.join((x for x in astring))     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:39 - 16:40]
CST Stack:
    {Node ERROR (15, 38) - (15, 39)}
    {Node generator_expression (15, 19) - (15, 40)}
    {Node call (15, 11) - (15, 40)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join((x for x in astring))
+    return ','.join(x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
303. Input. char of interest: '','.join([ for x in ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([ for x in astring])      |     return ','.join([for in astring])         
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [16:27 - 16:28]
CST Stack:
    {Node ERROR (15, 26) - (15, 27)}
    {Node comparison_operator (15, 22) - (15, 38)}
    {Node list (15, 20) - (15, 39)}
    {Node argument_list (15, 19) - (15, 40)}
    {Node call (15, 11) - (15, 40)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "for" cannot be used as identifier at [16:23 - 16:26]
CST Stack:
    {Node identifier (15, 22) - (15, 25)}
    {Node comparison_operator (15, 22) - (15, 38)}
    {Node list (15, 20) - (15, 39)}
    {Node argument_list (15, 19) - (15, 40)}
    {Node call (15, 11) - (15, 40)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 16)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([for in astring])
+    return ','.join([ for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
305. Input. char of interest: ''.join([x or x in as':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x or x in astring])      |     return ','.join([x or x in astring])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
306. Input. char of interest: '.join([x fr x in ast':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x fr x in astring])      |     return ','.join([x in astring])           
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:22 - 16:26]
CST Stack:
    {Node ERROR (15, 21) - (15, 25)}
    {Node list (15, 20) - (15, 39)}
    {Node argument_list (15, 19) - (15, 40)}
    {Node call (15, 11) - (15, 40)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x in astring])
+    return ','.join([x fr x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
307. Input. char of interest: 'join([x fo x in astr':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x fo x in astring])      |     return ','.join([x in astring])           
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:22 - 16:26]
CST Stack:
    {Node ERROR (15, 21) - (15, 25)}
    {Node list (15, 20) - (15, 39)}
    {Node argument_list (15, 19) - (15, 40)}
    {Node call (15, 11) - (15, 40)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x in astring])
+    return ','.join([x fo x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
309. Input. char of interest: 'in([x for  in astrin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for  in astring])      |     return ','.join([x])                      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:24 - 16:39]
CST Stack:
    {Node ERROR (15, 23) - (15, 38)}
    {Node list (15, 20) - (15, 39)}
    {Node argument_list (15, 19) - (15, 40)}
    {Node call (15, 11) - (15, 40)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x])
+    return ','.join([x for  in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
311. Input. char of interest: '([x for x n astring]':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x n astring])      |     return ','.join([x])                      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:24 - 16:39]
CST Stack:
    {Node ERROR (15, 23) - (15, 38)}
    {Node list (15, 20) - (15, 39)}
    {Node argument_list (15, 19) - (15, 40)}
    {Node call (15, 11) - (15, 40)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x])
+    return ','.join([x for x n astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
312. Input. char of interest: '[x for x i astring])':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x i astring])      |     return ','.join([x])                      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:24 - 16:39]
CST Stack:
    {Node ERROR (15, 23) - (15, 38)}
    {Node list (15, 20) - (15, 39)}
    {Node argument_list (15, 19) - (15, 40)}
    {Node call (15, 11) - (15, 40)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x])
+    return ','.join([x for x i astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
314. Input. char of interest: ' for x in string])

':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in string])      |     return ','.join([x for x in string])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
315. Input. char of interest: 'for x in atring])

d':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in atring])      |     return ','.join([x for x in atring])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
316. Input. char of interest: 'or x in asring])

de':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in asring])      |     return ','.join([x for x in asring])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
317. Input. char of interest: 'r x in asting])

def':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in asting])      |     return ','.join([x for x in asting])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
318. Input. char of interest: ' x in astrng])

def ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astrng])      |     return ','.join([x for x in astrng])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
319. Input. char of interest: 'x in astrig])

def m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astrig])      |     return ','.join([x for x in astrig])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
320. Input. char of interest: ' in astrin])

def ma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astrin])      |     return ','.join([x for x in astrin])      
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
321. Input. char of interest: 'in astring)

def mai':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring)      |     return ','.join()                         
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:21 - 16:40]
CST Stack:
    {Node ERROR (15, 20) - (15, 39)}
    {Node argument_list (15, 19) - (15, 40)}
    {Node call (15, 11) - (15, 40)}
    {Node return_statement (15, 4) - (15, 40)}
    {Node block (15, 4) - (15, 40)}
    {Node function_definition (14, 0) - (15, 40)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join()
+    return ','.join([x for x in astring)
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
322. Input. char of interest: 'n astring]

def main':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring]      | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 25:11]
CST Stack:
    {Node ERROR (15, 4) - (24, 10)}
    {Node function_definition (14, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: expected an indented block after function definition on line 15 (<unknown>, line 15)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,4 +12,14 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring]
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
323. Input. char of interest: ' astring])
def main(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -14,7 +14,6 @@
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
-
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
324. Input. char of interest: 'astring])
def main()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -14,7 +14,6 @@
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
-
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
@@ -22,4 +21,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
325. Input. char of interest: 'string])

ef main() ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
ef main() -> int:                             | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+ef main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
326. Input. char of interest: 'tring])

df main() -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
df main() -> int:                             | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+df main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
327. Input. char of interest: 'ring])

de main() ->':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
de main() -> int:                             | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+de main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
329. Input. char of interest: 'ng])

def ain() -> i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def ain() -> int:                             | def ain() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
330. Input. char of interest: 'g])

def min() -> in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def min() -> int:                             | def min() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
331. Input. char of interest: '])

def man() -> int':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def man() -> int:                             | def man() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
332. Input. char of interest: ')

def mai() -> int:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def mai() -> int:                             | def mai() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
333. Input. char of interest: '

def main) -> int:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main) -> int:                             | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main) -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
334. Input. char of interest: '
def main( -> int:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main( -> int:                             | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main( -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
336. Input. char of interest: 'ef main() > int:
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() > int:                             | def main():                                   
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:12 - 18:17]
CST Stack:
    {Node ERROR (17, 11) - (17, 16)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main():
+def main() > int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
337. Input. char of interest: 'f main() - int:
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() - int:                             | def main():                                   
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:12 - 18:17]
CST Stack:
    {Node ERROR (17, 11) - (17, 16)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main():
+def main() - int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
339. Input. char of interest: 'main() -> nt:
    ""':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> nt:                             | def main() -> nt:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
340. Input. char of interest: 'ain() -> it:
    """':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> it:                             | def main() -> it:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
341. Input. char of interest: 'in() -> in:
    """D':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> in:                             | def main() -> in:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: keyword: "in" cannot be used as identifier at [18:15 - 18:17]
CST Stack:
    {Node identifier (17, 14) - (17, 16)}
    {Node type (17, 14) - (17, 16)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: expected ':' (<unknown>, line 18)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
342. Input. char of interest: 'n() -> int
    """DO':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int                             | def main() -> __name__ == '__main__':         
    """DOC_STRING"""                          |     main()                                    
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:15 - 24:3]
CST Stack:
    {Node ERROR (17, 14) - (23, 2)}
    {Node function_definition (17, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,5 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> __name__ == '__main__':
-    main()+def main() -> int
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
343. Input. char of interest: '() -> int:    """DOC':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:    """DOC_STRING"""        | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   | somethingelse()                               
    astring = format_a_string()               | fib(12)                                       
    return 0                                  | astring = format_a_string()                   
if __name__ == '__main__':                    | return 0                                      
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,10 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
-    """DOC_STRING"""
-somethingelse()
-fib(12)
-astring = format_a_string()
-return 0
+def main() -> int:    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
348. Input. char of interest: ' int:
    ""DOC_STRI':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    ""DOC_STRING"""                           |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:5 - 19:20]
CST Stack:
    {Node ERROR (18, 4) - (18, 19)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    ""DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
349. Input. char of interest: 'int:
    ""DOC_STRIN':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    ""DOC_STRING"""                           |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:5 - 19:20]
CST Stack:
    {Node ERROR (18, 4) - (18, 19)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    ""DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
350. Input. char of interest: 'nt:
    ""DOC_STRING':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    ""DOC_STRING"""                           |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:5 - 19:20]
CST Stack:
    {Node ERROR (18, 4) - (18, 19)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    ""DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
351. Input. char of interest: 't:
    """OC_STRING"':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """OC_STRING"""                           |     """OC_STRING"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
352. Input. char of interest: ':
    """DC_STRING""':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DC_STRING"""                           |     """DC_STRING"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
353. Input. char of interest: '
    """DO_STRING"""':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DO_STRING"""                           |     """DO_STRING"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
354. Input. char of interest: '    """DOCSTRING"""
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOCSTRING"""                           |     """DOCSTRING"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
355. Input. char of interest: '   """DOC_TRING"""
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_TRING"""                           |     """DOC_TRING"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
356. Input. char of interest: '  """DOC_SRING"""
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_SRING"""                           |     """DOC_SRING"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
357. Input. char of interest: ' """DOC_STING"""
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STING"""                           |     """DOC_STING"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
358. Input. char of interest: '"""DOC_STRNG"""
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRNG"""                           |     """DOC_STRNG"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
359. Input. char of interest: '""DOC_STRIG"""
    s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRIG"""                           |     """DOC_STRIG"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
360. Input. char of interest: '"DOC_STRIN"""
    so':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRIN"""                           |     """DOC_STRIN"""                           
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
361. Input. char of interest: 'DOC_STRING""
    som':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING""                           |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:5 - 19:20]
CST Stack:
    {Node ERROR (18, 4) - (18, 19)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
362. Input. char of interest: 'OC_STRING""
    some':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING""                           |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:5 - 19:20]
CST Stack:
    {Node ERROR (18, 4) - (18, 19)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
363. Input. char of interest: 'C_STRING""
    somet':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING""                           |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:5 - 19:20]
CST Stack:
    {Node ERROR (18, 4) - (18, 19)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
364. Input. char of interest: '_STRING"""    someth':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""    somethingelse()       |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,9 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """DOC_STRING"""
-    somethingelse()
+    """DOC_STRING"""    somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
369. Input. char of interest: 'NG"""
    omethingel':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    omethingelse()                            |     omethingelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
370. Input. char of interest: 'G"""
    smethingels':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    smethingelse()                            |     smethingelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
371. Input. char of interest: '"""
    soethingelse':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    soethingelse()                            |     soethingelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
372. Input. char of interest: '""
    somthingelse(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somthingelse()                            |     somthingelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
373. Input. char of interest: '"
    somehingelse()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somehingelse()                            |     somehingelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
374. Input. char of interest: '
    sometingelse()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    sometingelse()                            |     sometingelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
375. Input. char of interest: '    somethngelse()
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethngelse()                            |     somethngelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
376. Input. char of interest: '   somethigelse()
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethigelse()                            |     somethigelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
377. Input. char of interest: '  somethinelse()
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethinelse()                            |     somethinelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
378. Input. char of interest: ' somethinglse()
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethinglse()                            |     somethinglse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
379. Input. char of interest: 'somethingese()
    f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingese()                            |     somethingese()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
380. Input. char of interest: 'omethingele()
    fi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingele()                            |     somethingele()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
381. Input. char of interest: 'methingels()
    fib':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingels()                            |     somethingels()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
382. Input. char of interest: 'ethingelse)
    fib(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse)                            |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:5 - 20:19]
CST Stack:
    {Node ERROR (19, 4) - (19, 18)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,8 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
+    somethingelse)
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
383. Input. char of interest: 'thingelse(
    fib(1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     main()                                    
    somethingelse(                            | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:19 - 24:27]
CST Stack:
    {Node ERROR (17, 18) - (23, 26)}
    {Node function_definition (17, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,4 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    main()+    """DOC_STRING"""
+    somethingelse(
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
384. Input. char of interest: 'hingelse()    fib(12':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()    fib(12)                |     somethingelse()(12)                       
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:24 - 20:27]
CST Stack:
    {Node ERROR (19, 23) - (19, 26)}
    {Node call (19, 4) - (19, 30)}
    {Node expression_statement (19, 4) - (19, 30)}
    {Node block (18, 4) - (21, 12)}
    {Node function_definition (17, 0) - (21, 12)}
    {Node module (0, 0) - (24, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,8 +17,8 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse()(12)
+    somethingelse()    fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
389. Input. char of interest: 'lse()
    ib(12)
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    ib(12)                                    |     ib(12)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
390. Input. char of interest: 'se()
    fb(12)
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fb(12)                                    |     fb(12)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
391. Input. char of interest: 'e()
    fi(12)
    a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fi(12)                                    |     fi(12)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
392. Input. char of interest: '()
    fib12)
    as':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib12)                                    |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [21:5 - 21:11]
CST Stack:
    {Node ERROR (20, 4) - (20, 10)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,7 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
+    fib12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
393. Input. char of interest: ')
    fib(2)
    ast':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(2)                                    |     fib(2)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
394. Input. char of interest: '
    fib(1)
    astr':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(1)                                    |     fib(1)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
395. Input. char of interest: '    fib(12
    astri':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     main()                                    
    somethingelse()                           | 
    fib(12                                    | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:19 - 24:27]
CST Stack:
    {Node ERROR (17, 18) - (23, 26)}
    {Node function_definition (17, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,4 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    main()+    """DOC_STRING"""
+    somethingelse()
+    fib(12
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
396. Input. char of interest: '   fib(12)    astrin':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)    astring = format_a_string()     |     fib(12)                                    
    return 0                                   |     astring = format_a_string()                
if __name__ == '__main__':                     |     return 0                                   
    main()                                     | if __name__ == '__main__':                     
                                               |     main()                                     


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,7 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(12)
-    astring = format_a_string()
+    fib(12)    astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
401. Input. char of interest: 'b(12)
    string = f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    string = format_a_string()                |     string = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     string = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
402. Input. char of interest: '(12)
    atring = fo':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    atring = format_a_string()                |     atring = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     atring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
403. Input. char of interest: '12)
    asring = for':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    asring = format_a_string()                |     asring = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     asring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
404. Input. char of interest: '2)
    asting = form':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    asting = format_a_string()                |     asting = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     asting = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
405. Input. char of interest: ')
    astrng = forma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astrng = format_a_string()                |     astrng = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astrng = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
406. Input. char of interest: '
    astrig = format':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astrig = format_a_string()                |     astrig = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astrig = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
407. Input. char of interest: '    astrin = format_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astrin = format_a_string()                |     astrin = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astrin = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
409. Input. char of interest: '  astring  format_a_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring  format_a_string()                |     format_a_string()                         
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:5 - 22:12]
CST Stack:
    {Node ERROR (21, 4) - (21, 11)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    format_a_string()
+    astring  format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
411. Input. char of interest: 'astring = ormat_a_st':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = ormat_a_string()                |     astring = ormat_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = ormat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
412. Input. char of interest: 'string = frmat_a_str':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = frmat_a_string()                |     astring = frmat_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = frmat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
413. Input. char of interest: 'tring = fomat_a_stri':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = fomat_a_string()                |     astring = fomat_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = fomat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
414. Input. char of interest: 'ring = forat_a_strin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = forat_a_string()                |     astring = forat_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = forat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
415. Input. char of interest: 'ing = formt_a_string':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = formt_a_string()                |     astring = formt_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = formt_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
416. Input. char of interest: 'ng = forma_a_string(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = forma_a_string()                |     astring = forma_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = forma_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
417. Input. char of interest: 'g = formata_string()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = formata_string()                |     astring = formata_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = formata_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
418. Input. char of interest: ' = format__string()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format__string()                |     astring = format__string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format__string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
419. Input. char of interest: '= format_astring()
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_astring()                |     astring = format_astring()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_astring()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
420. Input. char of interest: ' format_a_tring()
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_tring()                |     astring = format_a_tring()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_tring()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
421. Input. char of interest: 'format_a_sring()
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_sring()                |     astring = format_a_sring()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_sring()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
422. Input. char of interest: 'ormat_a_sting()
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_sting()                |     astring = format_a_sting()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_sting()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
423. Input. char of interest: 'rmat_a_strng()
    r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_strng()                |     astring = format_a_strng()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_strng()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
424. Input. char of interest: 'mat_a_strig()
    re':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_strig()                |     astring = format_a_strig()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_strig()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
425. Input. char of interest: 'at_a_strin()
    ret':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_strin()                |     astring = format_a_strin()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_strin()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
426. Input. char of interest: 't_a_string)
    retu':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string)                |     astring = 0                               
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:15 - 23:11]
CST Stack:
    {Node ERROR (21, 14) - (22, 10)}
    {Node assignment (21, 4) - (22, 12)}
    {Node expression_statement (21, 4) - (22, 12)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,6 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = 0
+    astring = format_a_string)
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
427. Input. char of interest: '_a_string(
    retur':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string(                | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:5 - 25:11]
CST Stack:
    {Node ERROR (21, 4) - (24, 10)}
    {Node block (18, 4) - (24, 10)}
    {Node function_definition (17, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,4 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(12)+    fib(12)
+    astring = format_a_string(
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
428. Input. char of interest: 'a_string()    return':

Input:                                          | ERRPY Recovered AST:                            
------------------------------------------------| ------------------------------------------------
def fib(a: int) -> int:                         | def fib(a: int) -> int:                         
    tmp = (a, a)                                |     tmp = (a, a)                                
    (ba, bb) = tmp                              |     (ba, bb) = tmp                              
    inset = a in {0, 1}                         |     inset = a in {0, 1}                         
    if a <= 2 or a == 1:                        |     if a <= 2 or a == 1:                        
        return 1                                |         return 1                                
    elif inset:                                 |     elif inset:                                 
        return 1                                |         return 1                                
    else:                                       |     else:                                       
        return fib(a - 1) + fib(a - 2)          |         return fib(a - 1) + fib(a - 2)          
                                                |                                                 
def somethingelse():                            | def somethingelse():                            
    pass                                        |     pass                                        
                                                |                                                 
def format_a_string(astring: str) -> str:       | def format_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])       |     return ','.join([x for x in astring])       
                                                |                                                 
def main() -> int:                              | def main() -> int:                              
    """DOC_STRING"""                            |     """DOC_STRING"""                            
    somethingelse()                             |     somethingelse()                             
    fib(12)                                     |     fib(12)                                     
    astring = format_a_string()    return 0     |     astring = format_a_string()                 
if __name__ == '__main__':                      |     return 0                                    
    main()                                      | if __name__ == '__main__':                      
                                                |     main()                                      


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,6 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
-    return 0
+    astring = format_a_string()    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
433. Input. char of interest: 'ing()
    eturn 0
if':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    eturn 0                                   |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:10]
CST Stack:
    {Node ERROR (22, 4) - (22, 9)}
    {Node block (18, 4) - (22, 11)}
    {Node function_definition (17, 0) - (22, 11)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    eturn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
434. Input. char of interest: 'ng()
    rturn 0
if ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    rturn 0                                   |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:10]
CST Stack:
    {Node ERROR (22, 4) - (22, 9)}
    {Node block (18, 4) - (22, 11)}
    {Node function_definition (17, 0) - (22, 11)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    rturn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
435. Input. char of interest: 'g()
    reurn 0
if _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    reurn 0                                   |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:10]
CST Stack:
    {Node ERROR (22, 4) - (22, 9)}
    {Node block (18, 4) - (22, 11)}
    {Node function_definition (17, 0) - (22, 11)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    reurn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
436. Input. char of interest: '()
    retrn 0
if __':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    retrn 0                                   |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:10]
CST Stack:
    {Node ERROR (22, 4) - (22, 9)}
    {Node block (18, 4) - (22, 11)}
    {Node function_definition (17, 0) - (22, 11)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    retrn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
437. Input. char of interest: ')
    retun 0
if __n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    retun 0                                   |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:10]
CST Stack:
    {Node ERROR (22, 4) - (22, 9)}
    {Node block (18, 4) - (22, 11)}
    {Node function_definition (17, 0) - (22, 11)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    retun 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
438. Input. char of interest: '
    retur 0
if __na':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    retur 0                                   |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:10]
CST Stack:
    {Node ERROR (22, 4) - (22, 9)}
    {Node block (18, 4) - (22, 11)}
    {Node function_definition (17, 0) - (22, 11)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    retur 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
440. Input. char of interest: '   return 
if __name':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return                                    |     return                                    
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return
+    return 
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
441. Input. char of interest: '  return 0if __name_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0if __name__ == '__main__':        | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 24:11]
CST Stack:
    {Node ERROR (22, 4) - (23, 10)}
    {Node block (18, 4) - (23, 10)}
    {Node function_definition (17, 0) - (23, 10)}
    {Node module (0, 0) - (24, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,4 +19,6 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()+    astring = format_a_string()
+    return 0if __name__ == '__main__':
+    main()


===============================================================================
442. Input. char of interest: ' return 0
f __name__':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
f __name__ == '__main__':                     | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+f __name__ == '__main__':
+    main()


===============================================================================
443. Input. char of interest: 'return 0
i __name__ ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
i __name__ == '__main__':                     | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+i __name__ == '__main__':
+    main()


===============================================================================
445. Input. char of interest: 'turn 0
if _name__ ==':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if _name__ == '__main__':                     | if _name__ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if _name__ == '__main__':
-    main()+    main()


===============================================================================
446. Input. char of interest: 'urn 0
if _name__ == ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if _name__ == '__main__':                     | if _name__ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if _name__ == '__main__':
-    main()+    main()


===============================================================================
447. Input. char of interest: 'rn 0
if __ame__ == '':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __ame__ == '__main__':                     | if __ame__ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __ame__ == '__main__':
-    main()+    main()


===============================================================================
448. Input. char of interest: 'n 0
if __nme__ == '_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __nme__ == '__main__':                     | if __nme__ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __nme__ == '__main__':
-    main()+    main()


===============================================================================
449. Input. char of interest: ' 0
if __nae__ == '__':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __nae__ == '__main__':                     | if __nae__ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __nae__ == '__main__':
-    main()+    main()


===============================================================================
450. Input. char of interest: '0
if __nam__ == '__m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __nam__ == '__main__':                     | if __nam__ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __nam__ == '__main__':
-    main()+    main()


===============================================================================
451. Input. char of interest: '
if __name_ == '__ma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name_ == '__main__':                     | if __name_ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name_ == '__main__':
-    main()+    main()


===============================================================================
452. Input. char of interest: 'if __name_ == '__mai':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name_ == '__main__':                     | if __name_ == '__main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name_ == '__main__':
-    main()+    main()


===============================================================================
454. Input. char of interest: ' __name__ = '__main_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ = '__main__':                     | if '__main__':                                
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:4 - 24:14]
CST Stack:
    {Node ERROR (23, 3) - (23, 13)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if '__main__':
-    main()+if __name__ = '__main__':
+    main()


===============================================================================
455. Input. char of interest: '__name__ = '__main__':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ = '__main__':                     | if '__main__':                                
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:4 - 24:14]
CST Stack:
    {Node ERROR (23, 3) - (23, 13)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if '__main__':
-    main()+if __name__ = '__main__':
+    main()


===============================================================================
457. Input. char of interest: 'name__ == __main__':':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == __main__':                     | if __name__ == ':                             
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:16 - 24:24]
CST Stack:
    {Node ERROR (23, 15) - (23, 23)}
    {Node comparison_operator (23, 3) - (23, 24)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: unterminated string literal (detected at line 24) (<unknown>, line 24)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == ':
-    main()+if __name__ == __main__':
+    main()


===============================================================================
458. Input. char of interest: 'ame__ == '_main__':
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '_main__':                     | if __name__ == '_main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '_main__':
-    main()+    main()


===============================================================================
459. Input. char of interest: 'me__ == '_main__':
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '_main__':                     | if __name__ == '_main__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '_main__':
-    main()+    main()


===============================================================================
460. Input. char of interest: 'e__ == '__ain__':
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__ain__':                     | if __name__ == '__ain__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__ain__':
-    main()+    main()


===============================================================================
461. Input. char of interest: '__ == '__min__':
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__min__':                     | if __name__ == '__min__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__min__':
-    main()+    main()


===============================================================================
462. Input. char of interest: '_ == '__man__':
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__man__':                     | if __name__ == '__man__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__man__':
-    main()+    main()


===============================================================================
463. Input. char of interest: ' == '__mai__':
    m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__mai__':                     | if __name__ == '__mai__':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__mai__':
-    main()+    main()


===============================================================================
464. Input. char of interest: '== '__main_':
    ma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main_':                     | if __name__ == '__main_':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main_':
-    main()+    main()


===============================================================================
465. Input. char of interest: '= '__main_':
    mai':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main_':                     | if __name__ == '__main_':                     
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main_':
-    main()+    main()


===============================================================================
466. Input. char of interest: ' '__main__:
    main':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__:                     | if __name__ == __main__:                      
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:16 - 24:17]
CST Stack:
    {Node ERROR (23, 15) - (23, 16)}
    {Node comparison_operator (23, 3) - (23, 24)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == __main__:
-    main()+if __name__ == '__main__:
+    main()


===============================================================================
467. Input. char of interest: ''__main__'
    main(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__'                     | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:1 - 25:11]
CST Stack:
    {Node ERROR (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,4 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return 0+    return 0
+if __name__ == '__main__'
+    main()


===============================================================================
468. Input. char of interest: '__main__':    main()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':    main()          | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,4 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__ == '__main__':    main()


===============================================================================
473. Input. char of interest: 'n__':
    ain()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    ain()                                     |     ain()                                     
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    ain()+    ain()


===============================================================================
474. Input. char of interest: '__':
    min()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    min()                                     |     min()                                     
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    min()+    min()


===============================================================================
475. Input. char of interest: '_':
    man()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    man()                                     |     man()                                     
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    man()+    man()


===============================================================================
476. Input. char of interest: '':
    mai()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    mai()                                     |     mai()                                     
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    mai()+    mai()


===============================================================================
477. Input. char of interest: ':
    main)
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main)                                     | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [25:5 - 25:10]
CST Stack:
    {Node ERROR (24, 4) - (24, 9)}
    {Node if_statement (23, 0) - (24, 9)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: expected an indented block after 'if' statement on line 24 (<unknown>, line 24)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,4 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':+if __name__ == '__main__':
+    main)


===============================================================================
478. Input. char of interest: '
    main(
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main(                                     | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 26:1]
CST Stack:
    {Node ERROR (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main(


===============================================================================
479. Input. char of interest: '    main()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    


ERRPY Recovered AST diff:
No difference - AST matches, fully recovered!

===============================================================================
