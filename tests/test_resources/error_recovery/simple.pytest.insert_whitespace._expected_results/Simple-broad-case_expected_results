@generated

Errpy makes empty AST (weird) with input prior to and including:
1.->de<-

2.->def<-

89.->    inset = a in {0, 1}
    if<-

132.->== 1:
        return 1
    eli<-

210.->rn fib(a - 1) + fib(a - 2)

de<-

211.->n fib(a - 1) + fib(a - 2)

def<-

241.-> somethingelse():
    pass

de<-

242.->somethingelse():
    pass

def<-

326.->join([x for x in astring])

de<-

327.->oin([x for x in astring])

def<-

443.->mat_a_string()
    return 0
if<-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

0. Input. char of interest: ' def fib(a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
 def fib(a: int) -> int:                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+ def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
1. Input. char of interest: 'd ef fib(a:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
d ef fib(a: int) -> int:                      |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+d ef fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
2. Input. char of interest: 'de f fib(a: ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
de f fib(a: int) -> int:                      |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+de f fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
4. Input. char of interest: 'def  fib(a: in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def  fib(a: int) -> int:                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def  fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
5. Input. char of interest: 'def f ib(a: int':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def f ib(a: int) -> int:                      | def ib(a: int) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:5 - 1:6]
CST Stack:
    {Node ERROR (0, 4) - (0, 5)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def ib(a: int) -> int:
+def f ib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
6. Input. char of interest: 'def fi b(a: int)':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fi b(a: int) -> int:                      | def fi(a: int) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:8 - 1:9]
CST Stack:
    {Node ERROR (0, 7) - (0, 8)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fi(a: int) -> int:
+def fi b(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
7. Input. char of interest: 'def fib (a: int) ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib (a: int) -> int:                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib (a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
8. Input. char of interest: 'def fib( a: int) -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib( a: int) -> int:                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib( a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
9. Input. char of interest: 'def fib(a : int) ->':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a : int) -> int:                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a : int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
11. Input. char of interest: 'ef fib(a:  int) -> i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a:  int) -> int:                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a:  int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
12. Input. char of interest: 'f fib(a: i nt) -> in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: i nt) -> int:                      | def fib(a: nt) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:12 - 1:13]
CST Stack:
    {Node ERROR (0, 11) - (0, 12)}
    {Node typed_parameter (0, 8) - (0, 15)}
    {Node parameters (0, 7) - (0, 16)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: nt) -> int:
+def fib(a: i nt) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
13. Input. char of interest: ' fib(a: in t) -> int':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: in t) -> int:                      | def fib(a: in) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

2 Recoverable errors detected:
SyntaxError: "invalid syntax" at [1:15 - 1:16]
CST Stack:
    {Node ERROR (0, 14) - (0, 15)}
    {Node parameters (0, 7) - (0, 16)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"in\" cannot be used as identifier" at [1:12 - 1:14]
CST Stack:
    {Node identifier (0, 11) - (0, 13)}
    {Node type (0, 11) - (0, 13)}
    {Node typed_parameter (0, 8) - (0, 13)}
    {Node parameters (0, 7) - (0, 16)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: in) -> int:
+def fib(a: in t) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
14. Input. char of interest: 'fib(a: int ) -> int:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int ) -> int:                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a: int ) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
16. Input. char of interest: 'b(a: int)  -> int:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int)  -> int:                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a: int)  -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
17. Input. char of interest: '(a: int) - > int:
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) - > int:                      | def fib(a: int):                              
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:17 - 1:24]
CST Stack:
    {Node ERROR (0, 16) - (0, 23)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int):
+def fib(a: int) - > int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
19. Input. char of interest: ': int) ->  int:
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) ->  int:                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a: int) ->  int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
20. Input. char of interest: ' int) -> i nt:
    t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> i nt:                      | def fib(a: int) -> nt:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:20 - 1:21]
CST Stack:
    {Node ERROR (0, 19) - (0, 20)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> nt:
+def fib(a: int) -> i nt:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
21. Input. char of interest: 'int) -> in t:
    tm':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> in t:                      | def fib(a: int) -> in:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

2 Recoverable errors detected:
SyntaxError: "invalid syntax" at [1:23 - 1:24]
CST Stack:
    {Node ERROR (0, 22) - (0, 23)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"in\" cannot be used as identifier" at [1:20 - 1:22]
CST Stack:
    {Node identifier (0, 19) - (0, 21)}
    {Node type (0, 19) - (0, 21)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: expected ':' (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> in:
+def fib(a: int) -> in t:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
22. Input. char of interest: 'nt) -> int :
    tmp':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int :                      | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a: int) -> int :
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
23. Input. char of interest: 't) -> int: 
    tmp ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a: int) -> int: 
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
28. Input. char of interest: ' int:
     tmp = (a,':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
     tmp = (a, a)                             |     tmp = (a, a)                              
    (ba, bb) = tmp                            | (ba, bb) = tmp                                
    inset = a in {0, 1}                       | inset = a in {0, 1}                           
    if a <= 2 or a == 1:                      | if a <= 2 or a == 1:                          
        return 1                              |     return 1                                  
    elif inset:                               | elif inset:                                   
        return 1                              |     return 1                                  
    else:                                     | else:                                         
        return fib(a - 1) + fib(a - 2)        |     return fib(a - 1) + fib(a - 2)            
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,13 +1,13 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
-(ba, bb) = tmp
-inset = a in {0, 1}
-if a <= 2 or a == 1:
-    return 1
-elif inset:
-    return 1
-else:
-    return fib(a - 1) + fib(a - 2)
+     tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
29. Input. char of interest: 'int:
    t mp = (a, ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    t mp = (a, a)                             |     mp = (a, a)                               
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [2:5 - 2:6]
CST Stack:
    {Node ERROR (1, 4) - (1, 5)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    mp = (a, a)
+    t mp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
30. Input. char of interest: 'nt:
    tm p = (a, a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tm p = (a, a)                             |     p = (a, a)                                
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [2:5 - 2:7]
CST Stack:
    {Node ERROR (1, 4) - (1, 6)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    p = (a, a)
+    tm p = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
32. Input. char of interest: ':
    tmp  = (a, a)
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp  = (a, a)                             |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
+    tmp  = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
34. Input. char of interest: '    tmp =  (a, a)
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp =  (a, a)                             |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
+    tmp =  (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
35. Input. char of interest: '   tmp = ( a, a)
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = ( a, a)                             |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
+    tmp = ( a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
36. Input. char of interest: '  tmp = (a , a)
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a , a)                             |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
+    tmp = (a , a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
38. Input. char of interest: 'tmp = (a,  a)
    (b':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a,  a)                             |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
+    tmp = (a,  a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
39. Input. char of interest: 'mp = (a, a )
    (ba':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a )                             |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
+    tmp = (a, a )
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
40. Input. char of interest: 'p = (a, a) 
    (ba,':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
+    tmp = (a, a) 
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
45. Input. char of interest: 'a, a)
     (ba, bb) ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
     (ba, bb) = tmp                           |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
46. Input. char of interest: ', a)
    ( ba, bb) =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    ( ba, bb) = tmp                           |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    ( ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
47. Input. char of interest: ' a)
    (b a, bb) = ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (b a, bb) = tmp                           |     (a, bb) = tmp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [3:6 - 3:7]
CST Stack:
    {Node ERROR (2, 5) - (2, 6)}
    {Node tuple_pattern (2, 4) - (2, 13)}
    {Node assignment (2, 4) - (2, 19)}
    {Node expression_statement (2, 4) - (2, 19)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (a, bb) = tmp
+    (b a, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
48. Input. char of interest: 'a)
    (ba , bb) = t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba , bb) = tmp                           |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    (ba , bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
50. Input. char of interest: '
    (ba,  bb) = tmp':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba,  bb) = tmp                           |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    (ba,  bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
51. Input. char of interest: '    (ba, b b) = tmp
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, b b) = tmp                           |     tmp                                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [3:5 - 3:16]
CST Stack:
    {Node ERROR (2, 4) - (2, 15)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    tmp
+    (ba, b b) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
52. Input. char of interest: '   (ba, bb ) = tmp
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb ) = tmp                           |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    (ba, bb ) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
54. Input. char of interest: ' (ba, bb)  = tmp
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb)  = tmp                           |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    (ba, bb)  = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
56. Input. char of interest: 'ba, bb) =  tmp
    i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) =  tmp                           |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    (ba, bb) =  tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
57. Input. char of interest: 'a, bb) = t mp
    in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = t mp                           |     (ba, bb) = mp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [3:16 - 3:17]
CST Stack:
    {Node ERROR (2, 15) - (2, 16)}
    {Node assignment (2, 4) - (2, 19)}
    {Node expression_statement (2, 4) - (2, 19)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = mp
+    (ba, bb) = t mp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
58. Input. char of interest: ', bb) = tm p
    ins':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tm p                           |     (ba, bb) = p                              
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [3:16 - 3:18]
CST Stack:
    {Node ERROR (2, 15) - (2, 17)}
    {Node assignment (2, 4) - (2, 19)}
    {Node expression_statement (2, 4) - (2, 19)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = p
+    (ba, bb) = tm p
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
59. Input. char of interest: ' bb) = tmp 
    inse':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    (ba, bb) = tmp 
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
64. Input. char of interest: '= tmp
     inset = a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
     inset = a in {0, 1}                      |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
65. Input. char of interest: ' tmp
    i nset = a ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    i nset = a in {0, 1}                      |     nset = a in {0, 1}                        
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [4:5 - 4:6]
CST Stack:
    {Node ERROR (3, 4) - (3, 5)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    nset = a in {0, 1}
+    i nset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
66. Input. char of interest: 'tmp
    in set = a i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    in set = a in {0, 1}                      |     set = a in {0, 1}                         
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [4:5 - 4:7]
CST Stack:
    {Node ERROR (3, 4) - (3, 6)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    set = a in {0, 1}
+    in set = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
67. Input. char of interest: 'mp
    ins et = a in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    ins et = a in {0, 1}                      |     et = a in {0, 1}                          
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [4:5 - 4:8]
CST Stack:
    {Node ERROR (3, 4) - (3, 7)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    et = a in {0, 1}
+    ins et = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
68. Input. char of interest: 'p
    inse t = a in ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inse t = a in {0, 1}                      |     t = a in {0, 1}                           
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [4:5 - 4:9]
CST Stack:
    {Node ERROR (3, 4) - (3, 8)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    t = a in {0, 1}
+    inse t = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
70. Input. char of interest: '    inset  = a in {0':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset  = a in {0, 1}                      |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset  = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
72. Input. char of interest: '  inset =  a in {0, ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset =  a in {0, 1}                      |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset =  a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
74. Input. char of interest: 'inset = a  in {0, 1}':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a  in {0, 1}                      |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a  in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
75. Input. char of interest: 'nset = a i n {0, 1}
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a i n {0, 1}                      |     inset = {0, 1}                            
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [4:13 - 4:18]
CST Stack:
    {Node ERROR (3, 12) - (3, 17)}
    {Node assignment (3, 4) - (3, 24)}
    {Node expression_statement (3, 4) - (3, 24)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = {0, 1}
+    inset = a i n {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
77. Input. char of interest: 'et = a in  {0, 1}
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in  {0, 1}                      |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a in  {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
78. Input. char of interest: 't = a in { 0, 1}
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in { 0, 1}                      |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a in { 0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
79. Input. char of interest: ' = a in {0 , 1}
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0 , 1}                      |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a in {0 , 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
81. Input. char of interest: ' a in {0,  1}
    if':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0,  1}                      |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a in {0,  1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
82. Input. char of interest: 'a in {0, 1 }
    if ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1 }                      |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a in {0, 1 }
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
83. Input. char of interest: ' in {0, 1} 
    if a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a in {0, 1} 
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
88. Input. char of interest: '0, 1}
     if a <= 2':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
     if a <= 2 or a == 1:                     |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+     if a <= 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
89. Input. char of interest: ', 1}
    i f a <= 2 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    i f a <= 2 or a == 1:                     | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    i f a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
91. Input. char of interest: '1}
    if  a <= 2 or':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if  a <= 2 or a == 1:                     |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+    if  a <= 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
93. Input. char of interest: '
    if a  <= 2 or a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a  <= 2 or a == 1:                     |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+    if a  <= 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
94. Input. char of interest: '    if a < = 2 or a ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a < = 2 or a == 1:                     |     if a < 2 or a == 1:                       
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [5:12 - 5:13]
CST Stack:
    {Node ERROR (4, 11) - (4, 12)}
    {Node comparison_operator (4, 7) - (4, 14)}
    {Node boolean_operator (4, 7) - (4, 24)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a < 2 or a == 1:
+    if a < = 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
96. Input. char of interest: '  if a <=  2 or a ==':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <=  2 or a == 1:                     |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+    if a <=  2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
98. Input. char of interest: 'if a <= 2  or a == 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2  or a == 1:                     |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+    if a <= 2  or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
99. Input. char of interest: 'f a <= 2 o r a == 1:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 o r a == 1:                     |     if a <= 2 == 1:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [5:15 - 5:20]
CST Stack:
    {Node ERROR (4, 14) - (4, 19)}
    {Node comparison_operator (4, 7) - (4, 24)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 == 1:
+    if a <= 2 o r a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
101. Input. char of interest: 'a <= 2 or  a == 1:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or  a == 1:                     |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+    if a <= 2 or  a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
103. Input. char of interest: '<= 2 or a  == 1:
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a  == 1:                     |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+    if a <= 2 or a  == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
104. Input. char of interest: '= 2 or a = = 1:
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a = = 1:                     |     if a <= 2 or a:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [5:20 - 5:25]
CST Stack:
    {Node ERROR (4, 19) - (4, 24)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a:
+    if a <= 2 or a = = 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
106. Input. char of interest: '2 or a ==  1:
      ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a ==  1:                     |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+    if a <= 2 or a ==  1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
107. Input. char of interest: ' or a == 1 :
       ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1 :                     |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+    if a <= 2 or a == 1 :
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
108. Input. char of interest: 'or a == 1: 
        ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
+    if a <= 2 or a == 1: 
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
117. Input. char of interest: ':
         return 1
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
         return 1                             |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return 1
+         return 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
118. Input. char of interest: '
        r eturn 1
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        r eturn 1                             |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [6:9 - 6:16]
CST Stack:
    {Node ERROR (5, 8) - (5, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        r eturn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
119. Input. char of interest: '        re turn 1
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        re turn 1                             |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [6:9 - 6:16]
CST Stack:
    {Node ERROR (5, 8) - (5, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        re turn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
120. Input. char of interest: '       ret urn 1
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        ret urn 1                             |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [6:9 - 6:16]
CST Stack:
    {Node ERROR (5, 8) - (5, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        ret urn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
121. Input. char of interest: '      retu rn 1
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        retu rn 1                             |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [6:9 - 6:16]
CST Stack:
    {Node ERROR (5, 8) - (5, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        retu rn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
122. Input. char of interest: '     retur n 1
    e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        retur n 1                             |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [6:9 - 6:16]
CST Stack:
    {Node ERROR (5, 8) - (5, 15)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        retur n 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
124. Input. char of interest: '   return  1
    eli':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return  1                             |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return 1
+        return  1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
125. Input. char of interest: '  return 1 
    elif':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return 1
+        return 1 
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
130. Input. char of interest: 'urn 1
     elif inse':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
     elif inset:                              |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
+     elif inset:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
131. Input. char of interest: 'rn 1
    e lif inset':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    e lif inset:                              |     inset: 1                                  
        return 1                              |     else: return(a - 1) + fib(a - 2)          
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: "invalid syntax" at [7:5 - 7:10]
CST Stack:
    {Node ERROR (6, 4) - (6, 9)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "invalid syntax" at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 10) - (7, 16)}
    {Node expression_statement (6, 10) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "invalid syntax" at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"else\" cannot be used as identifier" at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"return\" cannot be used as identifier" at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    e lif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
132. Input. char of interest: 'n 1
    el if inset:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    el if inset:                              | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    el if inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
133. Input. char of interest: ' 1
    eli f inset:
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    eli f inset:                              |     inset: 1                                  
        return 1                              |     else: return(a - 1) + fib(a - 2)          
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: "invalid syntax" at [7:5 - 7:10]
CST Stack:
    {Node ERROR (6, 4) - (6, 9)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "invalid syntax" at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 10) - (7, 16)}
    {Node expression_statement (6, 10) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "invalid syntax" at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"else\" cannot be used as identifier" at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"return\" cannot be used as identifier" at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    eli f inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
135. Input. char of interest: '
    elif  inset:
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif  inset:                              |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
+    elif  inset:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
136. Input. char of interest: '    elif i nset:
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif i nset:                              |     elif nset:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [7:10 - 7:11]
CST Stack:
    {Node ERROR (6, 9) - (6, 10)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif nset:
+    elif i nset:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
137. Input. char of interest: '   elif in set:
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif in set:                              |     elif set:                                 
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [7:10 - 7:12]
CST Stack:
    {Node ERROR (6, 9) - (6, 11)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif set:
+    elif in set:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
138. Input. char of interest: '  elif ins et:
     ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif ins et:                              |     elif ins:                                 
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [7:14 - 7:16]
CST Stack:
    {Node ERROR (6, 13) - (6, 15)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif ins:
+    elif ins et:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
139. Input. char of interest: ' elif inse t:
      ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inse t:                              |     elif inse:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [7:15 - 7:16]
CST Stack:
    {Node ERROR (6, 14) - (6, 15)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inse:
+    elif inse t:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
140. Input. char of interest: 'elif inset :
       ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset :                              |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
+    elif inset :
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
141. Input. char of interest: 'lif inset: 
        ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
+    elif inset: 
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
150. Input. char of interest: ':
         return 1
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
         return 1                             |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return 1
+         return 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
151. Input. char of interest: '
        r eturn 1
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        r eturn 1                             |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [8:9 - 8:16]
CST Stack:
    {Node ERROR (7, 8) - (7, 15)}
    {Node elif_clause (6, 4) - (7, 17)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        r eturn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
152. Input. char of interest: '        re turn 1
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        re turn 1                             |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [8:9 - 8:16]
CST Stack:
    {Node ERROR (7, 8) - (7, 15)}
    {Node elif_clause (6, 4) - (7, 17)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        re turn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
153. Input. char of interest: '       ret urn 1
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        ret urn 1                             |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [8:9 - 8:16]
CST Stack:
    {Node ERROR (7, 8) - (7, 15)}
    {Node elif_clause (6, 4) - (7, 17)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        ret urn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
154. Input. char of interest: '      retu rn 1
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        retu rn 1                             |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [8:9 - 8:16]
CST Stack:
    {Node ERROR (7, 8) - (7, 15)}
    {Node elif_clause (6, 4) - (7, 17)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        retu rn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
155. Input. char of interest: '     retur n 1
    e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        retur n 1                             |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [8:9 - 8:16]
CST Stack:
    {Node ERROR (7, 8) - (7, 15)}
    {Node elif_clause (6, 4) - (7, 17)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        retur n 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
157. Input. char of interest: '   return  1
    els':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return  1                             |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return 1
+        return  1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
158. Input. char of interest: '  return 1 
    else':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return 1
+        return 1 
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
163. Input. char of interest: 'urn 1
     else:
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
     else:                                    |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,7 @@
         return 1
     elif inset:
         return 1
-    else:
+     else:
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
164. Input. char of interest: 'rn 1
    e lse:
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    e lse:                                    |     lse: return(a - 1) + fib(a - 2)           
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

3 Recoverable errors detected:
SyntaxError: "invalid syntax" at [9:5 - 9:6]
CST Stack:
    {Node ERROR (8, 4) - (8, 5)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "invalid syntax" at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 6) - (9, 38)}
    {Node expression_statement (8, 6) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"return\" cannot be used as identifier" at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 6) - (9, 38)}
    {Node expression_statement (8, 6) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    lse: return(a - 1) + fib(a - 2)
+    e lse:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
165. Input. char of interest: 'n 1
    el se:
     ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    el se:                                    |     se: return(a - 1) + fib(a - 2)            
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

3 Recoverable errors detected:
SyntaxError: "invalid syntax" at [9:5 - 9:7]
CST Stack:
    {Node ERROR (8, 4) - (8, 6)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "invalid syntax" at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 7) - (9, 38)}
    {Node expression_statement (8, 7) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"return\" cannot be used as identifier" at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 7) - (9, 38)}
    {Node expression_statement (8, 7) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    se: return(a - 1) + fib(a - 2)
+    el se:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
166. Input. char of interest: ' 1
    els e:
      ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    els e:                                    |     els: return(a - 1) + fib(a - 2)           
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

3 Recoverable errors detected:
SyntaxError: "invalid syntax" at [9:9 - 9:10]
CST Stack:
    {Node ERROR (8, 8) - (8, 9)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "invalid syntax" at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"return\" cannot be used as identifier" at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    els: return(a - 1) + fib(a - 2)
+    els e:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
167. Input. char of interest: '1
    else :
       ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else :                                    |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,7 @@
         return 1
     elif inset:
         return 1
-    else:
+    else :
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
168. Input. char of interest: '
    else: 
        ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,7 @@
         return 1
     elif inset:
         return 1
-    else:
+    else: 
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
177. Input. char of interest: ':
         return fi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
         return fib(a - 1) + fib(a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
178. Input. char of interest: '
        r eturn fib':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        r eturn fib(a - 1) + fib(a - 2)       |         fib(a - 1) + fib(a - 2)               
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [10:9 - 10:16]
CST Stack:
    {Node ERROR (9, 8) - (9, 15)}
    {Node else_clause (8, 4) - (9, 39)}
    {Node if_statement (4, 4) - (9, 39)}
    {Node block (1, 4) - (9, 39)}
    {Node function_definition (0, 0) - (9, 39)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        fib(a - 1) + fib(a - 2)
+        r eturn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
179. Input. char of interest: '        re turn fib(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        re turn fib(a - 1) + fib(a - 2)       |         fib(a - 1) + fib(a - 2)               
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [10:9 - 10:16]
CST Stack:
    {Node ERROR (9, 8) - (9, 15)}
    {Node else_clause (8, 4) - (9, 39)}
    {Node if_statement (4, 4) - (9, 39)}
    {Node block (1, 4) - (9, 39)}
    {Node function_definition (0, 0) - (9, 39)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        fib(a - 1) + fib(a - 2)
+        re turn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
180. Input. char of interest: '       ret urn fib(a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        ret urn fib(a - 1) + fib(a - 2)       |         fib(a - 1) + fib(a - 2)               
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [10:9 - 10:16]
CST Stack:
    {Node ERROR (9, 8) - (9, 15)}
    {Node else_clause (8, 4) - (9, 39)}
    {Node if_statement (4, 4) - (9, 39)}
    {Node block (1, 4) - (9, 39)}
    {Node function_definition (0, 0) - (9, 39)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        fib(a - 1) + fib(a - 2)
+        ret urn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
181. Input. char of interest: '      retu rn fib(a ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        retu rn fib(a - 1) + fib(a - 2)       |         retu(a - 1) + fib(a - 2)              
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [10:14 - 10:20]
CST Stack:
    {Node ERROR (9, 13) - (9, 19)}
    {Node call (9, 8) - (9, 26)}
    {Node binary_operator (9, 8) - (9, 39)}
    {Node expression_statement (9, 8) - (9, 39)}
    {Node block (9, 8) - (9, 39)}
    {Node else_clause (8, 4) - (9, 39)}
    {Node if_statement (4, 4) - (9, 39)}
    {Node block (1, 4) - (9, 39)}
    {Node function_definition (0, 0) - (9, 39)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        retu(a - 1) + fib(a - 2)
+        retu rn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
182. Input. char of interest: '     retur n fib(a -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        retur n fib(a - 1) + fib(a - 2)       |         retur(a - 1) + fib(a - 2)             
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [10:15 - 10:20]
CST Stack:
    {Node ERROR (9, 14) - (9, 19)}
    {Node call (9, 8) - (9, 26)}
    {Node binary_operator (9, 8) - (9, 39)}
    {Node expression_statement (9, 8) - (9, 39)}
    {Node block (9, 8) - (9, 39)}
    {Node else_clause (8, 4) - (9, 39)}
    {Node if_statement (4, 4) - (9, 39)}
    {Node block (1, 4) - (9, 39)}
    {Node function_definition (0, 0) - (9, 39)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        retur(a - 1) + fib(a - 2)
+        retur n fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
184. Input. char of interest: '   return  fib(a - 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return  fib(a - 1) + fib(a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return  fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
185. Input. char of interest: '  return f ib(a - 1)':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return f ib(a - 1) + fib(a - 2)       |         return                                
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [10:16 - 10:17]
CST Stack:
    {Node ERROR (9, 15) - (9, 16)}
    {Node return_statement (9, 8) - (9, 39)}
    {Node block (9, 8) - (9, 39)}
    {Node else_clause (8, 4) - (9, 39)}
    {Node if_statement (4, 4) - (9, 39)}
    {Node block (1, 4) - (9, 39)}
    {Node function_definition (0, 0) - (9, 39)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return
+        return f ib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
186. Input. char of interest: ' return fi b(a - 1) ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fi b(a - 1) + fib(a - 2)       |         return fi(a - 1) + fib(a - 2)         
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [10:19 - 10:20]
CST Stack:
    {Node ERROR (9, 18) - (9, 19)}
    {Node call (9, 15) - (9, 26)}
    {Node binary_operator (9, 15) - (9, 39)}
    {Node return_statement (9, 8) - (9, 39)}
    {Node block (9, 8) - (9, 39)}
    {Node else_clause (8, 4) - (9, 39)}
    {Node if_statement (4, 4) - (9, 39)}
    {Node block (1, 4) - (9, 39)}
    {Node function_definition (0, 0) - (9, 39)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fi(a - 1) + fib(a - 2)
+        return fi b(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
187. Input. char of interest: 'return fib (a - 1) +':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib (a - 1) + fib(a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib (a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
188. Input. char of interest: 'eturn fib( a - 1) + ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib( a - 1) + fib(a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib( a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
190. Input. char of interest: 'urn fib(a  - 1) + fi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a  - 1) + fib(a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a  - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
192. Input. char of interest: 'n fib(a -  1) + fib(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a -  1) + fib(a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a -  1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
193. Input. char of interest: ' fib(a - 1 ) + fib(a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1 ) + fib(a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1 ) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
195. Input. char of interest: 'ib(a - 1)  + fib(a -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1)  + fib(a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1)  + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
197. Input. char of interest: '(a - 1) +  fib(a - 2':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) +  fib(a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1) +  fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
198. Input. char of interest: 'a - 1) + f ib(a - 2)':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + f ib(a - 2)       |         return fib(a - 1) + ib(a - 2)         
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [10:29 - 10:30]
CST Stack:
    {Node ERROR (9, 28) - (9, 29)}
    {Node binary_operator (9, 15) - (9, 39)}
    {Node return_statement (9, 8) - (9, 39)}
    {Node block (9, 8) - (9, 39)}
    {Node else_clause (8, 4) - (9, 39)}
    {Node if_statement (4, 4) - (9, 39)}
    {Node block (1, 4) - (9, 39)}
    {Node function_definition (0, 0) - (9, 39)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + ib(a - 2)
+        return fib(a - 1) + f ib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
199. Input. char of interest: ' - 1) + fi b(a - 2)
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fi b(a - 2)       |         return fib(a - 1) + fi(a - 2)         
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [10:32 - 10:33]
CST Stack:
    {Node ERROR (9, 31) - (9, 32)}
    {Node call (9, 28) - (9, 39)}
    {Node binary_operator (9, 15) - (9, 39)}
    {Node return_statement (9, 8) - (9, 39)}
    {Node block (9, 8) - (9, 39)}
    {Node else_clause (8, 4) - (9, 39)}
    {Node if_statement (4, 4) - (9, 39)}
    {Node block (1, 4) - (9, 39)}
    {Node function_definition (0, 0) - (9, 39)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fi(a - 2)
+        return fib(a - 1) + fi b(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
200. Input. char of interest: '- 1) + fib (a - 2)

':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib (a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1) + fib (a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
201. Input. char of interest: ' 1) + fib( a - 2)

d':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib( a - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1) + fib( a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
203. Input. char of interest: ') + fib(a  - 2)

def':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a  - 2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1) + fib(a  - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
205. Input. char of interest: '+ fib(a -  2)

def s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a -  2)       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1) + fib(a -  2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
206. Input. char of interest: ' fib(a - 2 )

def so':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2 )       |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1) + fib(a - 2 )
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
207. Input. char of interest: 'fib(a - 2) 

def som':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1) + fib(a - 2) 
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
208. Input. char of interest: 'ib(a - 2)
 
def some':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -8,7 +8,7 @@
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
-
+ 
 def somethingelse():
     pass
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
209. Input. char of interest: 'b(a - 2)

 def somet':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
 def somethingelse():                         | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+ def somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
210. Input. char of interest: '(a - 2)

d ef someth':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
d ef somethingelse():                         | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+d ef somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
211. Input. char of interest: 'a - 2)

de f somethi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
de f somethingelse():                         | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+de f somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
213. Input. char of interest: '- 2)

def  something':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def  somethingelse():                         | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def  somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
214. Input. char of interest: ' 2)

def s omethinge':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def s omethingelse():                         | def omethingelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:5 - 12:6]
CST Stack:
    {Node ERROR (11, 4) - (11, 5)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def omethingelse():
+def s omethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
215. Input. char of interest: '2)

def so methingel':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def so methingelse():                         | def methingelse():                            
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:5 - 12:7]
CST Stack:
    {Node ERROR (11, 4) - (11, 6)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def methingelse():
+def so methingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
216. Input. char of interest: ')

def som ethingels':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def som ethingelse():                         | def ethingelse():                             
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:5 - 12:8]
CST Stack:
    {Node ERROR (11, 4) - (11, 7)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def ethingelse():
+def som ethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
217. Input. char of interest: '

def some thingelse':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def some thingelse():                         | def thingelse():                              
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:5 - 12:9]
CST Stack:
    {Node ERROR (11, 4) - (11, 8)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def thingelse():
+def some thingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
218. Input. char of interest: '
def somet hingelse(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somet hingelse():                         | def hingelse():                               
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:5 - 12:10]
CST Stack:
    {Node ERROR (11, 4) - (11, 9)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def hingelse():
+def somet hingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
219. Input. char of interest: 'def someth ingelse()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def someth ingelse():                         | def ingelse():                                
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:5 - 12:11]
CST Stack:
    {Node ERROR (11, 4) - (11, 10)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def ingelse():
+def someth ingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
220. Input. char of interest: 'ef somethi ngelse():':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethi ngelse():                         | def somethi():                                
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:13 - 12:19]
CST Stack:
    {Node ERROR (11, 12) - (11, 18)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethi():
+def somethi ngelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
221. Input. char of interest: 'f somethin gelse():
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethin gelse():                         | def somethin():                               
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:14 - 12:19]
CST Stack:
    {Node ERROR (11, 13) - (11, 18)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethin():
+def somethin gelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
222. Input. char of interest: ' something else():
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def something else():                         | def something():                              
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:15 - 12:19]
CST Stack:
    {Node ERROR (11, 14) - (11, 18)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def something():
+def something else():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
223. Input. char of interest: 'somethinge lse():
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethinge lse():                         | def somethinge():                             
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:16 - 12:19]
CST Stack:
    {Node ERROR (11, 15) - (11, 18)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethinge():
+def somethinge lse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
224. Input. char of interest: 'omethingel se():
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingel se():                         | def somethingel():                            
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:17 - 12:19]
CST Stack:
    {Node ERROR (11, 16) - (11, 18)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingel():
+def somethingel se():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
225. Input. char of interest: 'methingels e():
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingels e():                         | def somethingels():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [12:18 - 12:19]
CST Stack:
    {Node ERROR (11, 17) - (11, 18)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingels():
+def somethingels e():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
226. Input. char of interest: 'ethingelse ():
    p':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse ():                         | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def somethingelse ():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
227. Input. char of interest: 'thingelse( ):
    pa':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse( ):                         | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def somethingelse( ):
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
228. Input. char of interest: 'hingelse() :
    pas':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse() :                         | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def somethingelse() :
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
229. Input. char of interest: 'ingelse(): 
    pass':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def somethingelse(): 
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
234. Input. char of interest: 'se():
     pass

def':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
     pass                                     |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    pass
+     pass
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
235. Input. char of interest: 'e():
    p ass

def ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    p ass                                     |     ass                                       
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [13:5 - 13:6]
CST Stack:
    {Node ERROR (12, 4) - (12, 5)}
    {Node function_definition (11, 0) - (12, 9)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    ass
+    p ass
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
236. Input. char of interest: '():
    pa ss

def f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pa ss                                     |     ss                                        
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [13:5 - 13:7]
CST Stack:
    {Node ERROR (12, 4) - (12, 6)}
    {Node function_definition (11, 0) - (12, 9)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    ss
+    pa ss
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
237. Input. char of interest: '):
    pas s

def fo':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pas s                                     |     s                                         
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [13:5 - 13:8]
CST Stack:
    {Node ERROR (12, 4) - (12, 7)}
    {Node function_definition (11, 0) - (12, 9)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    s
+    pas s
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
238. Input. char of interest: ':
    pass 

def for':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    pass
+    pass 
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
239. Input. char of interest: '
    pass
 
def form':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -11,7 +11,7 @@
 
 def somethingelse():
     pass
-
+ 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
240. Input. char of interest: '    pass

 def forma':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
 def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+ def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
241. Input. char of interest: '   pass

d ef format':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        |                                                
    tmp = (a, a)                               | 
    (ba, bb) = tmp                             | 
    inset = a in {0, 1}                        | 
    if a <= 2 or a == 1:                       | 
        return 1                               | 
    elif inset:                                | 
        return 1                               | 
    else:                                      | 
        return fib(a - 1) + fib(a - 2)         | 
                                               | 
def somethingelse():                           | 
    pass                                       | 
                                               | 
d ef format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])      | 
                                               | 
def main() -> int:                             | 
    """DOC_STRING"""                           | 
    somethingelse()                            | 
    fib(12)                                    | 
    astring = format_a_string()                | 
    return 0                                   | 
if __name__ == '__main__':                     | 
    main()                                     | 
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+d ef format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
242. Input. char of interest: '  pass

de f format_':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        |                                                
    tmp = (a, a)                               | 
    (ba, bb) = tmp                             | 
    inset = a in {0, 1}                        | 
    if a <= 2 or a == 1:                       | 
        return 1                               | 
    elif inset:                                | 
        return 1                               | 
    else:                                      | 
        return fib(a - 1) + fib(a - 2)         | 
                                               | 
def somethingelse():                           | 
    pass                                       | 
                                               | 
de f format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])      | 
                                               | 
def main() -> int:                             | 
    """DOC_STRING"""                           | 
    somethingelse()                            | 
    fib(12)                                    | 
    astring = format_a_string()                | 
    return 0                                   | 
if __name__ == '__main__':                     | 
    main()                                     | 
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+de f format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
244. Input. char of interest: 'pass

def  format_a_':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def  format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def  format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
245. Input. char of interest: 'ass

def f ormat_a_s':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def f ormat_a_string(astring: str) -> str:     | def ormat_a_string(astring: str) -> str:       
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:5 - 15:6]
CST Stack:
    {Node ERROR (14, 4) - (14, 5)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def ormat_a_string(astring: str) -> str:
+def f ormat_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
246. Input. char of interest: 'ss

def fo rmat_a_st':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def fo rmat_a_string(astring: str) -> str:     | def rmat_a_string(astring: str) -> str:        
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:5 - 15:7]
CST Stack:
    {Node ERROR (14, 4) - (14, 6)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def rmat_a_string(astring: str) -> str:
+def fo rmat_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
247. Input. char of interest: 's

def for mat_a_str':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def for mat_a_string(astring: str) -> str:     | def mat_a_string(astring: str) -> str:         
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:5 - 15:8]
CST Stack:
    {Node ERROR (14, 4) - (14, 7)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def mat_a_string(astring: str) -> str:
+def for mat_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
248. Input. char of interest: '

def form at_a_stri':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def form at_a_string(astring: str) -> str:     | def at_a_string(astring: str) -> str:          
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:5 - 15:9]
CST Stack:
    {Node ERROR (14, 4) - (14, 8)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def at_a_string(astring: str) -> str:
+def form at_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
249. Input. char of interest: '
def forma t_a_strin':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def forma t_a_string(astring: str) -> str:     | def t_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:5 - 15:10]
CST Stack:
    {Node ERROR (14, 4) - (14, 9)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def t_a_string(astring: str) -> str:
+def forma t_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
250. Input. char of interest: 'def format _a_string':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format _a_string(astring: str) -> str:     | def _a_string(astring: str) -> str:            
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:5 - 15:11]
CST Stack:
    {Node ERROR (14, 4) - (14, 10)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def _a_string(astring: str) -> str:
+def format _a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
251. Input. char of interest: 'ef format_ a_string(':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_ a_string(astring: str) -> str:     | def a_string(astring: str) -> str:             
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:5 - 15:12]
CST Stack:
    {Node ERROR (14, 4) - (14, 11)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def a_string(astring: str) -> str:
+def format_ a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
252. Input. char of interest: 'f format_a _string(a':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a _string(astring: str) -> str:     | def format_a(astring: str) -> str:             
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:14 - 15:21]
CST Stack:
    {Node ERROR (14, 13) - (14, 20)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a(astring: str) -> str:
+def format_a _string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
253. Input. char of interest: ' format_a_ string(as':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_ string(astring: str) -> str:     | def format_a_(astring: str) -> str:            
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:15 - 15:21]
CST Stack:
    {Node ERROR (14, 14) - (14, 20)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_(astring: str) -> str:
+def format_a_ string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
254. Input. char of interest: 'format_a_s tring(ast':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_s tring(astring: str) -> str:     | def format_a_s(astring: str) -> str:           
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:16 - 15:21]
CST Stack:
    {Node ERROR (14, 15) - (14, 20)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_s(astring: str) -> str:
+def format_a_s tring(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
255. Input. char of interest: 'ormat_a_st ring(astr':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_st ring(astring: str) -> str:     | def format_a_st(astring: str) -> str:          
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:17 - 15:21]
CST Stack:
    {Node ERROR (14, 16) - (14, 20)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_st(astring: str) -> str:
+def format_a_st ring(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
256. Input. char of interest: 'rmat_a_str ing(astri':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_str ing(astring: str) -> str:     | def format_a_str(astring: str) -> str:         
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:18 - 15:21]
CST Stack:
    {Node ERROR (14, 17) - (14, 20)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_str(astring: str) -> str:
+def format_a_str ing(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
257. Input. char of interest: 'mat_a_stri ng(astrin':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_stri ng(astring: str) -> str:     | def format_a_stri(astring: str) -> str:        
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:19 - 15:21]
CST Stack:
    {Node ERROR (14, 18) - (14, 20)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_stri(astring: str) -> str:
+def format_a_stri ng(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
258. Input. char of interest: 'at_a_strin g(astring':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_strin g(astring: str) -> str:     | def format_a_strin(astring: str) -> str:       
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:20 - 15:21]
CST Stack:
    {Node ERROR (14, 19) - (14, 20)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_strin(astring: str) -> str:
+def format_a_strin g(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
259. Input. char of interest: 't_a_string (astring:':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string (astring: str) -> str:     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string (astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
260. Input. char of interest: '_a_string( astring: ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string( astring: str) -> str:     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string( astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
261. Input. char of interest: 'a_string(a string: s':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(a string: str) -> str:     | def format_a_string(string: str) -> str:       
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:21 - 15:22]
CST Stack:
    {Node ERROR (14, 20) - (14, 21)}
    {Node parameters (14, 19) - (14, 34)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(string: str) -> str:
+def format_a_string(a string: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
262. Input. char of interest: '_string(as tring: st':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(as tring: str) -> str:     | def format_a_string(tring: str) -> str:        
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:21 - 15:23]
CST Stack:
    {Node ERROR (14, 20) - (14, 22)}
    {Node parameters (14, 19) - (14, 34)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(tring: str) -> str:
+def format_a_string(as tring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
263. Input. char of interest: 'string(ast ring: str':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(ast ring: str) -> str:     | def format_a_string(ring: str) -> str:         
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:21 - 15:24]
CST Stack:
    {Node ERROR (14, 20) - (14, 23)}
    {Node parameters (14, 19) - (14, 34)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(ring: str) -> str:
+def format_a_string(ast ring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
264. Input. char of interest: 'tring(astr ing: str)':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astr ing: str) -> str:     | def format_a_string(astr: str) -> str:         
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:26 - 15:29]
CST Stack:
    {Node ERROR (14, 25) - (14, 28)}
    {Node typed_parameter (14, 20) - (14, 33)}
    {Node parameters (14, 19) - (14, 34)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astr: str) -> str:
+def format_a_string(astr ing: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
265. Input. char of interest: 'ring(astri ng: str) ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astri ng: str) -> str:     | def format_a_string(astri: str) -> str:        
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:27 - 15:29]
CST Stack:
    {Node ERROR (14, 26) - (14, 28)}
    {Node typed_parameter (14, 20) - (14, 33)}
    {Node parameters (14, 19) - (14, 34)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astri: str) -> str:
+def format_a_string(astri ng: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
266. Input. char of interest: 'ing(astrin g: str) -':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astrin g: str) -> str:     | def format_a_string(astrin: str) -> str:       
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:28 - 15:29]
CST Stack:
    {Node ERROR (14, 27) - (14, 28)}
    {Node typed_parameter (14, 20) - (14, 33)}
    {Node parameters (14, 19) - (14, 34)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astrin: str) -> str:
+def format_a_string(astrin g: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
267. Input. char of interest: 'ng(astring : str) ->':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring : str) -> str:     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring : str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
269. Input. char of interest: '(astring:  str) -> s':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring:  str) -> str:     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring:  str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
270. Input. char of interest: 'astring: s tr) -> st':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: s tr) -> str:     | def format_a_string(astring: tr) -> str:       
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:30 - 15:31]
CST Stack:
    {Node ERROR (14, 29) - (14, 30)}
    {Node typed_parameter (14, 20) - (14, 33)}
    {Node parameters (14, 19) - (14, 34)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: tr) -> str:
+def format_a_string(astring: s tr) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
271. Input. char of interest: 'string: st r) -> str':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: st r) -> str:     | def format_a_string(astring: st) -> str:       
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:33 - 15:34]
CST Stack:
    {Node ERROR (14, 32) - (14, 33)}
    {Node parameters (14, 19) - (14, 34)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: st) -> str:
+def format_a_string(astring: st r) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
272. Input. char of interest: 'tring: str ) -> str:':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str ) -> str:     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring: str ) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
274. Input. char of interest: 'ing: str)  -> str:
 ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str)  -> str:     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring: str)  -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
275. Input. char of interest: 'ng: str) - > str:
  ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) - > str:     | def format_a_string(astring: str):             
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:35 - 15:42]
CST Stack:
    {Node ERROR (14, 34) - (14, 41)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str):
+def format_a_string(astring: str) - > str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
277. Input. char of interest: ': str) ->  str:
    ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) ->  str:     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring: str) ->  str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
278. Input. char of interest: ' str) -> s tr:
    r':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> s tr:     | def format_a_string(astring: str) -> tr:       
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:38 - 15:39]
CST Stack:
    {Node ERROR (14, 37) - (14, 38)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> tr:
+def format_a_string(astring: str) -> s tr:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
279. Input. char of interest: 'str) -> st r:
    re':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> st r:     | def format_a_string(astring: str) -> st:       
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [15:41 - 15:42]
CST Stack:
    {Node ERROR (14, 40) - (14, 41)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> st:
+def format_a_string(astring: str) -> st r:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
280. Input. char of interest: 'tr) -> str :
    ret':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str :     | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring: str) -> str :
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
281. Input. char of interest: 'r) -> str: 
    retu':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring: str) -> str: 
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
286. Input. char of interest: ' str:
     return ',':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
     return ','.join([x for x in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+     return ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
287. Input. char of interest: 'str:
    r eturn ','':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    r eturn ','.join([x for x in astring])     |     ','.join([x for x in astring])             
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:5 - 16:12]
CST Stack:
    {Node ERROR (15, 4) - (15, 11)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    r eturn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
288. Input. char of interest: 'tr:
    re turn ','.':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    re turn ','.join([x for x in astring])     |     ','.join([x for x in astring])             
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:5 - 16:12]
CST Stack:
    {Node ERROR (15, 4) - (15, 11)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    re turn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
289. Input. char of interest: 'r:
    ret urn ','.j':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    ret urn ','.join([x for x in astring])     |     ','.join([x for x in astring])             
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:5 - 16:12]
CST Stack:
    {Node ERROR (15, 4) - (15, 11)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    ret urn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
290. Input. char of interest: ':
    retu rn ','.jo':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    retu rn ','.join([x for x in astring])     |     ','.join([x for x in astring])             
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:5 - 16:12]
CST Stack:
    {Node ERROR (15, 4) - (15, 11)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    retu rn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
291. Input. char of interest: '
    retur n ','.joi':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    retur n ','.join([x for x in astring])     |     ','.join([x for x in astring])             
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:5 - 16:12]
CST Stack:
    {Node ERROR (15, 4) - (15, 11)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    retur n ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
293. Input. char of interest: '   return  ','.join(':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return  ','.join([x for x in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return  ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
294. Input. char of interest: '  return ' ,'.join([':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ' ,'.join([x for x in astring])     |     return ' ,'.join([x for x in astring])     
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
295. Input. char of interest: ' return ', '.join([x':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ', '.join([x for x in astring])     |     return ', '.join([x for x in astring])     
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
296. Input. char of interest: 'return ',' .join([x ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ',' .join([x for x in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ',' .join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
297. Input. char of interest: 'eturn ','. join([x f':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','. join([x for x in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','. join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
298. Input. char of interest: 'turn ','.j oin([x fo':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.j oin([x for x in astring])     |     return ','.j([x for x in astring])         
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:18 - 16:21]
CST Stack:
    {Node ERROR (15, 17) - (15, 20)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.j([x for x in astring])
+    return ','.j oin([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
299. Input. char of interest: 'urn ','.jo in([x for':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.jo in([x for x in astring])     |     return ','.jo in [x for x in astring]      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.jo in [x for x in astring]
+    return ','.jo in([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
300. Input. char of interest: 'rn ','.joi n([x for ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.joi n([x for x in astring])     |     return ','.joi([x for x in astring])       
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:20 - 16:21]
CST Stack:
    {Node ERROR (15, 19) - (15, 20)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.joi([x for x in astring])
+    return ','.joi n([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
301. Input. char of interest: 'n ','.join ([x for x':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join ([x for x in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join ([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
302. Input. char of interest: ' ','.join( [x for x ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join( [x for x in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join( [x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
303. Input. char of interest: '','.join([ x for x i':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([ x for x in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([ x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
305. Input. char of interest: ''.join([x  for x in ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x  for x in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x  for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
306. Input. char of interest: '.join([x f or x in a':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x f or x in astring])     |     return ','.join([f or x in astring])       
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:22 - 16:23]
CST Stack:
    {Node ERROR (15, 21) - (15, 22)}
    {Node list (15, 20) - (15, 41)}
    {Node argument_list (15, 19) - (15, 42)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([f or x in astring])
+    return ','.join([x f or x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
307. Input. char of interest: 'join([x fo r x in as':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x fo r x in astring])     |     return ','.join([x in astring])            
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:22 - 16:28]
CST Stack:
    {Node ERROR (15, 21) - (15, 27)}
    {Node list (15, 20) - (15, 41)}
    {Node argument_list (15, 19) - (15, 42)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x in astring])
+    return ','.join([x fo r x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
309. Input. char of interest: 'in([x for  x in astr':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for  x in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for  x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
311. Input. char of interest: '([x for x  in astrin':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x  in astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x  in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
312. Input. char of interest: '[x for x i n astring':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x i n astring])     |     return ','.join([x])                       
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:24 - 16:41]
CST Stack:
    {Node ERROR (15, 23) - (15, 40)}
    {Node list (15, 20) - (15, 41)}
    {Node argument_list (15, 19) - (15, 42)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x])
+    return ','.join([x for x i n astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
314. Input. char of interest: ' for x in  astring])':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in  astring])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x in  astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
315. Input. char of interest: 'for x in a string])
':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in a string])     |     return ','.join([x for x in string])       
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:33 - 16:34]
CST Stack:
    {Node ERROR (15, 32) - (15, 33)}
    {Node for_in_clause (15, 23) - (15, 40)}
    {Node list_comprehension (15, 20) - (15, 41)}
    {Node argument_list (15, 19) - (15, 42)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in string])
+    return ','.join([x for x in a string])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
316. Input. char of interest: 'or x in as tring])

':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in as tring])     |     return ','.join([x for x in tring])        
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:33 - 16:35]
CST Stack:
    {Node ERROR (15, 32) - (15, 34)}
    {Node for_in_clause (15, 23) - (15, 40)}
    {Node list_comprehension (15, 20) - (15, 41)}
    {Node argument_list (15, 19) - (15, 42)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in tring])
+    return ','.join([x for x in as tring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
317. Input. char of interest: 'r x in ast ring])

d':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in ast ring])     |     return ','.join([x for x in ring])         
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:33 - 16:36]
CST Stack:
    {Node ERROR (15, 32) - (15, 35)}
    {Node for_in_clause (15, 23) - (15, 40)}
    {Node list_comprehension (15, 20) - (15, 41)}
    {Node argument_list (15, 19) - (15, 42)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in ring])
+    return ','.join([x for x in ast ring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
318. Input. char of interest: ' x in astr ing])

de':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astr ing])     |     return ','.join([x for x in astr])         
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:38 - 16:41]
CST Stack:
    {Node ERROR (15, 37) - (15, 40)}
    {Node list_comprehension (15, 20) - (15, 41)}
    {Node argument_list (15, 19) - (15, 42)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astr])
+    return ','.join([x for x in astr ing])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
319. Input. char of interest: 'x in astri ng])

def':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astri ng])     |     return ','.join([x for x in astri])        
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:39 - 16:41]
CST Stack:
    {Node ERROR (15, 38) - (15, 40)}
    {Node list_comprehension (15, 20) - (15, 41)}
    {Node argument_list (15, 19) - (15, 42)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astri])
+    return ','.join([x for x in astri ng])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
320. Input. char of interest: ' in astrin g])

def ':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astrin g])     |     return ','.join([x for x in astrin])       
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [16:40 - 16:41]
CST Stack:
    {Node ERROR (15, 39) - (15, 40)}
    {Node list_comprehension (15, 20) - (15, 41)}
    {Node argument_list (15, 19) - (15, 42)}
    {Node call (15, 11) - (15, 42)}
    {Node return_statement (15, 4) - (15, 42)}
    {Node block (15, 4) - (15, 42)}
    {Node function_definition (14, 0) - (15, 42)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astrin])
+    return ','.join([x for x in astrin g])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
321. Input. char of interest: 'in astring ])

def m':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring ])     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x in astring ])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
322. Input. char of interest: 'n astring] )

def ma':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring] )     |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x in astring] )
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
323. Input. char of interest: ' astring]) 

def mai':

Input:                                         | ERRPY Recovered AST:                           
-----------------------------------------------| -----------------------------------------------
def fib(a: int) -> int:                        | def fib(a: int) -> int:                        
    tmp = (a, a)                               |     tmp = (a, a)                               
    (ba, bb) = tmp                             |     (ba, bb) = tmp                             
    inset = a in {0, 1}                        |     inset = a in {0, 1}                        
    if a <= 2 or a == 1:                       |     if a <= 2 or a == 1:                       
        return 1                               |         return 1                               
    elif inset:                                |     elif inset:                                
        return 1                               |         return 1                               
    else:                                      |     else:                                      
        return fib(a - 1) + fib(a - 2)         |         return fib(a - 1) + fib(a - 2)         
                                               |                                                
def somethingelse():                           | def somethingelse():                           
    pass                                       |     pass                                       
                                               |                                                
def format_a_string(astring: str) -> str:      | def format_a_string(astring: str) -> str:      
    return ','.join([x for x in astring])      |     return ','.join([x for x in astring])      
                                               |                                                
def main() -> int:                             | def main() -> int:                             
    """DOC_STRING"""                           |     """DOC_STRING"""                           
    somethingelse()                            |     somethingelse()                            
    fib(12)                                    |     fib(12)                                    
    astring = format_a_string()                |     astring = format_a_string()                
    return 0                                   |     return 0                                   
if __name__ == '__main__':                     | if __name__ == '__main__':                     
    main()                                     |     main()                                     
                                               | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x in astring]) 
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
324. Input. char of interest: 'astring])
 
def main':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -14,7 +14,7 @@
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
-
+ 
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
325. Input. char of interest: 'string])

 def main(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
 def main() -> int:                           | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+ def main() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
326. Input. char of interest: 'tring])

d ef main()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
d ef main() -> int:                           | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+d ef main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
327. Input. char of interest: 'ring])

de f main() ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
de f main() -> int:                           | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+de f main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
329. Input. char of interest: 'ng])

def  main() ->':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def  main() -> int:                           | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def  main() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
330. Input. char of interest: 'g])

def m ain() -> ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def m ain() -> int:                           | def ain() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [18:5 - 18:6]
CST Stack:
    {Node ERROR (17, 4) - (17, 5)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def ain() -> int:
+def m ain() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
331. Input. char of interest: '])

def ma in() -> i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def ma in() -> int:                           | def ma() -> int:                              
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [18:8 - 18:10]
CST Stack:
    {Node ERROR (17, 7) - (17, 9)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def ma() -> int:
+def ma in() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
332. Input. char of interest: ')

def mai n() -> in':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def mai n() -> int:                           | def mai() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [18:9 - 18:10]
CST Stack:
    {Node ERROR (17, 8) - (17, 9)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def mai() -> int:
+def mai n() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
333. Input. char of interest: '

def main () -> int':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main () -> int:                           | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main () -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
334. Input. char of interest: '
def main( ) -> int:':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main( ) -> int:                           | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main( ) -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
336. Input. char of interest: 'ef main()  -> int:
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main()  -> int:                           | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main()  -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
337. Input. char of interest: 'f main() - > int:
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() - > int:                           | def main():                                   
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [18:12 - 18:19]
CST Stack:
    {Node ERROR (17, 11) - (17, 18)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main():
+def main() - > int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
339. Input. char of interest: 'main() ->  int:
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() ->  int:                           | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main() ->  int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
340. Input. char of interest: 'ain() -> i nt:
    "':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> i nt:                           | def main() -> nt:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [18:15 - 18:16]
CST Stack:
    {Node ERROR (17, 14) - (17, 15)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> nt:
+def main() -> i nt:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
341. Input. char of interest: 'in() -> in t:
    ""':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> in t:                           | def main() -> in:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

2 Recoverable errors detected:
SyntaxError: "invalid syntax" at [18:18 - 18:19]
CST Stack:
    {Node ERROR (17, 17) - (17, 18)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: "keyword: \"in\" cannot be used as identifier" at [18:15 - 18:17]
CST Stack:
    {Node identifier (17, 14) - (17, 16)}
    {Node type (17, 14) - (17, 16)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: expected ':' (<unknown>, line 18)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> in:
+def main() -> in t:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
342. Input. char of interest: 'n() -> int :
    """':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int :                           | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main() -> int :
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
343. Input. char of interest: '() -> int: 
    """D':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main() -> int: 
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
348. Input. char of interest: ' int:
     """DOC_ST':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
     """DOC_STRING"""                         |     """DOC_STRING"""                          
    somethingelse()                           | somethingelse()                               
    fib(12)                                   | fib(12)                                       
    astring = format_a_string()               | astring = format_a_string()                   
    return 0                                  | return 0                                      
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """DOC_STRING"""
-somethingelse()
-fib(12)
-astring = format_a_string()
-return 0
+     """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
349. Input. char of interest: 'int:
    " ""DOC_STR':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    " ""DOC_STRING"""                         |     """ DOC_STRING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """ DOC_STRING"""
+    " ""DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
350. Input. char of interest: 'nt:
    "" "DOC_STRI':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    "" "DOC_STRING"""                         |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """DOC_STRING"""
+    "" "DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
351. Input. char of interest: 't:
    """ DOC_STRIN':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """ DOC_STRING"""                         |     """ DOC_STRING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
352. Input. char of interest: ':
    """D OC_STRING':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """D OC_STRING"""                         |     """D OC_STRING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
353. Input. char of interest: '
    """DO C_STRING"':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DO C_STRING"""                         |     """DO C_STRING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
354. Input. char of interest: '    """DOC _STRING""':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC _STRING"""                         |     """DOC _STRING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
355. Input. char of interest: '   """DOC_ STRING"""':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_ STRING"""                         |     """DOC_ STRING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
356. Input. char of interest: '  """DOC_S TRING"""
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_S TRING"""                         |     """DOC_S TRING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
357. Input. char of interest: ' """DOC_ST RING"""
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_ST RING"""                         |     """DOC_ST RING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
358. Input. char of interest: '"""DOC_STR ING"""
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STR ING"""                         |     """DOC_STR ING"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
359. Input. char of interest: '""DOC_STRI NG"""
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRI NG"""                         |     """DOC_STRI NG"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
360. Input. char of interest: '"DOC_STRIN G"""
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRIN G"""                         |     """DOC_STRIN G"""                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
361. Input. char of interest: 'DOC_STRING """
    s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING """                         |     """DOC_STRING """                         
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
362. Input. char of interest: 'OC_STRING" ""
    so':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING" ""                         |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [19:5 - 19:22]
CST Stack:
    {Node ERROR (18, 4) - (18, 21)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING" ""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
363. Input. char of interest: 'C_STRING"" "
    som':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"" "                         |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [19:5 - 19:22]
CST Stack:
    {Node ERROR (18, 4) - (18, 21)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING"" "
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
364. Input. char of interest: '_STRING""" 
    some':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """DOC_STRING"""
+    """DOC_STRING""" 
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
369. Input. char of interest: 'NG"""
     something':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
     somethingelse()                          |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse()
+     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
370. Input. char of interest: 'G"""
    s omethinge':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    s omethingelse()                          |     omethingelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:5 - 20:6]
CST Stack:
    {Node ERROR (19, 4) - (19, 5)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    omethingelse()
+    s omethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
371. Input. char of interest: '"""
    so methingel':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    so methingelse()                          |     methingelse()                             
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:5 - 20:7]
CST Stack:
    {Node ERROR (19, 4) - (19, 6)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    methingelse()
+    so methingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
372. Input. char of interest: '""
    som ethingels':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    som ethingelse()                          |     ethingelse()                              
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:5 - 20:8]
CST Stack:
    {Node ERROR (19, 4) - (19, 7)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    ethingelse()
+    som ethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
373. Input. char of interest: '"
    some thingelse':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    some thingelse()                          |     thingelse()                               
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:5 - 20:9]
CST Stack:
    {Node ERROR (19, 4) - (19, 8)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    thingelse()
+    some thingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
374. Input. char of interest: '
    somet hingelse(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somet hingelse()                          |     hingelse()                                
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:5 - 20:10]
CST Stack:
    {Node ERROR (19, 4) - (19, 9)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    hingelse()
+    somet hingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
375. Input. char of interest: '    someth ingelse()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    someth ingelse()                          |     ingelse()                                 
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:5 - 20:11]
CST Stack:
    {Node ERROR (19, 4) - (19, 10)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    ingelse()
+    someth ingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
376. Input. char of interest: '   somethi ngelse()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethi ngelse()                          |     somethi()                                 
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:13 - 20:19]
CST Stack:
    {Node ERROR (19, 12) - (19, 18)}
    {Node call (19, 4) - (19, 20)}
    {Node expression_statement (19, 4) - (19, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethi()
+    somethi ngelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
377. Input. char of interest: '  somethin gelse()
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethin gelse()                          |     somethin()                                
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:14 - 20:19]
CST Stack:
    {Node ERROR (19, 13) - (19, 18)}
    {Node call (19, 4) - (19, 20)}
    {Node expression_statement (19, 4) - (19, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethin()
+    somethin gelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
378. Input. char of interest: ' something else()
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    something else()                          |     something()                               
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:15 - 20:19]
CST Stack:
    {Node ERROR (19, 14) - (19, 18)}
    {Node call (19, 4) - (19, 20)}
    {Node expression_statement (19, 4) - (19, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    something()
+    something else()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
379. Input. char of interest: 'somethinge lse()
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethinge lse()                          |     somethinge()                              
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:16 - 20:19]
CST Stack:
    {Node ERROR (19, 15) - (19, 18)}
    {Node call (19, 4) - (19, 20)}
    {Node expression_statement (19, 4) - (19, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethinge()
+    somethinge lse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
380. Input. char of interest: 'omethingel se()
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingel se()                          |     somethingel()                             
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:17 - 20:19]
CST Stack:
    {Node ERROR (19, 16) - (19, 18)}
    {Node call (19, 4) - (19, 20)}
    {Node expression_statement (19, 4) - (19, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingel()
+    somethingel se()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
381. Input. char of interest: 'methingels e()
    f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingels e()                          |     somethingels()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [20:18 - 20:19]
CST Stack:
    {Node ERROR (19, 17) - (19, 18)}
    {Node call (19, 4) - (19, 20)}
    {Node expression_statement (19, 4) - (19, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingels()
+    somethingels e()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
382. Input. char of interest: 'ethingelse ()
    fi':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse ()                          |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse()
+    somethingelse ()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
383. Input. char of interest: 'thingelse( )
    fib':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse( )                          |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse()
+    somethingelse( )
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
384. Input. char of interest: 'hingelse() 
    fib(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse()
+    somethingelse() 
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
389. Input. char of interest: 'lse()
     fib(12)
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
     fib(12)                                  |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(12)
+     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
390. Input. char of interest: 'se()
    f ib(12)
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    f ib(12)                                  |     ib(12)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [21:5 - 21:6]
CST Stack:
    {Node ERROR (20, 4) - (20, 5)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    ib(12)
+    f ib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
391. Input. char of interest: 'e()
    fi b(12)
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fi b(12)                                  |     fi(12)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [21:8 - 21:9]
CST Stack:
    {Node ERROR (20, 7) - (20, 8)}
    {Node call (20, 4) - (20, 12)}
    {Node expression_statement (20, 4) - (20, 12)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fi(12)
+    fi b(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
392. Input. char of interest: '()
    fib (12)
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib (12)                                  |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(12)
+    fib (12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
393. Input. char of interest: ')
    fib( 12)
    a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib( 12)                                  |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(12)
+    fib( 12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
394. Input. char of interest: '
    fib(1 2)
    as':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(1 2)                                  |     fib(1)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [21:11 - 21:12]
CST Stack:
    {Node ERROR (20, 10) - (20, 11)}
    {Node argument_list (20, 7) - (20, 12)}
    {Node call (20, 4) - (20, 12)}
    {Node expression_statement (20, 4) - (20, 12)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(1)
+    fib(1 2)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
395. Input. char of interest: '    fib(12 )
    ast':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12 )                                  |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(12)
+    fib(12 )
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
396. Input. char of interest: '   fib(12) 
    astr':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(12)
+    fib(12) 
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
401. Input. char of interest: 'b(12)
     astring =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
     astring = format_a_string()              |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
402. Input. char of interest: '(12)
    a string = ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    a string = format_a_string()              |     string = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:5 - 22:6]
CST Stack:
    {Node ERROR (21, 4) - (21, 5)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    string = format_a_string()
+    a string = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
403. Input. char of interest: '12)
    as tring = f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    as tring = format_a_string()              |     tring = format_a_string()                 
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:5 - 22:7]
CST Stack:
    {Node ERROR (21, 4) - (21, 6)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    tring = format_a_string()
+    as tring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
404. Input. char of interest: '2)
    ast ring = fo':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    ast ring = format_a_string()              |     ring = format_a_string()                  
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:5 - 22:8]
CST Stack:
    {Node ERROR (21, 4) - (21, 7)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    ring = format_a_string()
+    ast ring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
405. Input. char of interest: ')
    astr ing = for':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astr ing = format_a_string()              |     ing = format_a_string()                   
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:5 - 22:9]
CST Stack:
    {Node ERROR (21, 4) - (21, 8)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    ing = format_a_string()
+    astr ing = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
406. Input. char of interest: '
    astri ng = form':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astri ng = format_a_string()              |     ng = format_a_string()                    
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:5 - 22:10]
CST Stack:
    {Node ERROR (21, 4) - (21, 9)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    ng = format_a_string()
+    astri ng = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
407. Input. char of interest: '    astrin g = forma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astrin g = format_a_string()              |     g = format_a_string()                     
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:5 - 22:11]
CST Stack:
    {Node ERROR (21, 4) - (21, 10)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    g = format_a_string()
+    astrin g = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
409. Input. char of interest: '  astring  = format_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring  = format_a_string()              |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+    astring  = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
411. Input. char of interest: 'astring =  format_a_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring =  format_a_string()              |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+    astring =  format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
412. Input. char of interest: 'string = f ormat_a_s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = f ormat_a_string()              |     astring = ormat_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:15 - 22:16]
CST Stack:
    {Node ERROR (21, 14) - (21, 15)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = ormat_a_string()
+    astring = f ormat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
413. Input. char of interest: 'tring = fo rmat_a_st':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = fo rmat_a_string()              |     astring = rmat_a_string()                 
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:15 - 22:17]
CST Stack:
    {Node ERROR (21, 14) - (21, 16)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = rmat_a_string()
+    astring = fo rmat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
414. Input. char of interest: 'ring = for mat_a_str':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = for mat_a_string()              |     astring = mat_a_string()                  
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:15 - 22:18]
CST Stack:
    {Node ERROR (21, 14) - (21, 17)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = mat_a_string()
+    astring = for mat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
415. Input. char of interest: 'ing = form at_a_stri':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = form at_a_string()              |     astring = at_a_string()                   
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:15 - 22:19]
CST Stack:
    {Node ERROR (21, 14) - (21, 18)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = at_a_string()
+    astring = form at_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
416. Input. char of interest: 'ng = forma t_a_strin':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = forma t_a_string()              |     astring = t_a_string()                    
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:15 - 22:20]
CST Stack:
    {Node ERROR (21, 14) - (21, 19)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = t_a_string()
+    astring = forma t_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
417. Input. char of interest: 'g = format _a_string':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format _a_string()              |     astring = _a_string()                     
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:15 - 22:21]
CST Stack:
    {Node ERROR (21, 14) - (21, 20)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = _a_string()
+    astring = format _a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
418. Input. char of interest: ' = format_ a_string(':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_ a_string()              |     astring = a_string()                      
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:15 - 22:22]
CST Stack:
    {Node ERROR (21, 14) - (21, 21)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = a_string()
+    astring = format_ a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
419. Input. char of interest: '= format_a _string()':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a _string()              |     astring = format_a()                      
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:24 - 22:31]
CST Stack:
    {Node ERROR (21, 23) - (21, 30)}
    {Node call (21, 14) - (21, 32)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a()
+    astring = format_a _string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
420. Input. char of interest: ' format_a_ string()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_ string()              |     astring = format_a_()                     
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:25 - 22:31]
CST Stack:
    {Node ERROR (21, 24) - (21, 30)}
    {Node call (21, 14) - (21, 32)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_()
+    astring = format_a_ string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
421. Input. char of interest: 'format_a_s tring()
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_s tring()              |     astring = format_a_s()                    
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:26 - 22:31]
CST Stack:
    {Node ERROR (21, 25) - (21, 30)}
    {Node call (21, 14) - (21, 32)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_s()
+    astring = format_a_s tring()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
422. Input. char of interest: 'ormat_a_st ring()
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_st ring()              |     astring = format_a_st()                   
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:27 - 22:31]
CST Stack:
    {Node ERROR (21, 26) - (21, 30)}
    {Node call (21, 14) - (21, 32)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_st()
+    astring = format_a_st ring()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
423. Input. char of interest: 'rmat_a_str ing()
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_str ing()              |     astring = format_a_str()                  
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:28 - 22:31]
CST Stack:
    {Node ERROR (21, 27) - (21, 30)}
    {Node call (21, 14) - (21, 32)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_str()
+    astring = format_a_str ing()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
424. Input. char of interest: 'mat_a_stri ng()
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_stri ng()              |     astring = format_a_stri()                 
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:29 - 22:31]
CST Stack:
    {Node ERROR (21, 28) - (21, 30)}
    {Node call (21, 14) - (21, 32)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_stri()
+    astring = format_a_stri ng()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
425. Input. char of interest: 'at_a_strin g()
    r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_strin g()              |     astring = format_a_strin()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [22:30 - 22:31]
CST Stack:
    {Node ERROR (21, 29) - (21, 30)}
    {Node call (21, 14) - (21, 32)}
    {Node assignment (21, 4) - (21, 32)}
    {Node expression_statement (21, 4) - (21, 32)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_strin()
+    astring = format_a_strin g()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
426. Input. char of interest: 't_a_string ()
    re':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string ()              |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+    astring = format_a_string ()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
427. Input. char of interest: '_a_string( )
    ret':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string( )              |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+    astring = format_a_string( )
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
428. Input. char of interest: 'a_string() 
    retu':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+    astring = format_a_string() 
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
433. Input. char of interest: 'ing()
     return 0
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
     return 0                                 |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return 0
+     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
434. Input. char of interest: 'ng()
    r eturn 0
i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    r eturn 0                                 |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [23:5 - 23:12]
CST Stack:
    {Node ERROR (22, 4) - (22, 11)}
    {Node block (18, 4) - (22, 13)}
    {Node function_definition (17, 0) - (22, 13)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    r eturn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
435. Input. char of interest: 'g()
    re turn 0
if':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    re turn 0                                 |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [23:5 - 23:12]
CST Stack:
    {Node ERROR (22, 4) - (22, 11)}
    {Node block (18, 4) - (22, 13)}
    {Node function_definition (17, 0) - (22, 13)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    re turn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
436. Input. char of interest: '()
    ret urn 0
if ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    ret urn 0                                 |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [23:5 - 23:12]
CST Stack:
    {Node ERROR (22, 4) - (22, 11)}
    {Node block (18, 4) - (22, 13)}
    {Node function_definition (17, 0) - (22, 13)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    ret urn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
437. Input. char of interest: ')
    retu rn 0
if _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    retu rn 0                                 |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [23:5 - 23:12]
CST Stack:
    {Node ERROR (22, 4) - (22, 11)}
    {Node block (18, 4) - (22, 13)}
    {Node function_definition (17, 0) - (22, 13)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    retu rn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
438. Input. char of interest: '
    retur n 0
if __':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    retur n 0                                 |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [23:5 - 23:12]
CST Stack:
    {Node ERROR (22, 4) - (22, 11)}
    {Node block (18, 4) - (22, 13)}
    {Node function_definition (17, 0) - (22, 13)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    retur n 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
440. Input. char of interest: '   return  0
if __na':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return  0                                 |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return 0
+    return  0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
441. Input. char of interest: '  return 0 
if __nam':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return 0
+    return 0 
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
442. Input. char of interest: ' return 0
 if __name':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
 if __name__ == '__main__':                   | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+ if __name__ == '__main__':
+    main()


===============================================================================
443. Input. char of interest: 'return 0
i f __name_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
i f __name__ == '__main__':                   | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+i f __name__ == '__main__':
+    main()


===============================================================================
445. Input. char of interest: 'turn 0
if  __name__ ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if  __name__ == '__main__':                   | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if  __name__ == '__main__':
+    main()


===============================================================================
446. Input. char of interest: 'urn 0
if _ _name__ =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if _ _name__ == '__main__':                   | if _name__ == '__main__':                     
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [24:4 - 24:5]
CST Stack:
    {Node ERROR (23, 3) - (23, 4)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if _name__ == '__main__':
-    main()+if _ _name__ == '__main__':
+    main()


===============================================================================
447. Input. char of interest: 'rn 0
if __ name__ ==':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __ name__ == '__main__':                   | if name__ == '__main__':                      
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [24:4 - 24:6]
CST Stack:
    {Node ERROR (23, 3) - (23, 5)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if name__ == '__main__':
-    main()+if __ name__ == '__main__':
+    main()


===============================================================================
448. Input. char of interest: 'n 0
if __n ame__ == ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __n ame__ == '__main__':                   | if ame__ == '__main__':                       
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [24:4 - 24:7]
CST Stack:
    {Node ERROR (23, 3) - (23, 6)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if ame__ == '__main__':
-    main()+if __n ame__ == '__main__':
+    main()


===============================================================================
449. Input. char of interest: ' 0
if __na me__ == '':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __na me__ == '__main__':                   | if me__ == '__main__':                        
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [24:4 - 24:8]
CST Stack:
    {Node ERROR (23, 3) - (23, 7)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if me__ == '__main__':
-    main()+if __na me__ == '__main__':
+    main()


===============================================================================
450. Input. char of interest: '0
if __nam e__ == '_':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __nam e__ == '__main__':                   | if __nam == '__main__':                       
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [24:10 - 24:13]
CST Stack:
    {Node ERROR (23, 9) - (23, 12)}
    {Node comparison_operator (23, 3) - (23, 26)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __nam == '__main__':
-    main()+if __nam e__ == '__main__':
+    main()


===============================================================================
451. Input. char of interest: '
if __name __ == '__':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name __ == '__main__':                   | if __name == '__main__':                      
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [24:11 - 24:13]
CST Stack:
    {Node ERROR (23, 10) - (23, 12)}
    {Node comparison_operator (23, 3) - (23, 26)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name == '__main__':
-    main()+if __name __ == '__main__':
+    main()


===============================================================================
452. Input. char of interest: 'if __name_ _ == '__m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name_ _ == '__main__':                   | if __name_ == '__main__':                     
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [24:12 - 24:13]
CST Stack:
    {Node ERROR (23, 11) - (23, 12)}
    {Node comparison_operator (23, 3) - (23, 26)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name_ == '__main__':
-    main()+if __name_ _ == '__main__':
+    main()


===============================================================================
454. Input. char of interest: ' __name__  == '__mai':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__  == '__main__':                   | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__  == '__main__':
+    main()


===============================================================================
455. Input. char of interest: '__name__ = = '__main':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ = = '__main__':                   | if '__main__':                                
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [24:4 - 24:16]
CST Stack:
    {Node ERROR (23, 3) - (23, 15)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if '__main__':
-    main()+if __name__ = = '__main__':
+    main()


===============================================================================
457. Input. char of interest: 'name__ ==  '__main__':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ ==  '__main__':                   | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__ ==  '__main__':
+    main()


===============================================================================
458. Input. char of interest: 'ame__ == ' __main__'':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == ' __main__':                   | if __name__ == ' __main__':                   
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == ' __main__':
-    main()+    main()


===============================================================================
459. Input. char of interest: 'me__ == '_ _main__':':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '_ _main__':                   | if __name__ == '_ _main__':                   
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '_ _main__':
-    main()+    main()


===============================================================================
460. Input. char of interest: 'e__ == '__ main__':
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__ main__':                   | if __name__ == '__ main__':                   
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__ main__':
-    main()+    main()


===============================================================================
461. Input. char of interest: '__ == '__m ain__':
 ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__m ain__':                   | if __name__ == '__m ain__':                   
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__m ain__':
-    main()+    main()


===============================================================================
462. Input. char of interest: '_ == '__ma in__':
  ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__ma in__':                   | if __name__ == '__ma in__':                   
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__ma in__':
-    main()+    main()


===============================================================================
463. Input. char of interest: ' == '__mai n__':
   ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__mai n__':                   | if __name__ == '__mai n__':                   
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__mai n__':
-    main()+    main()


===============================================================================
464. Input. char of interest: '== '__main __':
    ':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main __':                   | if __name__ == '__main __':                   
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main __':
-    main()+    main()


===============================================================================
465. Input. char of interest: '= '__main_ _':
    m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main_ _':                   | if __name__ == '__main_ _':                   
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main_ _':
-    main()+    main()


===============================================================================
466. Input. char of interest: ' '__main__ ':
    ma':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__ ':                   | if __name__ == '__main__ ':                   
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__ ':
-    main()+    main()


===============================================================================
467. Input. char of interest: ''__main__' :
    mai':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__' :                   | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__ == '__main__' :
+    main()


===============================================================================
468. Input. char of interest: '__main__': 
    main':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__ == '__main__': 
+    main()


===============================================================================
473. Input. char of interest: 'n__':
     main()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
     main()                                   |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+     main()


===============================================================================
474. Input. char of interest: '__':
    m ain()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    m ain()                                   |     ain()                                     
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [25:5 - 25:6]
CST Stack:
    {Node ERROR (24, 4) - (24, 5)}
    {Node if_statement (23, 0) - (24, 11)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    ain()+    m ain()


===============================================================================
475. Input. char of interest: '_':
    ma in()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    ma in()                                   |     ma in ()                                  
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    ma in ()+    ma in()


===============================================================================
476. Input. char of interest: '':
    mai n()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    mai n()                                   |     mai()                                     
                                              | 

1 Recoverable error detected:
SyntaxError: "invalid syntax" at [25:9 - 25:10]
CST Stack:
    {Node ERROR (24, 8) - (24, 9)}
    {Node call (24, 4) - (24, 11)}
    {Node expression_statement (24, 4) - (24, 11)}
    {Node block (24, 4) - (24, 11)}
    {Node if_statement (23, 0) - (24, 11)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    mai()+    mai n()


===============================================================================
477. Input. char of interest: ':
    main ()
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main ()                                   |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main ()


===============================================================================
478. Input. char of interest: '
    main( )
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main( )                                   |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main( )


===============================================================================
479. Input. char of interest: '    main() 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main() 


===============================================================================
