@generated

Errpy makes empty AST (weird) with input prior to and including:
1.->de<-

2.->def<-

17.->def fib(a: int) -><-

88.->
    inset = a in {0, 1}
    i<-

89.->    inset = a in {0, 1}
    if<-

132.->== 1:
        return 1
    eli<-

210.->rn fib(a - 1) + fib(a - 2)

de<-

211.->n fib(a - 1) + fib(a - 2)

def<-

241.-> somethingelse():
    pass

de<-

242.->somethingelse():
    pass

def<-

275.->rmat_a_string(astring: str) -><-

326.->join([x for x in astring])

de<-

327.->oin([x for x in astring])

def<-

337.-> x in astring])

def main() -><-

443.->mat_a_string()
    return 0
if<-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

0. Input. char of interest: ' garbage d':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
 garbage def fib(a: int) -> int:              | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 1:8]
CST Stack:
    {Node ERROR (0, 0) - (0, 7)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+ garbage def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
1. Input. char of interest: 'd garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
d garbage ef fib(a: int) -> int:              |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+d garbage ef fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
2. Input. char of interest: 'de garbage f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
de garbage f fib(a: int) -> int:              |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+de garbage f fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
4. Input. char of interest: 'def  garbage f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def  garbage fib(a: int) -> int:              | def garbage(a: int) -> int:                   
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:14 - 1:17]
CST Stack:
    {Node ERROR (0, 13) - (0, 16)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def garbage(a: int) -> int:
+def  garbage fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
5. Input. char of interest: 'def f garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def f garbage ib(a: int) -> int:              | def ib(a: int) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:5 - 1:14]
CST Stack:
    {Node ERROR (0, 4) - (0, 13)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def ib(a: int) -> int:
+def f garbage ib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
6. Input. char of interest: 'def fi garbage b':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fi garbage b(a: int) -> int:              | def fi(a: int) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:8 - 1:17]
CST Stack:
    {Node ERROR (0, 7) - (0, 16)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fi(a: int) -> int:
+def fi garbage b(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
7. Input. char of interest: 'def fib garbage (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib garbage (a: int) -> int:              | def garbage(a: int) -> int:                   
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:5 - 1:8]
CST Stack:
    {Node ERROR (0, 4) - (0, 7)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def garbage(a: int) -> int:
+def fib garbage (a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
8. Input. char of interest: 'def fib( garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib( garbage a: int) -> int:              | def fib(garbage: int) -> int:                 
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:18 - 1:19]
CST Stack:
    {Node ERROR (0, 17) - (0, 18)}
    {Node typed_parameter (0, 9) - (0, 23)}
    {Node parameters (0, 7) - (0, 24)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(garbage: int) -> int:
+def fib( garbage a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
9. Input. char of interest: 'def fib(a garbage :':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a garbage : int) -> int:              | def fib(garbage: int) -> int:                 
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:9 - 1:10]
CST Stack:
    {Node ERROR (0, 8) - (0, 9)}
    {Node parameters (0, 7) - (0, 24)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(garbage: int) -> int:
+def fib(a garbage : int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
11. Input. char of interest: 'ef fib(a:  garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a:  garbage int) -> int:              | def fib(a: garbage) -> int:                   
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:21 - 1:24]
CST Stack:
    {Node ERROR (0, 20) - (0, 23)}
    {Node parameters (0, 7) - (0, 24)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: garbage) -> int:
+def fib(a:  garbage int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
12. Input. char of interest: 'f fib(a: i garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: i garbage nt) -> int:              | def fib(a: nt) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:12 - 1:21]
CST Stack:
    {Node ERROR (0, 11) - (0, 20)}
    {Node typed_parameter (0, 8) - (0, 23)}
    {Node parameters (0, 7) - (0, 24)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: nt) -> int:
+def fib(a: i garbage nt) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
13. Input. char of interest: ' fib(a: in garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: in garbage t) -> int:              | def fib(a: in) -> int:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [1:15 - 1:24]
CST Stack:
    {Node ERROR (0, 14) - (0, 23)}
    {Node parameters (0, 7) - (0, 24)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "in" cannot be used as identifier at [1:12 - 1:14]
CST Stack:
    {Node identifier (0, 11) - (0, 13)}
    {Node type (0, 11) - (0, 13)}
    {Node typed_parameter (0, 8) - (0, 13)}
    {Node parameters (0, 7) - (0, 24)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: in) -> int:
+def fib(a: in garbage t) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
14. Input. char of interest: 'fib(a: int garbage )':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int garbage ) -> int:              | def fib(a: garbage) -> int:                   
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:12 - 1:15]
CST Stack:
    {Node ERROR (0, 11) - (0, 14)}
    {Node typed_parameter (0, 8) - (0, 22)}
    {Node parameters (0, 7) - (0, 24)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: garbage) -> int:
+def fib(a: int garbage ) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
16. Input. char of interest: 'b(a: int)  garbage -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int)  garbage -> int:              | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:18 - 1:25]
CST Stack:
    {Node ERROR (0, 17) - (0, 24)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> int:
+def fib(a: int)  garbage -> int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
17. Input. char of interest: '(a: int) - garbage >':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) - garbage > int:              |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) - garbage > int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
19. Input. char of interest: ': int) ->  garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) ->  garbage int:              | def fib(a: int) -> garbage:                   
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:29 - 1:32]
CST Stack:
    {Node ERROR (0, 28) - (0, 31)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> garbage:
+def fib(a: int) ->  garbage int:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
20. Input. char of interest: ' int) -> i garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> i garbage nt:              | def fib(a: int) -> nt:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:20 - 1:29]
CST Stack:
    {Node ERROR (0, 19) - (0, 28)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> nt:
+def fib(a: int) -> i garbage nt:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
21. Input. char of interest: 'int) -> in garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> in garbage t:              | def fib(a: int) -> in:                        
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [1:23 - 1:32]
CST Stack:
    {Node ERROR (0, 22) - (0, 31)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "in" cannot be used as identifier at [1:20 - 1:22]
CST Stack:
    {Node identifier (0, 19) - (0, 21)}
    {Node type (0, 19) - (0, 21)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: expected ':' (<unknown>, line 1)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> in:
+def fib(a: int) -> in garbage t:
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
22. Input. char of interest: 'nt) -> int garbage :':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int garbage :              | def fib(a: int) -> garbage:                   
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:20 - 1:23]
CST Stack:
    {Node ERROR (0, 19) - (0, 22)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,4 +1,4 @@
-def fib(a: int) -> garbage:
+def fib(a: int) -> int garbage :
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
23. Input. char of interest: 't) -> int: garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int: garbage               | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     garbage                                   
    (ba, bb) = tmp                            | tmp = (a, a)                                  
    inset = a in {0, 1}                       | (ba, bb) = tmp                                
    if a <= 2 or a == 1:                      | inset = a in {0, 1}                           
        return 1                              | if a <= 2 or a == 1:                          
    elif inset:                               |     return 1                                  
        return 1                              | elif inset:                                   
    else:                                     |     return 1                                  
        return fib(a - 1) + fib(a - 2)        | else:                                         
                                              |     return fib(a - 1) + fib(a - 2)            
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,14 +1,13 @@
-def fib(a: int) -> int:
-    garbage
-tmp = (a, a)
-(ba, bb) = tmp
-inset = a in {0, 1}
-if a <= 2 or a == 1:
-    return 1
-elif inset:
-    return 1
-else:
-    return fib(a - 1) + fib(a - 2)
+def fib(a: int) -> int: garbage 
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
28. Input. char of interest: ' int:
     garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
     garbage tmp = (a, a)                     |     tmp = (a, a)                              
    (ba, bb) = tmp                            | (ba, bb) = tmp                                
    inset = a in {0, 1}                       | inset = a in {0, 1}                           
    if a <= 2 or a == 1:                      | if a <= 2 or a == 1:                          
        return 1                              |     return 1                                  
    elif inset:                               | elif inset:                                   
        return 1                              |     return 1                                  
    else:                                     | else:                                         
        return fib(a - 1) + fib(a - 2)        |     return fib(a - 1) + fib(a - 2)            
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:6 - 2:13]
CST Stack:
    {Node ERROR (1, 5) - (1, 12)}
    {Node function_definition (0, 0) - (1, 25)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,13 +1,13 @@
 def fib(a: int) -> int:
-    tmp = (a, a)
-(ba, bb) = tmp
-inset = a in {0, 1}
-if a <= 2 or a == 1:
-    return 1
-elif inset:
-    return 1
-else:
-    return fib(a - 1) + fib(a - 2)
+     garbage tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
29. Input. char of interest: 'int:
    t garbage m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    t garbage mp = (a, a)                     |     mp = (a, a)                               
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:5 - 2:14]
CST Stack:
    {Node ERROR (1, 4) - (1, 13)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    mp = (a, a)
+    t garbage mp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
30. Input. char of interest: 'nt:
    tm garbage p':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tm garbage p = (a, a)                     |     p = (a, a)                                
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:5 - 2:15]
CST Stack:
    {Node ERROR (1, 4) - (1, 14)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    p = (a, a)
+    tm garbage p = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
32. Input. char of interest: ':
    tmp  garbage =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp  garbage = (a, a)                     |     garbage = (a, a)                          
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:5 - 2:8]
CST Stack:
    {Node ERROR (1, 4) - (1, 7)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    garbage = (a, a)
+    tmp  garbage = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
34. Input. char of interest: '    tmp =  garbage (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp =  garbage (a, a)                     |     tmp = garbage(a, a)                       
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = garbage(a, a)
+    tmp =  garbage (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
35. Input. char of interest: '   tmp = ( garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = ( garbage a, a)                     |     tmp = (garbage, a)                        
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:21 - 2:22]
CST Stack:
    {Node ERROR (1, 20) - (1, 21)}
    {Node tuple (1, 10) - (1, 25)}
    {Node assignment (1, 4) - (1, 25)}
    {Node expression_statement (1, 4) - (1, 25)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (garbage, a)
+    tmp = ( garbage a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
36. Input. char of interest: '  tmp = (a garbage ,':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a garbage , a)                     |     tmp = (garbage, a)                        
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:12 - 2:13]
CST Stack:
    {Node ERROR (1, 11) - (1, 12)}
    {Node tuple (1, 10) - (1, 25)}
    {Node assignment (1, 4) - (1, 25)}
    {Node expression_statement (1, 4) - (1, 25)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (garbage, a)
+    tmp = (a garbage , a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
38. Input. char of interest: 'tmp = (a,  garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a,  garbage a)                     |     tmp = (a, garbage)                        
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:24 - 2:25]
CST Stack:
    {Node ERROR (1, 23) - (1, 24)}
    {Node tuple (1, 10) - (1, 25)}
    {Node assignment (1, 4) - (1, 25)}
    {Node expression_statement (1, 4) - (1, 25)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, garbage)
+    tmp = (a,  garbage a)
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
39. Input. char of interest: 'mp = (a, a garbage )':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a garbage )                     |     tmp = (a, garbage)                        
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:15 - 2:16]
CST Stack:
    {Node ERROR (1, 14) - (1, 15)}
    {Node tuple (1, 10) - (1, 25)}
    {Node assignment (1, 4) - (1, 25)}
    {Node expression_statement (1, 4) - (1, 25)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = (a, garbage)
+    tmp = (a, a garbage )
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
40. Input. char of interest: 'p = (a, a) garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a) garbage                      |     tmp = garbage                             
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [2:11 - 2:17]
CST Stack:
    {Node ERROR (1, 10) - (1, 16)}
    {Node assignment (1, 4) - (1, 24)}
    {Node expression_statement (1, 4) - (1, 24)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,5 +1,5 @@
 def fib(a: int) -> int:
-    tmp = garbage
+    tmp = (a, a) garbage 
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
45. Input. char of interest: 'a, a)
     garbage (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
     garbage (ba, bb) = tmp                   |     tmp                                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:6 - 3:24]
CST Stack:
    {Node ERROR (2, 5) - (2, 23)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    tmp
+     garbage (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
46. Input. char of interest: ', a)
    ( garbage b':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    ( garbage ba, bb) = tmp                   |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:7 - 3:14]
CST Stack:
    {Node ERROR (2, 6) - (2, 13)}
    {Node tuple_pattern (2, 4) - (2, 21)}
    {Node assignment (2, 4) - (2, 27)}
    {Node expression_statement (2, 4) - (2, 27)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    ( garbage ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
47. Input. char of interest: ' a)
    (b garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (b garbage a, bb) = tmp                   |     (a, bb) = tmp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:6 - 3:15]
CST Stack:
    {Node ERROR (2, 5) - (2, 14)}
    {Node tuple_pattern (2, 4) - (2, 21)}
    {Node assignment (2, 4) - (2, 27)}
    {Node expression_statement (2, 4) - (2, 27)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (a, bb) = tmp
+    (b garbage a, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
48. Input. char of interest: 'a)
    (ba garbage ,':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba garbage , bb) = tmp                   |     (garbage, bb) = tmp                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:6 - 3:8]
CST Stack:
    {Node ERROR (2, 5) - (2, 7)}
    {Node tuple_pattern (2, 4) - (2, 21)}
    {Node assignment (2, 4) - (2, 27)}
    {Node expression_statement (2, 4) - (2, 27)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (garbage, bb) = tmp
+    (ba garbage , bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
50. Input. char of interest: '
    (ba,  garbage b':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba,  garbage bb) = tmp                   |     tmp                                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:5 - 3:24]
CST Stack:
    {Node ERROR (2, 4) - (2, 23)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    tmp
+    (ba,  garbage bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
51. Input. char of interest: '    (ba, b garbage b':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, b garbage b) = tmp                   |     tmp                                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:5 - 3:24]
CST Stack:
    {Node ERROR (2, 4) - (2, 23)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    tmp
+    (ba, b garbage b) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
52. Input. char of interest: '   (ba, bb garbage )':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb garbage ) = tmp                   |     tmp                                       
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:5 - 3:24]
CST Stack:
    {Node ERROR (2, 4) - (2, 23)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    tmp
+    (ba, bb garbage ) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
54. Input. char of interest: ' (ba, bb)  garbage =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb)  garbage = tmp                   |     (ba, bb)                                  
    inset = a in {0, 1}                       |     garbage = tmp                             
    if a <= 2 or a == 1:                      |     inset = a in {0, 1}                       
        return 1                              |     if a <= 2 or a == 1:                      
    elif inset:                               |         return 1                              
        return 1                              |     elif inset:                               
    else:                                     |         return 1                              
        return fib(a - 1) + fib(a - 2)        |     else:                                     
                                              |         return fib(a - 1) + fib(a - 2)        
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb)
-    garbage = tmp
+    (ba, bb)  garbage = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
56. Input. char of interest: 'ba, bb) =  garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) =  garbage tmp                   |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:17 - 3:24]
CST Stack:
    {Node ERROR (2, 16) - (2, 23)}
    {Node assignment (2, 4) - (2, 27)}
    {Node expression_statement (2, 4) - (2, 27)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = tmp
+    (ba, bb) =  garbage tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
57. Input. char of interest: 'a, bb) = t garbage m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = t garbage mp                   |     (ba, bb) = mp                             
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:16 - 3:25]
CST Stack:
    {Node ERROR (2, 15) - (2, 24)}
    {Node assignment (2, 4) - (2, 27)}
    {Node expression_statement (2, 4) - (2, 27)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = mp
+    (ba, bb) = t garbage mp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
58. Input. char of interest: ', bb) = tm garbage p':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tm garbage p                   |     (ba, bb) = p                              
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:16 - 3:26]
CST Stack:
    {Node ERROR (2, 15) - (2, 25)}
    {Node assignment (2, 4) - (2, 27)}
    {Node expression_statement (2, 4) - (2, 27)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = p
+    (ba, bb) = tm garbage p
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
59. Input. char of interest: ' bb) = tmp garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp garbage                    |     (ba, bb) = garbage                        
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [3:16 - 3:19]
CST Stack:
    {Node ERROR (2, 15) - (2, 18)}
    {Node assignment (2, 4) - (2, 26)}
    {Node expression_statement (2, 4) - (2, 26)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,6 +1,6 @@
 def fib(a: int) -> int:
     tmp = (a, a)
-    (ba, bb) = garbage
+    (ba, bb) = tmp garbage 
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
64. Input. char of interest: '= tmp
     garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
     garbage inset = a in {0, 1}              |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:6 - 4:13]
CST Stack:
    {Node ERROR (3, 5) - (3, 12)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+     garbage inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
65. Input. char of interest: ' tmp
    i garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    i garbage nset = a in {0, 1}              |     nset = a in {0, 1}                        
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:5 - 4:14]
CST Stack:
    {Node ERROR (3, 4) - (3, 13)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    nset = a in {0, 1}
+    i garbage nset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
66. Input. char of interest: 'tmp
    in garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    in garbage set = a in {0, 1}              |     set = a in {0, 1}                         
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:5 - 4:15]
CST Stack:
    {Node ERROR (3, 4) - (3, 14)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    set = a in {0, 1}
+    in garbage set = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
67. Input. char of interest: 'mp
    ins garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    ins garbage et = a in {0, 1}              |     et = a in {0, 1}                          
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:5 - 4:16]
CST Stack:
    {Node ERROR (3, 4) - (3, 15)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    et = a in {0, 1}
+    ins garbage et = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
68. Input. char of interest: 'p
    inse garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inse garbage t = a in {0, 1}              |     t = a in {0, 1}                           
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:5 - 4:17]
CST Stack:
    {Node ERROR (3, 4) - (3, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    t = a in {0, 1}
+    inse garbage t = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
70. Input. char of interest: '    inset  garbage =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset  garbage = a in {0, 1}              |     garbage = a in {0, 1}                     
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:5 - 4:10]
CST Stack:
    {Node ERROR (3, 4) - (3, 9)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    garbage = a in {0, 1}
+    inset  garbage = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
72. Input. char of interest: '  inset =  garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset =  garbage a in {0, 1}              |     inset = garbage in {0, 1}                 
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:22 - 4:23]
CST Stack:
    {Node ERROR (3, 21) - (3, 22)}
    {Node comparison_operator (3, 13) - (3, 32)}
    {Node assignment (3, 4) - (3, 32)}
    {Node expression_statement (3, 4) - (3, 32)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = garbage in {0, 1}
+    inset =  garbage a in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
74. Input. char of interest: 'inset = a  garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a  garbage in {0, 1}              |     inset = garbage in {0, 1}                 
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:13 - 4:14]
CST Stack:
    {Node ERROR (3, 12) - (3, 13)}
    {Node assignment (3, 4) - (3, 32)}
    {Node expression_statement (3, 4) - (3, 32)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = garbage in {0, 1}
+    inset = a  garbage in {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
75. Input. char of interest: 'nset = a i garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a i garbage n {0, 1}              |     inset = {0, 1}                            
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:13 - 4:26]
CST Stack:
    {Node ERROR (3, 12) - (3, 25)}
    {Node assignment (3, 4) - (3, 32)}
    {Node expression_statement (3, 4) - (3, 32)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = {0, 1}
+    inset = a i garbage n {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
77. Input. char of interest: 'et = a in  garbage {':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in  garbage {0, 1}              |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:19 - 4:26]
CST Stack:
    {Node ERROR (3, 18) - (3, 25)}
    {Node comparison_operator (3, 12) - (3, 32)}
    {Node assignment (3, 4) - (3, 32)}
    {Node expression_statement (3, 4) - (3, 32)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, 1}
+    inset = a in  garbage {0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
78. Input. char of interest: 't = a in { garbage 0':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in { garbage 0, 1}              |     inset = a in {garbage, 1}                 
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:28 - 4:29]
CST Stack:
    {Node ERROR (3, 27) - (3, 28)}
    {Node set (3, 17) - (3, 32)}
    {Node comparison_operator (3, 12) - (3, 32)}
    {Node assignment (3, 4) - (3, 32)}
    {Node expression_statement (3, 4) - (3, 32)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {garbage, 1}
+    inset = a in { garbage 0, 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
79. Input. char of interest: ' = a in {0 garbage ,':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0 garbage , 1}              |     inset = a in {garbage, 1}                 
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:19 - 4:20]
CST Stack:
    {Node ERROR (3, 18) - (3, 19)}
    {Node set (3, 17) - (3, 32)}
    {Node comparison_operator (3, 12) - (3, 32)}
    {Node assignment (3, 4) - (3, 32)}
    {Node expression_statement (3, 4) - (3, 32)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {garbage, 1}
+    inset = a in {0 garbage , 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
81. Input. char of interest: ' a in {0,  garbage 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0,  garbage 1}              |     inset = a in {0, garbage}                 
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:31 - 4:32]
CST Stack:
    {Node ERROR (3, 30) - (3, 31)}
    {Node set (3, 17) - (3, 32)}
    {Node comparison_operator (3, 12) - (3, 32)}
    {Node assignment (3, 4) - (3, 32)}
    {Node expression_statement (3, 4) - (3, 32)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, garbage}
+    inset = a in {0,  garbage 1}
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
82. Input. char of interest: 'a in {0, 1 garbage }':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1 garbage }              |     inset = a in {0, garbage}                 
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:22 - 4:23]
CST Stack:
    {Node ERROR (3, 21) - (3, 22)}
    {Node set (3, 17) - (3, 32)}
    {Node comparison_operator (3, 12) - (3, 32)}
    {Node assignment (3, 4) - (3, 32)}
    {Node expression_statement (3, 4) - (3, 32)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in {0, garbage}
+    inset = a in {0, 1 garbage }
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
83. Input. char of interest: ' in {0, 1} garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1} garbage               |     inset = a in garbage                      
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [4:18 - 4:24]
CST Stack:
    {Node ERROR (3, 17) - (3, 23)}
    {Node comparison_operator (3, 12) - (3, 31)}
    {Node assignment (3, 4) - (3, 31)}
    {Node expression_statement (3, 4) - (3, 31)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -1,7 +1,7 @@
 def fib(a: int) -> int:
     tmp = (a, a)
     (ba, bb) = tmp
-    inset = a in garbage
+    inset = a in {0, 1} garbage 
     if a <= 2 or a == 1:
         return 1
     elif inset:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
88. Input. char of interest: '0, 1}
     garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
     garbage if a <= 2 or a == 1:             | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+     garbage if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
89. Input. char of interest: ', 1}
    i garbage f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    i garbage f a <= 2 or a == 1:             | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    i garbage f a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
91. Input. char of interest: '1}
    if  garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if  garbage a <= 2 or a == 1:             |     if garbage <= 2 or a == 1:                
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:17 - 5:18]
CST Stack:
    {Node ERROR (4, 16) - (4, 17)}
    {Node comparison_operator (4, 8) - (4, 22)}
    {Node boolean_operator (4, 8) - (4, 32)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if garbage <= 2 or a == 1:
+    if  garbage a <= 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
93. Input. char of interest: '
    if a  garbage <':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a  garbage <= 2 or a == 1:             |     if garbage <= 2 or a == 1:                
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:8 - 5:9]
CST Stack:
    {Node ERROR (4, 7) - (4, 8)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if garbage <= 2 or a == 1:
+    if a  garbage <= 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
94. Input. char of interest: '    if a < garbage =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a < garbage = 2 or a == 1:             |     if a < garbage or a == 1:                 
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:20 - 5:23]
CST Stack:
    {Node ERROR (4, 19) - (4, 22)}
    {Node boolean_operator (4, 7) - (4, 32)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a < garbage or a == 1:
+    if a < garbage = 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
96. Input. char of interest: '  if a <=  garbage 2':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <=  garbage 2 or a == 1:             |     if a <= garbage or a == 1:                
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:22 - 5:23]
CST Stack:
    {Node ERROR (4, 21) - (4, 22)}
    {Node boolean_operator (4, 7) - (4, 32)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= garbage or a == 1:
+    if a <=  garbage 2 or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
98. Input. char of interest: 'if a <= 2  garbage o':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2  garbage or a == 1:             |     if a <= garbage or a == 1:                
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:13 - 5:14]
CST Stack:
    {Node ERROR (4, 12) - (4, 13)}
    {Node comparison_operator (4, 7) - (4, 22)}
    {Node boolean_operator (4, 7) - (4, 32)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= garbage or a == 1:
+    if a <= 2  garbage or a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
99. Input. char of interest: 'f a <= 2 o garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 o garbage r a == 1:             |     if a <= a == 1:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:13 - 5:26]
CST Stack:
    {Node ERROR (4, 12) - (4, 25)}
    {Node comparison_operator (4, 7) - (4, 32)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= a == 1:
+    if a <= 2 o garbage r a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
101. Input. char of interest: 'a <= 2 or  garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or  garbage a == 1:             |     if a <= 2 or garbage == 1:                
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:27 - 5:28]
CST Stack:
    {Node ERROR (4, 26) - (4, 27)}
    {Node comparison_operator (4, 18) - (4, 32)}
    {Node boolean_operator (4, 7) - (4, 32)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or garbage == 1:
+    if a <= 2 or  garbage a == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
103. Input. char of interest: '<= 2 or a  garbage =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a  garbage == 1:             |     if a <= 2 or garbage == 1:                
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:18 - 5:19]
CST Stack:
    {Node ERROR (4, 17) - (4, 18)}
    {Node boolean_operator (4, 7) - (4, 32)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or garbage == 1:
+    if a <= 2 or a  garbage == 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
104. Input. char of interest: '= 2 or a = garbage =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a = garbage = 1:             |     if a <= 2 or a:                           
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:20 - 5:33]
CST Stack:
    {Node ERROR (4, 19) - (4, 32)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a:
+    if a <= 2 or a = garbage = 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
106. Input. char of interest: '2 or a ==  garbage 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a ==  garbage 1:             |     if a <= 2 or a == garbage:                
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:32 - 5:33]
CST Stack:
    {Node ERROR (4, 31) - (4, 32)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == garbage:
+    if a <= 2 or a ==  garbage 1:
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
107. Input. char of interest: ' or a == 1 garbage :':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1 garbage :             |     if a <= 2 or a == garbage:                
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [5:23 - 5:24]
CST Stack:
    {Node ERROR (4, 22) - (4, 23)}
    {Node comparison_operator (4, 17) - (4, 31)}
    {Node boolean_operator (4, 7) - (4, 31)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,7 +2,7 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == garbage:
+    if a <= 2 or a == 1 garbage :
         return 1
     elif inset:
         return 1
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
108. Input. char of interest: 'or a == 1: garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1: garbage              |     if a <= 2 or a == 1:                      
        return 1                              |         garbage                               
    elif inset:                               |     return 1                                  
        return 1                              |     inset: 1                                  
    else:                                     |     else: return(a - 1) + fib(a - 2)          
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: invalid syntax at [7:5 - 7:9]
CST Stack:
    {Node ERROR (6, 4) - (6, 8)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 9) - (7, 16)}
    {Node expression_statement (6, 9) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -2,11 +2,12 @@
     tmp = (a, a)
     (ba, bb) = tmp
     inset = a in {0, 1}
-    if a <= 2 or a == 1:
-        garbage
-    return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    if a <= 2 or a == 1: garbage 
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
117. Input. char of interest: ':
         garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
         garbage return 1                     |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:10 - 6:17]
CST Stack:
    {Node ERROR (5, 9) - (5, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return 1
+         garbage return 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
118. Input. char of interest: '
        r garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        r garbage eturn 1                     |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:24]
CST Stack:
    {Node ERROR (5, 8) - (5, 23)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        r garbage eturn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
119. Input. char of interest: '        re garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        re garbage turn 1                     |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:24]
CST Stack:
    {Node ERROR (5, 8) - (5, 23)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        re garbage turn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
120. Input. char of interest: '       ret garbage u':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        ret garbage urn 1                     |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:24]
CST Stack:
    {Node ERROR (5, 8) - (5, 23)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        ret garbage urn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
121. Input. char of interest: '      retu garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        retu garbage rn 1                     |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:24]
CST Stack:
    {Node ERROR (5, 8) - (5, 23)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        retu garbage rn 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
122. Input. char of interest: '     retur garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        retur garbage n 1                     |         1                                     
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:9 - 6:24]
CST Stack:
    {Node ERROR (5, 8) - (5, 23)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        1
+        retur garbage n 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
124. Input. char of interest: '   return  garbage 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return  garbage 1                     |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:17 - 6:24]
CST Stack:
    {Node ERROR (5, 16) - (5, 23)}
    {Node return_statement (5, 8) - (5, 25)}
    {Node block (5, 8) - (5, 25)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return 1
+        return  garbage 1
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
125. Input. char of interest: '  return 1 garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1 garbage                      |         return garbage                        
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [6:16 - 6:17]
CST Stack:
    {Node ERROR (5, 15) - (5, 16)}
    {Node return_statement (5, 8) - (5, 24)}
    {Node block (5, 8) - (5, 24)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -3,7 +3,7 @@
     (ba, bb) = tmp
     inset = a in {0, 1}
     if a <= 2 or a == 1:
-        return garbage
+        return 1 garbage 
     elif inset:
         return 1
     else:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
130. Input. char of interest: 'urn 1
     garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
     garbage elif inset:                      |     garbage: 1                                
        return 1                              |     else: return(a - 1) + fib(a - 2)          
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: invalid syntax at [7:14 - 7:24]
CST Stack:
    {Node ERROR (6, 13) - (6, 23)}
    {Node assignment (6, 5) - (7, 16)}
    {Node expression_statement (6, 5) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 5) - (7, 16)}
    {Node expression_statement (6, 5) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    garbage: 1
-    else: return(a - 1) + fib(a - 2)
+     garbage elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
131. Input. char of interest: 'rn 1
    e garbage l':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    e garbage lif inset:                      |     inset: 1                                  
        return 1                              |     else: return(a - 1) + fib(a - 2)          
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: invalid syntax at [7:5 - 7:18]
CST Stack:
    {Node ERROR (6, 4) - (6, 17)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 18) - (7, 16)}
    {Node expression_statement (6, 18) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    e garbage lif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
132. Input. char of interest: 'n 1
    el garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    el garbage if inset:                      | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    el garbage if inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
133. Input. char of interest: ' 1
    eli garbage f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    eli garbage f inset:                      |     inset: 1                                  
        return 1                              |     else: return(a - 1) + fib(a - 2)          
    else:                                     |                                               
        return fib(a - 1) + fib(a - 2)        | def somethingelse():                          
                                              |     pass                                      
def somethingelse():                          |                                               
    pass                                      | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def main() -> int:                            
                                              |     """DOC_STRING"""                          
def main() -> int:                            |     somethingelse()                           
    """DOC_STRING"""                          |     fib(12)                                   
    somethingelse()                           |     astring = format_a_string()               
    fib(12)                                   |     return 0                                  
    astring = format_a_string()               | if __name__ == '__main__':                    
    return 0                                  |     main()                                    
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

5 Recoverable errors detected:
SyntaxError: invalid syntax at [7:5 - 7:18]
CST Stack:
    {Node ERROR (6, 4) - (6, 17)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [8:9 - 8:15]
CST Stack:
    {Node ERROR (7, 8) - (7, 14)}
    {Node assignment (6, 18) - (7, 16)}
    {Node expression_statement (6, 18) - (7, 16)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 8)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,8 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    inset: 1
-    else: return(a - 1) + fib(a - 2)
+    eli garbage f inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -20,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
135. Input. char of interest: '
    elif  garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif  garbage inset:                      |     elif garbage:                             
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [7:19 - 7:24]
CST Stack:
    {Node ERROR (6, 18) - (6, 23)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif garbage:
+    elif  garbage inset:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
136. Input. char of interest: '    elif i garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif i garbage nset:                      |     elif nset:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [7:10 - 7:19]
CST Stack:
    {Node ERROR (6, 9) - (6, 18)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif nset:
+    elif i garbage nset:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
137. Input. char of interest: '   elif in garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif in garbage set:                      |     elif set:                                 
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [7:10 - 7:20]
CST Stack:
    {Node ERROR (6, 9) - (6, 19)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif set:
+    elif in garbage set:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
138. Input. char of interest: '  elif ins garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif ins garbage et:                      |     elif ins:                                 
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [7:14 - 7:24]
CST Stack:
    {Node ERROR (6, 13) - (6, 23)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif ins:
+    elif ins garbage et:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
139. Input. char of interest: ' elif inse garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inse garbage t:                      |     elif inse:                                
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [7:15 - 7:24]
CST Stack:
    {Node ERROR (6, 14) - (6, 23)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inse:
+    elif inse garbage t:
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
140. Input. char of interest: 'elif inset garbage :':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset garbage :                      |     elif garbage:                             
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [7:10 - 7:15]
CST Stack:
    {Node ERROR (6, 9) - (6, 14)}
    {Node elif_clause (6, 4) - (7, 16)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,7 +4,7 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif garbage:
+    elif inset garbage :
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
141. Input. char of interest: 'lif inset: garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset: garbage                       |     elif inset:                               
        return 1                              |         garbage                               
    else:                                     |     return 1                                  
        return fib(a - 1) + fib(a - 2)        |     else: return(a - 1) + fib(a - 2)          
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

3 Recoverable errors detected:
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "else" cannot be used as identifier at [9:5 - 9:9]
CST Stack:
    {Node identifier (8, 4) - (8, 8)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 10)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -4,10 +4,10 @@
     inset = a in {0, 1}
     if a <= 2 or a == 1:
         return 1
-    elif inset:
-        garbage
-    return 1
-    else: return(a - 1) + fib(a - 2)
+    elif inset: garbage 
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
150. Input. char of interest: ':
         garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
         garbage return 1                     |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:10 - 8:17]
CST Stack:
    {Node ERROR (7, 9) - (7, 16)}
    {Node elif_clause (6, 4) - (7, 25)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return 1
+         garbage return 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
151. Input. char of interest: '
        r garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        r garbage eturn 1                     |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:24]
CST Stack:
    {Node ERROR (7, 8) - (7, 23)}
    {Node elif_clause (6, 4) - (7, 25)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        r garbage eturn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
152. Input. char of interest: '        re garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        re garbage turn 1                     |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:24]
CST Stack:
    {Node ERROR (7, 8) - (7, 23)}
    {Node elif_clause (6, 4) - (7, 25)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        re garbage turn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
153. Input. char of interest: '       ret garbage u':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        ret garbage urn 1                     |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:24]
CST Stack:
    {Node ERROR (7, 8) - (7, 23)}
    {Node elif_clause (6, 4) - (7, 25)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        ret garbage urn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
154. Input. char of interest: '      retu garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        retu garbage rn 1                     |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:24]
CST Stack:
    {Node ERROR (7, 8) - (7, 23)}
    {Node elif_clause (6, 4) - (7, 25)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        retu garbage rn 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
155. Input. char of interest: '     retur garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        retur garbage n 1                     |         1                                     
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:9 - 8:24]
CST Stack:
    {Node ERROR (7, 8) - (7, 23)}
    {Node elif_clause (6, 4) - (7, 25)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        1
+        retur garbage n 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
157. Input. char of interest: '   return  garbage 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return  garbage 1                     |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:17 - 8:24]
CST Stack:
    {Node ERROR (7, 16) - (7, 23)}
    {Node return_statement (7, 8) - (7, 25)}
    {Node block (7, 8) - (7, 25)}
    {Node elif_clause (6, 4) - (7, 25)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return 1
+        return  garbage 1
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
158. Input. char of interest: '  return 1 garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1 garbage                      |         return garbage                        
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [8:16 - 8:17]
CST Stack:
    {Node ERROR (7, 15) - (7, 16)}
    {Node return_statement (7, 8) - (7, 24)}
    {Node block (7, 8) - (7, 24)}
    {Node elif_clause (6, 4) - (7, 24)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -5,7 +5,7 @@
     if a <= 2 or a == 1:
         return 1
     elif inset:
-        return garbage
+        return 1 garbage 
     else:
         return fib(a - 1) + fib(a - 2)
 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
163. Input. char of interest: 'urn 1
     garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
     garbage else:                            |     garbage: return(a - 1) + fib(a - 2)       
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

3 Recoverable errors detected:
SyntaxError: invalid syntax at [9:14 - 9:18]
CST Stack:
    {Node ERROR (8, 13) - (8, 17)}
    {Node assignment (8, 5) - (9, 38)}
    {Node expression_statement (8, 5) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 5) - (9, 38)}
    {Node expression_statement (8, 5) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 5) - (9, 38)}
    {Node expression_statement (8, 5) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    garbage: return(a - 1) + fib(a - 2)
+     garbage else:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
164. Input. char of interest: 'rn 1
    e garbage l':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    e garbage lse:                            |     lse: return(a - 1) + fib(a - 2)           
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

3 Recoverable errors detected:
SyntaxError: invalid syntax at [9:5 - 9:14]
CST Stack:
    {Node ERROR (8, 4) - (8, 13)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 14) - (9, 38)}
    {Node expression_statement (8, 14) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 14) - (9, 38)}
    {Node expression_statement (8, 14) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    lse: return(a - 1) + fib(a - 2)
+    e garbage lse:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
165. Input. char of interest: 'n 1
    el garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    el garbage se:                            |     se: return(a - 1) + fib(a - 2)            
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

3 Recoverable errors detected:
SyntaxError: invalid syntax at [9:5 - 9:15]
CST Stack:
    {Node ERROR (8, 4) - (8, 14)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 15) - (9, 38)}
    {Node expression_statement (8, 15) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 15) - (9, 38)}
    {Node expression_statement (8, 15) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    se: return(a - 1) + fib(a - 2)
+    el garbage se:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
166. Input. char of interest: ' 1
    els garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    els garbage e:                            |     els: return(a - 1) + fib(a - 2)           
        return fib(a - 1) + fib(a - 2)        |                                               
                                              | def somethingelse():                          
def somethingelse():                          |     pass                                      
    pass                                      |                                               
                                              | def format_a_string(astring: str) -> str:     
def format_a_string(astring: str) -> str:     |     return ','.join([x for x in astring])     
    return ','.join([x for x in astring])     |                                               
                                              | def main() -> int:                            
def main() -> int:                            |     """DOC_STRING"""                          
    """DOC_STRING"""                          |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

3 Recoverable errors detected:
SyntaxError: invalid syntax at [9:9 - 9:18]
CST Stack:
    {Node ERROR (8, 8) - (8, 17)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "return" cannot be used as identifier at [10:9 - 10:15]
CST Stack:
    {Node identifier (9, 8) - (9, 14)}
    {Node call (9, 8) - (9, 25)}
    {Node binary_operator (9, 8) - (9, 38)}
    {Node type (9, 8) - (9, 38)}
    {Node assignment (8, 4) - (9, 38)}
    {Node expression_statement (8, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: invalid syntax (<unknown>, line 9)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,8 @@
         return 1
     elif inset:
         return 1
-    els: return(a - 1) + fib(a - 2)
+    els garbage e:
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -21,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
167. Input. char of interest: '1
    else garbage :':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else garbage :                            |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [9:10 - 9:17]
CST Stack:
    {Node ERROR (8, 9) - (8, 16)}
    {Node else_clause (8, 4) - (9, 38)}
    {Node if_statement (4, 4) - (9, 38)}
    {Node block (1, 4) - (9, 38)}
    {Node function_definition (0, 0) - (9, 38)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,7 +6,7 @@
         return 1
     elif inset:
         return 1
-    else:
+    else garbage :
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
168. Input. char of interest: '
    else: garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else: garbage                             |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         garbage                               
                                              |     return fib(a - 1) + fib(a - 2)            
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -6,9 +6,8 @@
         return 1
     elif inset:
         return 1
-    else:
-        garbage
-    return fib(a - 1) + fib(a - 2)
+    else: garbage 
+        return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
177. Input. char of interest: ':
         garbage r':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
         garbage return fib(a - 1) + fib(a - 2)     |         return fib(a - 1) + fib(a - 2)              
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:10 - 10:17]
CST Stack:
    {Node ERROR (9, 9) - (9, 16)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+         garbage return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
178. Input. char of interest: '
        r garbage e':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        r garbage eturn fib(a - 1) + fib(a - 2)     |         fib(a - 1) + fib(a - 2)                     
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:9 - 10:24]
CST Stack:
    {Node ERROR (9, 8) - (9, 23)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        fib(a - 1) + fib(a - 2)
+        r garbage eturn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
179. Input. char of interest: '        re garbage t':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        re garbage turn fib(a - 1) + fib(a - 2)     |         fib(a - 1) + fib(a - 2)                     
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:9 - 10:24]
CST Stack:
    {Node ERROR (9, 8) - (9, 23)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        fib(a - 1) + fib(a - 2)
+        re garbage turn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
180. Input. char of interest: '       ret garbage u':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        ret garbage urn fib(a - 1) + fib(a - 2)     |         fib(a - 1) + fib(a - 2)                     
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:9 - 10:24]
CST Stack:
    {Node ERROR (9, 8) - (9, 23)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        fib(a - 1) + fib(a - 2)
+        ret garbage urn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
181. Input. char of interest: '      retu garbage r':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        retu garbage rn fib(a - 1) + fib(a - 2)     |         retu(a - 1) + fib(a - 2)                    
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:14 - 10:28]
CST Stack:
    {Node ERROR (9, 13) - (9, 27)}
    {Node call (9, 8) - (9, 34)}
    {Node binary_operator (9, 8) - (9, 47)}
    {Node expression_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        retu(a - 1) + fib(a - 2)
+        retu garbage rn fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
182. Input. char of interest: '     retur garbage n':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        retur garbage n fib(a - 1) + fib(a - 2)     |         retur(a - 1) + fib(a - 2)                   
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:15 - 10:28]
CST Stack:
    {Node ERROR (9, 14) - (9, 27)}
    {Node call (9, 8) - (9, 34)}
    {Node binary_operator (9, 8) - (9, 47)}
    {Node expression_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        retur(a - 1) + fib(a - 2)
+        retur garbage n fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
184. Input. char of interest: '   return  garbage f':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return  garbage fib(a - 1) + fib(a - 2)     |         return garbage(a - 1) + fib(a - 2)          
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:25 - 10:28]
CST Stack:
    {Node ERROR (9, 24) - (9, 27)}
    {Node call (9, 16) - (9, 34)}
    {Node binary_operator (9, 16) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return garbage(a - 1) + fib(a - 2)
+        return  garbage fib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
185. Input. char of interest: '  return f garbage i':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return f garbage ib(a - 1) + fib(a - 2)     |         return ib(a - 1) + fib(a - 2)               
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:16 - 10:25]
CST Stack:
    {Node ERROR (9, 15) - (9, 24)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return ib(a - 1) + fib(a - 2)
+        return f garbage ib(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
186. Input. char of interest: ' return fi garbage b':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fi garbage b(a - 1) + fib(a - 2)     |         return fi(a - 1) + fib(a - 2)               
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:19 - 10:28]
CST Stack:
    {Node ERROR (9, 18) - (9, 27)}
    {Node call (9, 15) - (9, 34)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fi(a - 1) + fib(a - 2)
+        return fi garbage b(a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
187. Input. char of interest: 'return fib garbage (':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib garbage (a - 1) + fib(a - 2)     |         return garbage(a - 1) + fib(a - 2)          
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:16 - 10:19]
CST Stack:
    {Node ERROR (9, 15) - (9, 18)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return garbage(a - 1) + fib(a - 2)
+        return fib garbage (a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
188. Input. char of interest: 'eturn fib( garbage a':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib( garbage a - 1) + fib(a - 2)     |         return fib(garbage - 1) + fib(a - 2)        
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:29 - 10:30]
CST Stack:
    {Node ERROR (9, 28) - (9, 29)}
    {Node binary_operator (9, 20) - (9, 33)}
    {Node argument_list (9, 18) - (9, 34)}
    {Node call (9, 15) - (9, 34)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(garbage - 1) + fib(a - 2)
+        return fib( garbage a - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
190. Input. char of interest: 'urn fib(a  garbage -':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a  garbage - 1) + fib(a - 2)     |         return fib(garbage - 1) + fib(a - 2)        
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:20 - 10:21]
CST Stack:
    {Node ERROR (9, 19) - (9, 20)}
    {Node argument_list (9, 18) - (9, 34)}
    {Node call (9, 15) - (9, 34)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(garbage - 1) + fib(a - 2)
+        return fib(a  garbage - 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
192. Input. char of interest: 'n fib(a -  garbage 1':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a -  garbage 1) + fib(a - 2)     |         return fib(a - garbage) + fib(a - 2)        
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:33 - 10:34]
CST Stack:
    {Node ERROR (9, 32) - (9, 33)}
    {Node argument_list (9, 18) - (9, 34)}
    {Node call (9, 15) - (9, 34)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - garbage) + fib(a - 2)
+        return fib(a -  garbage 1) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
193. Input. char of interest: ' fib(a - 1 garbage )':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1 garbage ) + fib(a - 2)     |         return fib(a - garbage) + fib(a - 2)        
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:24 - 10:25]
CST Stack:
    {Node ERROR (9, 23) - (9, 24)}
    {Node binary_operator (9, 19) - (9, 32)}
    {Node argument_list (9, 18) - (9, 34)}
    {Node call (9, 15) - (9, 34)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - garbage) + fib(a - 2)
+        return fib(a - 1 garbage ) + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
195. Input. char of interest: 'ib(a - 1)  garbage +':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1)  garbage + fib(a - 2)     |         return fib(a - 1) + fib(a - 2)              
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:28 - 10:35]
CST Stack:
    {Node ERROR (9, 27) - (9, 34)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
+        return fib(a - 1)  garbage + fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
197. Input. char of interest: '(a - 1) +  garbage f':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1) +  garbage fib(a - 2)     |         return fib(a - 1) + garbage(a - 2)          
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:38 - 10:41]
CST Stack:
    {Node ERROR (9, 37) - (9, 40)}
    {Node call (9, 29) - (9, 47)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + garbage(a - 2)
+        return fib(a - 1) +  garbage fib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
198. Input. char of interest: 'a - 1) + f garbage i':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1) + f garbage ib(a - 2)     |         return fib(a - 1) + ib(a - 2)               
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:29 - 10:38]
CST Stack:
    {Node ERROR (9, 28) - (9, 37)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + ib(a - 2)
+        return fib(a - 1) + f garbage ib(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
199. Input. char of interest: ' - 1) + fi garbage b':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1) + fi garbage b(a - 2)     |         return fib(a - 1) + fi(a - 2)               
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:32 - 10:41]
CST Stack:
    {Node ERROR (9, 31) - (9, 40)}
    {Node call (9, 28) - (9, 47)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fi(a - 2)
+        return fib(a - 1) + fi garbage b(a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
200. Input. char of interest: '- 1) + fib garbage (':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1) + fib garbage (a - 2)     |         return fib(a - 1) + garbage(a - 2)          
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:29 - 10:32]
CST Stack:
    {Node ERROR (9, 28) - (9, 31)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + garbage(a - 2)
+        return fib(a - 1) + fib garbage (a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
201. Input. char of interest: ' 1) + fib( garbage a':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1) + fib( garbage a - 2)     |         return fib(a - 1) + fib(garbage - 2)        
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:42 - 10:43]
CST Stack:
    {Node ERROR (9, 41) - (9, 42)}
    {Node binary_operator (9, 33) - (9, 46)}
    {Node argument_list (9, 31) - (9, 47)}
    {Node call (9, 28) - (9, 47)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(garbage - 2)
+        return fib(a - 1) + fib( garbage a - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
203. Input. char of interest: ') + fib(a  garbage -':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1) + fib(a  garbage - 2)     |         return fib(a - 1) + fib(garbage - 2)        
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:33 - 10:34]
CST Stack:
    {Node ERROR (9, 32) - (9, 33)}
    {Node argument_list (9, 31) - (9, 47)}
    {Node call (9, 28) - (9, 47)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(garbage - 2)
+        return fib(a - 1) + fib(a  garbage - 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
205. Input. char of interest: '+ fib(a -  garbage 2':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1) + fib(a -  garbage 2)     |         return fib(a - 1) + fib(a - garbage)        
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:46 - 10:47]
CST Stack:
    {Node ERROR (9, 45) - (9, 46)}
    {Node argument_list (9, 31) - (9, 47)}
    {Node call (9, 28) - (9, 47)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - garbage)
+        return fib(a - 1) + fib(a -  garbage 2)
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
206. Input. char of interest: ' fib(a - 2 garbage )':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1) + fib(a - 2 garbage )     |         return fib(a - 1) + fib(a - garbage)        
                                                    |                                                     
def somethingelse():                                | def somethingelse():                                
    pass                                            |     pass                                            
                                                    |                                                     
def format_a_string(astring: str) -> str:           | def format_a_string(astring: str) -> str:           
    return ','.join([x for x in astring])           |     return ','.join([x for x in astring])           
                                                    |                                                     
def main() -> int:                                  | def main() -> int:                                  
    """DOC_STRING"""                                |     """DOC_STRING"""                                
    somethingelse()                                 |     somethingelse()                                 
    fib(12)                                         |     fib(12)                                         
    astring = format_a_string()                     |     astring = format_a_string()                     
    return 0                                        |     return 0                                        
if __name__ == '__main__':                          | if __name__ == '__main__':                          
    main()                                          |     main()                                          
                                                    | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [10:37 - 10:38]
CST Stack:
    {Node ERROR (9, 36) - (9, 37)}
    {Node binary_operator (9, 32) - (9, 45)}
    {Node argument_list (9, 31) - (9, 47)}
    {Node call (9, 28) - (9, 47)}
    {Node binary_operator (9, 15) - (9, 47)}
    {Node return_statement (9, 8) - (9, 47)}
    {Node block (9, 8) - (9, 47)}
    {Node else_clause (8, 4) - (9, 47)}
    {Node if_statement (4, 4) - (9, 47)}
    {Node block (1, 4) - (9, 47)}
    {Node function_definition (0, 0) - (9, 47)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,7 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - garbage)
+        return fib(a - 1) + fib(a - 2 garbage )
 
 def somethingelse():
     pass
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
207. Input. char of interest: 'fib(a - 2) garbage 
':

Input:                                              | ERRPY Recovered AST:                                
----------------------------------------------------| ----------------------------------------------------
def fib(a: int) -> int:                             | def fib(a: int) -> int:                             
    tmp = (a, a)                                    |     tmp = (a, a)                                    
    (ba, bb) = tmp                                  |     (ba, bb) = tmp                                  
    inset = a in {0, 1}                             |     inset = a in {0, 1}                             
    if a <= 2 or a == 1:                            |     if a <= 2 or a == 1:                            
        return 1                                    |         return 1                                    
    elif inset:                                     |     elif inset:                                     
        return 1                                    |         return 1                                    
    else:                                           |     else:                                           
        return fib(a - 1) + fib(a - 2) garbage      |         return fib(a - 1) + fib(a - 2)              
                                                    |         garbage                                     
def somethingelse():                                |                                                     
    pass                                            | def somethingelse():                                
                                                    |     pass                                            
def format_a_string(astring: str) -> str:           |                                                     
    return ','.join([x for x in astring])           | def format_a_string(astring: str) -> str:           
                                                    |     return ','.join([x for x in astring])           
def main() -> int:                                  |                                                     
    """DOC_STRING"""                                | def main() -> int:                                  
    somethingelse()                                 |     """DOC_STRING"""                                
    fib(12)                                         |     somethingelse()                                 
    astring = format_a_string()                     |     fib(12)                                         
    return 0                                        |     astring = format_a_string()                     
if __name__ == '__main__':                          |     return 0                                        
    main()                                          | if __name__ == '__main__':                          
                                                    |     main()                                          


ERRPY Recovered AST diff:
--- 
+++ 
@@ -7,8 +7,7 @@
     elif inset:
         return 1
     else:
-        return fib(a - 1) + fib(a - 2)
-        garbage
+        return fib(a - 1) + fib(a - 2) garbage 
 
 def somethingelse():
     pass
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
208. Input. char of interest: 'ib(a - 2)
 garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
 garbage                                      | garbage                                       
def somethingelse():                          |                                               
    pass                                      | def somethingelse():                          
                                              |     pass                                      
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -8,8 +8,7 @@
         return 1
     else:
         return fib(a - 1) + fib(a - 2)
-garbage
-
+ garbage 
 def somethingelse():
     pass
 
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
209. Input. char of interest: 'b(a - 2)

 garbage d':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
 garbage def somethingelse():                 | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:2 - 12:9]
CST Stack:
    {Node ERROR (11, 1) - (11, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+ garbage def somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
210. Input. char of interest: '(a - 2)

d garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
d garbage ef somethingelse():                 | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+d garbage ef somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
211. Input. char of interest: 'a - 2)

de garbage f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
de garbage f somethingelse():                 | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+de garbage f somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
213. Input. char of interest: '- 2)

def  garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def  garbage somethingelse():                 | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:6 - 12:13]
CST Stack:
    {Node ERROR (11, 5) - (11, 12)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def  garbage somethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
214. Input. char of interest: ' 2)

def s garbage o':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def s garbage omethingelse():                 | def omethingelse():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:5 - 12:14]
CST Stack:
    {Node ERROR (11, 4) - (11, 13)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def omethingelse():
+def s garbage omethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
215. Input. char of interest: '2)

def so garbage m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def so garbage methingelse():                 | def methingelse():                            
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:5 - 12:15]
CST Stack:
    {Node ERROR (11, 4) - (11, 14)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def methingelse():
+def so garbage methingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
216. Input. char of interest: ')

def som garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def som garbage ethingelse():                 | def ethingelse():                             
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:5 - 12:16]
CST Stack:
    {Node ERROR (11, 4) - (11, 15)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def ethingelse():
+def som garbage ethingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
217. Input. char of interest: '

def some garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def some garbage thingelse():                 | def thingelse():                              
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:5 - 12:17]
CST Stack:
    {Node ERROR (11, 4) - (11, 16)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def thingelse():
+def some garbage thingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
218. Input. char of interest: '
def somet garbage h':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somet garbage hingelse():                 | def hingelse():                               
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:5 - 12:18]
CST Stack:
    {Node ERROR (11, 4) - (11, 17)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def hingelse():
+def somet garbage hingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
219. Input. char of interest: 'def someth garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def someth garbage ingelse():                 | def ingelse():                                
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:5 - 12:19]
CST Stack:
    {Node ERROR (11, 4) - (11, 18)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def ingelse():
+def someth garbage ingelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
220. Input. char of interest: 'ef somethi garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethi garbage ngelse():                 | def somethi():                                
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:13 - 12:27]
CST Stack:
    {Node ERROR (11, 12) - (11, 26)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethi():
+def somethi garbage ngelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
221. Input. char of interest: 'f somethin garbage g':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethin garbage gelse():                 | def somethin():                               
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:14 - 12:27]
CST Stack:
    {Node ERROR (11, 13) - (11, 26)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethin():
+def somethin garbage gelse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
222. Input. char of interest: ' something garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def something garbage else():                 | def something():                              
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:15 - 12:27]
CST Stack:
    {Node ERROR (11, 14) - (11, 26)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def something():
+def something garbage else():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
223. Input. char of interest: 'somethinge garbage l':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethinge garbage lse():                 | def somethinge():                             
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:16 - 12:27]
CST Stack:
    {Node ERROR (11, 15) - (11, 26)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethinge():
+def somethinge garbage lse():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
224. Input. char of interest: 'omethingel garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingel garbage se():                 | def somethingel():                            
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:17 - 12:27]
CST Stack:
    {Node ERROR (11, 16) - (11, 26)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingel():
+def somethingel garbage se():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
225. Input. char of interest: 'methingels garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingels garbage e():                 | def somethingels():                           
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:18 - 12:27]
CST Stack:
    {Node ERROR (11, 17) - (11, 26)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingels():
+def somethingels garbage e():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
226. Input. char of interest: 'ethingelse garbage (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse garbage ():                 | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:19 - 12:26]
CST Stack:
    {Node ERROR (11, 18) - (11, 25)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def somethingelse garbage ():
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
227. Input. char of interest: 'thingelse( garbage )':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse( garbage ):                 | def somethingelse(garbage):                   
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse(garbage):
+def somethingelse( garbage ):
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
228. Input. char of interest: 'hingelse() garbage :':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse() garbage :                 | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [12:21 - 12:28]
CST Stack:
    {Node ERROR (11, 20) - (11, 27)}
    {Node function_definition (11, 0) - (12, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,7 +9,7 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
+def somethingelse() garbage :
     pass
 
 def format_a_string(astring: str) -> str:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
229. Input. char of interest: 'ingelse(): garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse(): garbage                  | def somethingelse():                          
    pass                                      |     garbage                                   
                                              | pass                                          
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -9,9 +9,8 @@
     else:
         return fib(a - 1) + fib(a - 2)
 
-def somethingelse():
-    garbage
-pass
+def somethingelse(): garbage 
+    pass
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
234. Input. char of interest: 'se():
     garbage p':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
     garbage pass                             |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [13:6 - 13:13]
CST Stack:
    {Node ERROR (12, 5) - (12, 12)}
    {Node function_definition (11, 0) - (12, 17)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    pass
+     garbage pass
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
235. Input. char of interest: 'e():
    p garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    p garbage ass                             |     ass                                       
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [13:5 - 13:14]
CST Stack:
    {Node ERROR (12, 4) - (12, 13)}
    {Node function_definition (11, 0) - (12, 17)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    ass
+    p garbage ass
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
236. Input. char of interest: '():
    pa garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pa garbage ss                             |     ss                                        
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [13:5 - 13:15]
CST Stack:
    {Node ERROR (12, 4) - (12, 14)}
    {Node function_definition (11, 0) - (12, 17)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    ss
+    pa garbage ss
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
237. Input. char of interest: '):
    pas garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pas garbage s                             |     s                                         
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [13:5 - 13:16]
CST Stack:
    {Node ERROR (12, 4) - (12, 15)}
    {Node function_definition (11, 0) - (12, 17)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    s
+    pas garbage s
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
238. Input. char of interest: ':
    pass garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass garbage                              |     garbage                                   
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [13:5 - 13:9]
CST Stack:
    {Node ERROR (12, 4) - (12, 8)}
    {Node function_definition (11, 0) - (12, 16)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -10,7 +10,7 @@
         return fib(a - 1) + fib(a - 2)
 
 def somethingelse():
-    garbage
+    pass garbage 
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
239. Input. char of interest: '
    pass
 garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
 garbage                                      | garbage                                       
def format_a_string(astring: str) -> str:     |                                               
    return ','.join([x for x in astring])     | def format_a_string(astring: str) -> str:     
                                              |     return ','.join([x for x in astring])     
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -11,8 +11,7 @@
 
 def somethingelse():
     pass
-garbage
-
+ garbage 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
240. Input. char of interest: '    pass

 garbage d':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
 garbage def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:2 - 15:9]
CST Stack:
    {Node ERROR (14, 1) - (14, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+ garbage def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
241. Input. char of interest: '   pass

d garbage e':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                |                                                        
    tmp = (a, a)                                       | 
    (ba, bb) = tmp                                     | 
    inset = a in {0, 1}                                | 
    if a <= 2 or a == 1:                               | 
        return 1                                       | 
    elif inset:                                        | 
        return 1                                       | 
    else:                                              | 
        return fib(a - 1) + fib(a - 2)                 | 
                                                       | 
def somethingelse():                                   | 
    pass                                               | 
                                                       | 
d garbage ef format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])              | 
                                                       | 
def main() -> int:                                     | 
    """DOC_STRING"""                                   | 
    somethingelse()                                    | 
    fib(12)                                            | 
    astring = format_a_string()                        | 
    return 0                                           | 
if __name__ == '__main__':                             | 
    main()                                             | 
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+d garbage ef format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
242. Input. char of interest: '  pass

de garbage f':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                |                                                        
    tmp = (a, a)                                       | 
    (ba, bb) = tmp                                     | 
    inset = a in {0, 1}                                | 
    if a <= 2 or a == 1:                               | 
        return 1                                       | 
    elif inset:                                        | 
        return 1                                       | 
    else:                                              | 
        return fib(a - 1) + fib(a - 2)                 | 
                                                       | 
def somethingelse():                                   | 
    pass                                               | 
                                                       | 
de garbage f format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])              | 
                                                       | 
def main() -> int:                                     | 
    """DOC_STRING"""                                   | 
    somethingelse()                                    | 
    fib(12)                                            | 
    astring = format_a_string()                        | 
    return 0                                           | 
if __name__ == '__main__':                             | 
    main()                                             | 
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+de garbage f format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
244. Input. char of interest: 'pass

def  garbage f':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def  garbage format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:6 - 15:13]
CST Stack:
    {Node ERROR (14, 5) - (14, 12)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def  garbage format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
245. Input. char of interest: 'ass

def f garbage o':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def f garbage ormat_a_string(astring: str) -> str:     | def ormat_a_string(astring: str) -> str:               
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:5 - 15:14]
CST Stack:
    {Node ERROR (14, 4) - (14, 13)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def ormat_a_string(astring: str) -> str:
+def f garbage ormat_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
246. Input. char of interest: 'ss

def fo garbage r':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def fo garbage rmat_a_string(astring: str) -> str:     | def rmat_a_string(astring: str) -> str:                
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:5 - 15:15]
CST Stack:
    {Node ERROR (14, 4) - (14, 14)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def rmat_a_string(astring: str) -> str:
+def fo garbage rmat_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
247. Input. char of interest: 's

def for garbage m':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def for garbage mat_a_string(astring: str) -> str:     | def mat_a_string(astring: str) -> str:                 
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:5 - 15:16]
CST Stack:
    {Node ERROR (14, 4) - (14, 15)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def mat_a_string(astring: str) -> str:
+def for garbage mat_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
248. Input. char of interest: '

def form garbage a':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def form garbage at_a_string(astring: str) -> str:     | def at_a_string(astring: str) -> str:                  
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:5 - 15:17]
CST Stack:
    {Node ERROR (14, 4) - (14, 16)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def at_a_string(astring: str) -> str:
+def form garbage at_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
249. Input. char of interest: '
def forma garbage t':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def forma garbage t_a_string(astring: str) -> str:     | def t_a_string(astring: str) -> str:                   
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:5 - 15:18]
CST Stack:
    {Node ERROR (14, 4) - (14, 17)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def t_a_string(astring: str) -> str:
+def forma garbage t_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
250. Input. char of interest: 'def format garbage _':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format garbage _a_string(astring: str) -> str:     | def _a_string(astring: str) -> str:                    
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:5 - 15:19]
CST Stack:
    {Node ERROR (14, 4) - (14, 18)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def _a_string(astring: str) -> str:
+def format garbage _a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
251. Input. char of interest: 'ef format_ garbage a':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_ garbage a_string(astring: str) -> str:     | def a_string(astring: str) -> str:                     
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:5 - 15:20]
CST Stack:
    {Node ERROR (14, 4) - (14, 19)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def a_string(astring: str) -> str:
+def format_ garbage a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
252. Input. char of interest: 'f format_a garbage _':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a garbage _string(astring: str) -> str:     | def format_a(astring: str) -> str:                     
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:14 - 15:29]
CST Stack:
    {Node ERROR (14, 13) - (14, 28)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a(astring: str) -> str:
+def format_a garbage _string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
253. Input. char of interest: ' format_a_ garbage s':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_ garbage string(astring: str) -> str:     | def format_a_(astring: str) -> str:                    
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:15 - 15:29]
CST Stack:
    {Node ERROR (14, 14) - (14, 28)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_(astring: str) -> str:
+def format_a_ garbage string(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
254. Input. char of interest: 'format_a_s garbage t':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_s garbage tring(astring: str) -> str:     | def format_a_s(astring: str) -> str:                   
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:16 - 15:29]
CST Stack:
    {Node ERROR (14, 15) - (14, 28)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_s(astring: str) -> str:
+def format_a_s garbage tring(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
255. Input. char of interest: 'ormat_a_st garbage r':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_st garbage ring(astring: str) -> str:     | def format_a_st(astring: str) -> str:                  
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:17 - 15:29]
CST Stack:
    {Node ERROR (14, 16) - (14, 28)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_st(astring: str) -> str:
+def format_a_st garbage ring(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
256. Input. char of interest: 'rmat_a_str garbage i':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_str garbage ing(astring: str) -> str:     | def format_a_str(astring: str) -> str:                 
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:18 - 15:29]
CST Stack:
    {Node ERROR (14, 17) - (14, 28)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_str(astring: str) -> str:
+def format_a_str garbage ing(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
257. Input. char of interest: 'mat_a_stri garbage n':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_stri garbage ng(astring: str) -> str:     | def format_a_stri(astring: str) -> str:                
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:19 - 15:29]
CST Stack:
    {Node ERROR (14, 18) - (14, 28)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_stri(astring: str) -> str:
+def format_a_stri garbage ng(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
258. Input. char of interest: 'at_a_strin garbage g':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_strin garbage g(astring: str) -> str:     | def format_a_strin(astring: str) -> str:               
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:20 - 15:29]
CST Stack:
    {Node ERROR (14, 19) - (14, 28)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_strin(astring: str) -> str:
+def format_a_strin garbage g(astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
259. Input. char of interest: 't_a_string garbage (':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string garbage (astring: str) -> str:     | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:21 - 15:28]
CST Stack:
    {Node ERROR (14, 20) - (14, 27)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string garbage (astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
260. Input. char of interest: '_a_string( garbage a':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string( garbage astring: str) -> str:     | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:22 - 15:29]
CST Stack:
    {Node ERROR (14, 21) - (14, 28)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string( garbage astring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
261. Input. char of interest: 'a_string(a garbage s':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(a garbage string: str) -> str:     | def format_a_string(string: str) -> str:               
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:21 - 15:30]
CST Stack:
    {Node ERROR (14, 20) - (14, 29)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(string: str) -> str:
+def format_a_string(a garbage string: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
262. Input. char of interest: '_string(as garbage t':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(as garbage tring: str) -> str:     | def format_a_string(tring: str) -> str:                
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:21 - 15:31]
CST Stack:
    {Node ERROR (14, 20) - (14, 30)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(tring: str) -> str:
+def format_a_string(as garbage tring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
263. Input. char of interest: 'string(ast garbage r':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(ast garbage ring: str) -> str:     | def format_a_string(ring: str) -> str:                 
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:21 - 15:32]
CST Stack:
    {Node ERROR (14, 20) - (14, 31)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(ring: str) -> str:
+def format_a_string(ast garbage ring: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
264. Input. char of interest: 'tring(astr garbage i':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astr garbage ing: str) -> str:     | def format_a_string(astr: str) -> str:                 
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:26 - 15:37]
CST Stack:
    {Node ERROR (14, 25) - (14, 36)}
    {Node typed_parameter (14, 20) - (14, 41)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astr: str) -> str:
+def format_a_string(astr garbage ing: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
265. Input. char of interest: 'ring(astri garbage n':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astri garbage ng: str) -> str:     | def format_a_string(astri: str) -> str:                
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:27 - 15:37]
CST Stack:
    {Node ERROR (14, 26) - (14, 36)}
    {Node typed_parameter (14, 20) - (14, 41)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astri: str) -> str:
+def format_a_string(astri garbage ng: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
266. Input. char of interest: 'ing(astrin garbage g':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astrin garbage g: str) -> str:     | def format_a_string(astrin: str) -> str:               
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:28 - 15:37]
CST Stack:
    {Node ERROR (14, 27) - (14, 36)}
    {Node typed_parameter (14, 20) - (14, 41)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astrin: str) -> str:
+def format_a_string(astrin garbage g: str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
267. Input. char of interest: 'ng(astring garbage :':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring garbage : str) -> str:     | def format_a_string(garbage: str) -> str:              
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:21 - 15:28]
CST Stack:
    {Node ERROR (14, 20) - (14, 27)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(garbage: str) -> str:
+def format_a_string(astring garbage : str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
269. Input. char of interest: '(astring:  garbage s':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring:  garbage str) -> str:     | def format_a_string(astring: garbage) -> str:          
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:39 - 15:42]
CST Stack:
    {Node ERROR (14, 38) - (14, 41)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: garbage) -> str:
+def format_a_string(astring:  garbage str) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
270. Input. char of interest: 'astring: s garbage t':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: s garbage tr) -> str:     | def format_a_string(astring: tr) -> str:               
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:30 - 15:39]
CST Stack:
    {Node ERROR (14, 29) - (14, 38)}
    {Node typed_parameter (14, 20) - (14, 41)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: tr) -> str:
+def format_a_string(astring: s garbage tr) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
271. Input. char of interest: 'string: st garbage r':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: st garbage r) -> str:     | def format_a_string(astring: st) -> str:               
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:33 - 15:42]
CST Stack:
    {Node ERROR (14, 32) - (14, 41)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: st) -> str:
+def format_a_string(astring: st garbage r) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
272. Input. char of interest: 'tring: str garbage )':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str garbage ) -> str:     | def format_a_string(astring: garbage) -> str:          
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:30 - 15:33]
CST Stack:
    {Node ERROR (14, 29) - (14, 32)}
    {Node typed_parameter (14, 20) - (14, 40)}
    {Node parameters (14, 19) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: garbage) -> str:
+def format_a_string(astring: str garbage ) -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
274. Input. char of interest: 'ing: str)  garbage -':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str)  garbage -> str:     | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:36 - 15:43]
CST Stack:
    {Node ERROR (14, 35) - (14, 42)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
+def format_a_string(astring: str)  garbage -> str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
275. Input. char of interest: 'ng: str) - garbage >':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                |                                                        
    tmp = (a, a)                                       | 
    (ba, bb) = tmp                                     | 
    inset = a in {0, 1}                                | 
    if a <= 2 or a == 1:                               | 
        return 1                                       | 
    elif inset:                                        | 
        return 1                                       | 
    else:                                              | 
        return fib(a - 1) + fib(a - 2)                 | 
                                                       | 
def somethingelse():                                   | 
    pass                                               | 
                                                       | 
def format_a_string(astring: str) - garbage > str:     | 
    return ','.join([x for x in astring])              | 
                                                       | 
def main() -> int:                                     | 
    """DOC_STRING"""                                   | 
    somethingelse()                                    | 
    fib(12)                                            | 
    astring = format_a_string()                        | 
    return 0                                           | 
if __name__ == '__main__':                             | 
    main()                                             | 
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) - garbage > str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
277. Input. char of interest: ': str) ->  garbage s':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) ->  garbage str:     | def format_a_string(astring: str) -> garbage:          
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:47 - 15:50]
CST Stack:
    {Node ERROR (14, 46) - (14, 49)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> garbage:
+def format_a_string(astring: str) ->  garbage str:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
278. Input. char of interest: ' str) -> s garbage t':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> s garbage tr:     | def format_a_string(astring: str) -> tr:               
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:38 - 15:47]
CST Stack:
    {Node ERROR (14, 37) - (14, 46)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> tr:
+def format_a_string(astring: str) -> s garbage tr:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
279. Input. char of interest: 'str) -> st garbage r':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> st garbage r:     | def format_a_string(astring: str) -> st:               
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:41 - 15:50]
CST Stack:
    {Node ERROR (14, 40) - (14, 49)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> st:
+def format_a_string(astring: str) -> st garbage r:
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
280. Input. char of interest: 'tr) -> str garbage :':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str garbage :     | def format_a_string(astring: str) -> garbage:          
    return ','.join([x for x in astring])              |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [15:38 - 15:41]
CST Stack:
    {Node ERROR (14, 37) - (14, 40)}
    {Node function_definition (14, 0) - (15, 41)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,7 +12,7 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> garbage:
+def format_a_string(astring: str) -> str garbage :
     return ','.join([x for x in astring])
 
 def main() -> int:
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
281. Input. char of interest: 'r) -> str: garbage 
':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str: garbage      | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astring])              |     garbage                                            
                                                       | return ','.join([x for x in astring])                  
def main() -> int:                                     |                                                        
    """DOC_STRING"""                                   | def main() -> int:                                     
    somethingelse()                                    |     """DOC_STRING"""                                   
    fib(12)                                            |     somethingelse()                                    
    astring = format_a_string()                        |     fib(12)                                            
    return 0                                           |     astring = format_a_string()                        
if __name__ == '__main__':                             |     return 0                                           
    main()                                             | if __name__ == '__main__':                             
                                                       |     main()                                             


ERRPY Recovered AST diff:
--- 
+++ 
@@ -12,9 +12,8 @@
 def somethingelse():
     pass
 
-def format_a_string(astring: str) -> str:
-    garbage
-return ','.join([x for x in astring])
+def format_a_string(astring: str) -> str: garbage 
+    return ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
286. Input. char of interest: ' str:
     garbage r':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
     garbage return ','.join([x for x in astring])     |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:6 - 16:13]
CST Stack:
    {Node ERROR (15, 5) - (15, 12)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+     garbage return ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
287. Input. char of interest: 'str:
    r garbage e':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    r garbage eturn ','.join([x for x in astring])     |     ','.join([x for x in astring])                     
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:20]
CST Stack:
    {Node ERROR (15, 4) - (15, 19)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    r garbage eturn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
288. Input. char of interest: 'tr:
    re garbage t':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    re garbage turn ','.join([x for x in astring])     |     ','.join([x for x in astring])                     
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:20]
CST Stack:
    {Node ERROR (15, 4) - (15, 19)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    re garbage turn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
289. Input. char of interest: 'r:
    ret garbage u':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    ret garbage urn ','.join([x for x in astring])     |     ','.join([x for x in astring])                     
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:20]
CST Stack:
    {Node ERROR (15, 4) - (15, 19)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    ret garbage urn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
290. Input. char of interest: ':
    retu garbage r':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    retu garbage rn ','.join([x for x in astring])     |     ','.join([x for x in astring])                     
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:20]
CST Stack:
    {Node ERROR (15, 4) - (15, 19)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    retu garbage rn ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
291. Input. char of interest: '
    retur garbage n':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    retur garbage n ','.join([x for x in astring])     |     ','.join([x for x in astring])                     
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:5 - 16:20]
CST Stack:
    {Node ERROR (15, 4) - (15, 19)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    ','.join([x for x in astring])
+    retur garbage n ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
293. Input. char of interest: '   return  garbage '':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return  garbage ','.join([x for x in astring])     |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:13 - 16:20]
CST Stack:
    {Node ERROR (15, 12) - (15, 19)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return  garbage ','.join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
294. Input. char of interest: '  return ' garbage ,':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ' garbage ,'.join([x for x in astring])     |     return ' garbage ,'.join([x for x in astring])     
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
295. Input. char of interest: ' return ', garbage '':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ', garbage '.join([x for x in astring])     |     return ', garbage '.join([x for x in astring])     
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
296. Input. char of interest: 'return ',' garbage .':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ',' garbage .join([x for x in astring])     |     return garbage.join([x for x in astring])          
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:12 - 16:15]
CST Stack:
    {Node ERROR (15, 11) - (15, 14)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return garbage.join([x for x in astring])
+    return ',' garbage .join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
297. Input. char of interest: 'eturn ','. garbage j':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','. garbage join([x for x in astring])     |     return ','.garbage([x for x in astring])           
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:25 - 16:29]
CST Stack:
    {Node ERROR (15, 24) - (15, 28)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.garbage([x for x in astring])
+    return ','. garbage join([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
298. Input. char of interest: 'turn ','.j garbage o':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.j garbage oin([x for x in astring])     |     return ','.j([x for x in astring])                 
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:18 - 16:29]
CST Stack:
    {Node ERROR (15, 17) - (15, 28)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.j([x for x in astring])
+    return ','.j garbage oin([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
299. Input. char of interest: 'urn ','.jo garbage i':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.jo garbage in([x for x in astring])     |     return garbage in [x for x in astring]             
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:12 - 16:18]
CST Stack:
    {Node ERROR (15, 11) - (15, 17)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return garbage in [x for x in astring]
+    return ','.jo garbage in([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
300. Input. char of interest: 'rn ','.joi garbage n':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.joi garbage n([x for x in astring])     |     return ','.joi([x for x in astring])               
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:20 - 16:29]
CST Stack:
    {Node ERROR (15, 19) - (15, 28)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.joi([x for x in astring])
+    return ','.joi garbage n([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
301. Input. char of interest: 'n ','.join garbage (':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join garbage ([x for x in astring])     |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:21 - 16:28]
CST Stack:
    {Node ERROR (15, 20) - (15, 27)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join garbage ([x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
302. Input. char of interest: ' ','.join( garbage [':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join( garbage [x for x in astring])     |     return ','.join(garbage[x in astring])             
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:31 - 16:36]
CST Stack:
    {Node ERROR (15, 30) - (15, 35)}
    {Node subscript (15, 21) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join(garbage[x in astring])
+    return ','.join( garbage [x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
303. Input. char of interest: '','.join([ garbage x':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([ garbage x for x in astring])     |     return ','.join([garbage for x in astring])        
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:31 - 16:32]
CST Stack:
    {Node ERROR (15, 30) - (15, 31)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([garbage for x in astring])
+    return ','.join([ garbage x for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
305. Input. char of interest: ''.join([x  garbage f':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x  garbage for x in astring])     |     return ','.join([garbage for x in astring])        
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:22 - 16:23]
CST Stack:
    {Node ERROR (15, 21) - (15, 22)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([garbage for x in astring])
+    return ','.join([x  garbage for x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
306. Input. char of interest: '.join([x f garbage o':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x f garbage or x in astring])     |     return ','.join([garbage or x in astring])         
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:22 - 16:25]
CST Stack:
    {Node ERROR (15, 21) - (15, 24)}
    {Node list (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([garbage or x in astring])
+    return ','.join([x f garbage or x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
307. Input. char of interest: 'join([x fo garbage r':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x fo garbage r x in astring])     |     return ','.join([x in astring])                    
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:22 - 16:36]
CST Stack:
    {Node ERROR (15, 21) - (15, 35)}
    {Node list (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x in astring])
+    return ','.join([x fo garbage r x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
309. Input. char of interest: 'in([x for  garbage x':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for  garbage x in astring])     |     return ','.join([x for garbage in astring])        
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:37 - 16:38]
CST Stack:
    {Node ERROR (15, 36) - (15, 37)}
    {Node for_in_clause (15, 23) - (15, 48)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for garbage in astring])
+    return ','.join([x for  garbage x in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
311. Input. char of interest: '([x for x  garbage i':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x  garbage in astring])     |     return ','.join([x for garbage in astring])        
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:28 - 16:29]
CST Stack:
    {Node ERROR (15, 27) - (15, 28)}
    {Node for_in_clause (15, 23) - (15, 48)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for garbage in astring])
+    return ','.join([x for x  garbage in astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
312. Input. char of interest: '[x for x i garbage n':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x i garbage n astring])     |     return ','.join([x])                               
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:24 - 16:49]
CST Stack:
    {Node ERROR (15, 23) - (15, 48)}
    {Node list (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x])
+    return ','.join([x for x i garbage n astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
314. Input. char of interest: ' for x in  garbage a':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in  garbage astring])     |     return ','.join([x for x in garbage])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:42 - 16:49]
CST Stack:
    {Node ERROR (15, 41) - (15, 48)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in garbage])
+    return ','.join([x for x in  garbage astring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
315. Input. char of interest: 'for x in a garbage s':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in a garbage string])     |     return ','.join([x for x in string])               
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:33 - 16:42]
CST Stack:
    {Node ERROR (15, 32) - (15, 41)}
    {Node for_in_clause (15, 23) - (15, 48)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in string])
+    return ','.join([x for x in a garbage string])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
316. Input. char of interest: 'or x in as garbage t':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in as garbage tring])     |     return ','.join([x for x in tring])                
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:33 - 16:43]
CST Stack:
    {Node ERROR (15, 32) - (15, 42)}
    {Node for_in_clause (15, 23) - (15, 48)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in tring])
+    return ','.join([x for x in as garbage tring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
317. Input. char of interest: 'r x in ast garbage r':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in ast garbage ring])     |     return ','.join([x for x in ring])                 
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:33 - 16:44]
CST Stack:
    {Node ERROR (15, 32) - (15, 43)}
    {Node for_in_clause (15, 23) - (15, 48)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in ring])
+    return ','.join([x for x in ast garbage ring])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
318. Input. char of interest: ' x in astr garbage i':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astr garbage ing])     |     return ','.join([x for x in astr])                 
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:38 - 16:49]
CST Stack:
    {Node ERROR (15, 37) - (15, 48)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astr])
+    return ','.join([x for x in astr garbage ing])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
319. Input. char of interest: 'x in astri garbage n':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astri garbage ng])     |     return ','.join([x for x in astri])                
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:39 - 16:49]
CST Stack:
    {Node ERROR (15, 38) - (15, 48)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astri])
+    return ','.join([x for x in astri garbage ng])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
320. Input. char of interest: ' in astrin garbage g':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astrin garbage g])     |     return ','.join([x for x in astrin])               
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:40 - 16:49]
CST Stack:
    {Node ERROR (15, 39) - (15, 48)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astrin])
+    return ','.join([x for x in astrin garbage g])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
321. Input. char of interest: 'in astring garbage ]':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astring garbage ])     |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:41 - 16:48]
CST Stack:
    {Node ERROR (15, 40) - (15, 47)}
    {Node list_comprehension (15, 20) - (15, 49)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x in astring garbage ])
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
322. Input. char of interest: 'n astring] garbage )':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astring] garbage )     |     return ','.join([x for x in astring])              
                                                       |                                                        
def main() -> int:                                     | def main() -> int:                                     
    """DOC_STRING"""                                   |     """DOC_STRING"""                                   
    somethingelse()                                    |     somethingelse()                                    
    fib(12)                                            |     fib(12)                                            
    astring = format_a_string()                        |     astring = format_a_string()                        
    return 0                                           |     return 0                                           
if __name__ == '__main__':                             | if __name__ == '__main__':                             
    main()                                             |     main()                                             
                                                       | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [16:42 - 16:49]
CST Stack:
    {Node ERROR (15, 41) - (15, 48)}
    {Node argument_list (15, 19) - (15, 50)}
    {Node call (15, 11) - (15, 50)}
    {Node return_statement (15, 4) - (15, 50)}
    {Node block (15, 4) - (15, 50)}
    {Node function_definition (14, 0) - (15, 50)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,7 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
+    return ','.join([x for x in astring] garbage )
 
 def main() -> int:
     """DOC_STRING"""
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
323. Input. char of interest: ' astring]) garbage 
':

Input:                                                 | ERRPY Recovered AST:                                   
-------------------------------------------------------| -------------------------------------------------------
def fib(a: int) -> int:                                | def fib(a: int) -> int:                                
    tmp = (a, a)                                       |     tmp = (a, a)                                       
    (ba, bb) = tmp                                     |     (ba, bb) = tmp                                     
    inset = a in {0, 1}                                |     inset = a in {0, 1}                                
    if a <= 2 or a == 1:                               |     if a <= 2 or a == 1:                               
        return 1                                       |         return 1                                       
    elif inset:                                        |     elif inset:                                        
        return 1                                       |         return 1                                       
    else:                                              |     else:                                              
        return fib(a - 1) + fib(a - 2)                 |         return fib(a - 1) + fib(a - 2)                 
                                                       |                                                        
def somethingelse():                                   | def somethingelse():                                   
    pass                                               |     pass                                               
                                                       |                                                        
def format_a_string(astring: str) -> str:              | def format_a_string(astring: str) -> str:              
    return ','.join([x for x in astring]) garbage      |     return ','.join([x for x in astring])              
                                                       |     garbage                                            
def main() -> int:                                     |                                                        
    """DOC_STRING"""                                   | def main() -> int:                                     
    somethingelse()                                    |     """DOC_STRING"""                                   
    fib(12)                                            |     somethingelse()                                    
    astring = format_a_string()                        |     fib(12)                                            
    return 0                                           |     astring = format_a_string()                        
if __name__ == '__main__':                             |     return 0                                           
    main()                                             | if __name__ == '__main__':                             
                                                       |     main()                                             


ERRPY Recovered AST diff:
--- 
+++ 
@@ -13,8 +13,7 @@
     pass
 
 def format_a_string(astring: str) -> str:
-    return ','.join([x for x in astring])
-    garbage
+    return ','.join([x for x in astring]) garbage 
 
 def main() -> int:
     """DOC_STRING"""
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
324. Input. char of interest: 'astring])
 garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
 garbage                                      | garbage                                       
def main() -> int:                            |                                               
    """DOC_STRING"""                          | def main() -> int:                            
    somethingelse()                           |     """DOC_STRING"""                          
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -14,8 +14,7 @@
 
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
-garbage
-
+ garbage 
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
@@ -23,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
325. Input. char of interest: 'string])

 garbage d':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
 garbage def main() -> int:                   | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:2 - 18:9]
CST Stack:
    {Node ERROR (17, 1) - (17, 8)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+ garbage def main() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
326. Input. char of interest: 'tring])

d garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
d garbage ef main() -> int:                   | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+d garbage ef main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
327. Input. char of interest: 'ring])

de garbage f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
de garbage f main() -> int:                   | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+de garbage f main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
329. Input. char of interest: 'ng])

def  garbage m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def  garbage main() -> int:                   | def garbage() -> int:                         
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:14 - 18:18]
CST Stack:
    {Node ERROR (17, 13) - (17, 17)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def garbage() -> int:
+def  garbage main() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
330. Input. char of interest: 'g])

def m garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def m garbage ain() -> int:                   | def ain() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:5 - 18:14]
CST Stack:
    {Node ERROR (17, 4) - (17, 13)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def ain() -> int:
+def m garbage ain() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
331. Input. char of interest: '])

def ma garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def ma garbage in() -> int:                   | def ma() -> int:                              
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:8 - 18:18]
CST Stack:
    {Node ERROR (17, 7) - (17, 17)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def ma() -> int:
+def ma garbage in() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
332. Input. char of interest: ')

def mai garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def mai garbage n() -> int:                   | def mai() -> int:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:9 - 18:18]
CST Stack:
    {Node ERROR (17, 8) - (17, 17)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def mai() -> int:
+def mai garbage n() -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
333. Input. char of interest: '

def main garbage (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main garbage () -> int:                   | def garbage() -> int:                         
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:5 - 18:9]
CST Stack:
    {Node ERROR (17, 4) - (17, 8)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def garbage() -> int:
+def main garbage () -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
334. Input. char of interest: '
def main( garbage )':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main( garbage ) -> int:                   | def main(garbage) -> int:                     
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main(garbage) -> int:
+def main( garbage ) -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
336. Input. char of interest: 'ef main()  garbage -':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main()  garbage -> int:                   | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:13 - 18:20]
CST Stack:
    {Node ERROR (17, 12) - (17, 19)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
+def main()  garbage -> int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
337. Input. char of interest: 'f main() - garbage >':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() - garbage > int:                   | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
if __name__ == '__main__':                    | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() - garbage > int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+if __name__ == '__main__':
+    main()


===============================================================================
339. Input. char of interest: 'main() ->  garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() ->  garbage int:                   | def main() -> garbage:                        
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:24 - 18:27]
CST Stack:
    {Node ERROR (17, 23) - (17, 26)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> garbage:
+def main() ->  garbage int:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
340. Input. char of interest: 'ain() -> i garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> i garbage nt:                   | def main() -> nt:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:15 - 18:24]
CST Stack:
    {Node ERROR (17, 14) - (17, 23)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> nt:
+def main() -> i garbage nt:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
341. Input. char of interest: 'in() -> in garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> in garbage t:                   | def main() -> in:                             
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

2 Recoverable errors detected:
SyntaxError: invalid syntax at [18:18 - 18:27]
CST Stack:
    {Node ERROR (17, 17) - (17, 26)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}
SyntaxError: keyword: "in" cannot be used as identifier at [18:15 - 18:17]
CST Stack:
    {Node identifier (17, 14) - (17, 16)}
    {Node type (17, 14) - (17, 16)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}
Output AST is not valid according to CPython: expected ':' (<unknown>, line 18)
ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> in:
+def main() -> in garbage t:
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
342. Input. char of interest: 'n() -> int garbage :':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int garbage :                   | def main() -> garbage:                        
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [18:15 - 18:18]
CST Stack:
    {Node ERROR (17, 14) - (17, 17)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,11 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> garbage:
+def main() -> int garbage :
     """DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
343. Input. char of interest: '() -> int: garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int: garbage                    | def main() -> int:                            
    """DOC_STRING"""                          |     garbage                                   
    somethingelse()                           | 'DOC_STRING'                                  
    fib(12)                                   | somethingelse()                               
    astring = format_a_string()               | fib(12)                                       
    return 0                                  | astring = format_a_string()                   
if __name__ == '__main__':                    | return 0                                      
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -15,12 +15,11 @@
 def format_a_string(astring: str) -> str:
     return ','.join([x for x in astring])
 
-def main() -> int:
-    garbage
-'DOC_STRING'
-somethingelse()
-fib(12)
-astring = format_a_string()
-return 0
+def main() -> int: garbage 
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
348. Input. char of interest: ' int:
     garbage "':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
     garbage """DOC_STRING"""                 |     """DOC_STRING"""                          
    somethingelse()                           | somethingelse()                               
    fib(12)                                   | fib(12)                                       
    astring = format_a_string()               | astring = format_a_string()                   
    return 0                                  | return 0                                      
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:6 - 19:13]
CST Stack:
    {Node ERROR (18, 5) - (18, 12)}
    {Node function_definition (17, 0) - (18, 29)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """DOC_STRING"""
-somethingelse()
-fib(12)
-astring = format_a_string()
-return 0
+     garbage """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
349. Input. char of interest: 'int:
    " garbage "':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    " garbage ""DOC_STRING"""                 |     """ garbage DOC_STRING"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """ garbage DOC_STRING"""
+    " garbage ""DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
350. Input. char of interest: 'nt:
    "" garbage "':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    "" garbage "DOC_STRING"""                 |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:8 - 19:15]
CST Stack:
    {Node ERROR (18, 7) - (18, 14)}
    {Node concatenated_string (18, 4) - (18, 29)}
    {Node expression_statement (18, 4) - (18, 29)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,10 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """DOC_STRING"""
+    "" garbage "DOC_STRING"""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
351. Input. char of interest: 't:
    """ garbage D':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """ garbage DOC_STRING"""                 |     """ garbage DOC_STRING"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
352. Input. char of interest: ':
    """D garbage O':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """D garbage OC_STRING"""                 |     """D garbage OC_STRING"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
353. Input. char of interest: '
    """DO garbage C':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DO garbage C_STRING"""                 |     """DO garbage C_STRING"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
354. Input. char of interest: '    """DOC garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC garbage _STRING"""                 |     """DOC garbage _STRING"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
355. Input. char of interest: '   """DOC_ garbage S':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_ garbage STRING"""                 |     """DOC_ garbage STRING"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
356. Input. char of interest: '  """DOC_S garbage T':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_S garbage TRING"""                 |     """DOC_S garbage TRING"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
357. Input. char of interest: ' """DOC_ST garbage R':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_ST garbage RING"""                 |     """DOC_ST garbage RING"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
358. Input. char of interest: '"""DOC_STR garbage I':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STR garbage ING"""                 |     """DOC_STR garbage ING"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
359. Input. char of interest: '""DOC_STRI garbage N':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRI garbage NG"""                 |     """DOC_STRI garbage NG"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
360. Input. char of interest: '"DOC_STRIN garbage G':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRIN garbage G"""                 |     """DOC_STRIN garbage G"""                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
361. Input. char of interest: 'DOC_STRING garbage "':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING garbage """                 |     """DOC_STRING garbage """                 
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
362. Input. char of interest: 'OC_STRING" garbage "':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING" garbage ""                 |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:5 - 19:30]
CST Stack:
    {Node ERROR (18, 4) - (18, 29)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING" garbage ""
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
363. Input. char of interest: 'C_STRING"" garbage "':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"" garbage "                 |     somethingelse()                           
    somethingelse()                           |     fib(12)                                   
    fib(12)                                   |     astring = format_a_string()               
    astring = format_a_string()               |     return 0                                  
    return 0                                  | if __name__ == '__main__':                    
if __name__ == '__main__':                    |     main()                                    
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [19:5 - 19:30]
CST Stack:
    {Node ERROR (18, 4) - (18, 29)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,9 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
+    """DOC_STRING"" garbage "
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
364. Input. char of interest: '_STRING""" garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING""" garbage                  |     """DOC_STRING"""                          
    somethingelse()                           |     garbage                                   
    fib(12)                                   |     somethingelse()                           
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -16,11 +16,10 @@
     return ','.join([x for x in astring])
 
 def main() -> int:
-    """DOC_STRING"""
-    garbage
+    """DOC_STRING""" garbage 
     somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
369. Input. char of interest: 'NG"""
     garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
     garbage somethingelse()                  |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:6 - 20:13]
CST Stack:
    {Node ERROR (19, 5) - (19, 12)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse()
+     garbage somethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
370. Input. char of interest: 'G"""
    s garbage o':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    s garbage omethingelse()                  |     omethingelse()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:5 - 20:14]
CST Stack:
    {Node ERROR (19, 4) - (19, 13)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    omethingelse()
+    s garbage omethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
371. Input. char of interest: '"""
    so garbage m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    so garbage methingelse()                  |     methingelse()                             
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:5 - 20:15]
CST Stack:
    {Node ERROR (19, 4) - (19, 14)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    methingelse()
+    so garbage methingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
372. Input. char of interest: '""
    som garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    som garbage ethingelse()                  |     ethingelse()                              
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:5 - 20:16]
CST Stack:
    {Node ERROR (19, 4) - (19, 15)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    ethingelse()
+    som garbage ethingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
373. Input. char of interest: '"
    some garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    some garbage thingelse()                  |     thingelse()                               
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:5 - 20:17]
CST Stack:
    {Node ERROR (19, 4) - (19, 16)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    thingelse()
+    some garbage thingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
374. Input. char of interest: '
    somet garbage h':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somet garbage hingelse()                  |     hingelse()                                
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:5 - 20:18]
CST Stack:
    {Node ERROR (19, 4) - (19, 17)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    hingelse()
+    somet garbage hingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
375. Input. char of interest: '    someth garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    someth garbage ingelse()                  |     ingelse()                                 
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:5 - 20:19]
CST Stack:
    {Node ERROR (19, 4) - (19, 18)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    ingelse()
+    someth garbage ingelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
376. Input. char of interest: '   somethi garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethi garbage ngelse()                  |     somethi()                                 
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:13 - 20:27]
CST Stack:
    {Node ERROR (19, 12) - (19, 26)}
    {Node call (19, 4) - (19, 28)}
    {Node expression_statement (19, 4) - (19, 28)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethi()
+    somethi garbage ngelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
377. Input. char of interest: '  somethin garbage g':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethin garbage gelse()                  |     somethin()                                
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:14 - 20:27]
CST Stack:
    {Node ERROR (19, 13) - (19, 26)}
    {Node call (19, 4) - (19, 28)}
    {Node expression_statement (19, 4) - (19, 28)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethin()
+    somethin garbage gelse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
378. Input. char of interest: ' something garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    something garbage else()                  |     something()                               
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:15 - 20:27]
CST Stack:
    {Node ERROR (19, 14) - (19, 26)}
    {Node call (19, 4) - (19, 28)}
    {Node expression_statement (19, 4) - (19, 28)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    something()
+    something garbage else()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
379. Input. char of interest: 'somethinge garbage l':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethinge garbage lse()                  |     somethinge()                              
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:16 - 20:27]
CST Stack:
    {Node ERROR (19, 15) - (19, 26)}
    {Node call (19, 4) - (19, 28)}
    {Node expression_statement (19, 4) - (19, 28)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethinge()
+    somethinge garbage lse()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
380. Input. char of interest: 'omethingel garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingel garbage se()                  |     somethingel()                             
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:17 - 20:27]
CST Stack:
    {Node ERROR (19, 16) - (19, 26)}
    {Node call (19, 4) - (19, 28)}
    {Node expression_statement (19, 4) - (19, 28)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingel()
+    somethingel garbage se()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
381. Input. char of interest: 'methingels garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingels garbage e()                  |     somethingels()                            
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:18 - 20:27]
CST Stack:
    {Node ERROR (19, 17) - (19, 26)}
    {Node call (19, 4) - (19, 28)}
    {Node expression_statement (19, 4) - (19, 28)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingels()
+    somethingels garbage e()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
382. Input. char of interest: 'ethingelse garbage (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse garbage ()                  |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [20:19 - 20:26]
CST Stack:
    {Node ERROR (19, 18) - (19, 25)}
    {Node call (19, 4) - (19, 28)}
    {Node expression_statement (19, 4) - (19, 28)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse()
+    somethingelse garbage ()
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
383. Input. char of interest: 'thingelse( garbage )':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse( garbage )                  |     somethingelse(garbage)                    
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,9 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse(garbage)
+    somethingelse( garbage )
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
384. Input. char of interest: 'hingelse() garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse() garbage                   |     somethingelse()                           
    fib(12)                                   |     garbage                                   
    astring = format_a_string()               |     fib(12)                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -17,10 +17,9 @@
 
 def main() -> int:
     """DOC_STRING"""
-    somethingelse()
-    garbage
+    somethingelse() garbage 
     fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
389. Input. char of interest: 'lse()
     garbage f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
     garbage fib(12)                          |     garbage(12)                               
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [21:14 - 21:17]
CST Stack:
    {Node ERROR (20, 13) - (20, 16)}
    {Node call (20, 5) - (20, 20)}
    {Node expression_statement (20, 5) - (20, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    garbage(12)
+     garbage fib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
390. Input. char of interest: 'se()
    f garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    f garbage ib(12)                          |     ib(12)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [21:5 - 21:14]
CST Stack:
    {Node ERROR (20, 4) - (20, 13)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    ib(12)
+    f garbage ib(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
391. Input. char of interest: 'e()
    fi garbage b':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fi garbage b(12)                          |     fi(12)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [21:8 - 21:17]
CST Stack:
    {Node ERROR (20, 7) - (20, 16)}
    {Node call (20, 4) - (20, 20)}
    {Node expression_statement (20, 4) - (20, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fi(12)
+    fi garbage b(12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
392. Input. char of interest: '()
    fib garbage (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib garbage (12)                          |     garbage(12)                               
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [21:5 - 21:8]
CST Stack:
    {Node ERROR (20, 4) - (20, 7)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    garbage(12)
+    fib garbage (12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
393. Input. char of interest: ')
    fib( garbage 1':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib( garbage 12)                          |     fib(garbage)                              
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [21:18 - 21:20]
CST Stack:
    {Node ERROR (20, 17) - (20, 19)}
    {Node argument_list (20, 7) - (20, 20)}
    {Node call (20, 4) - (20, 20)}
    {Node expression_statement (20, 4) - (20, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(garbage)
+    fib( garbage 12)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
394. Input. char of interest: '
    fib(1 garbage 2':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(1 garbage 2)                          |     fib(1)                                    
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [21:11 - 21:20]
CST Stack:
    {Node ERROR (20, 10) - (20, 19)}
    {Node argument_list (20, 7) - (20, 20)}
    {Node call (20, 4) - (20, 20)}
    {Node expression_statement (20, 4) - (20, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(1)
+    fib(1 garbage 2)
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
395. Input. char of interest: '    fib(12 garbage )':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12 garbage )                          |     fib(garbage)                              
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [21:9 - 21:11]
CST Stack:
    {Node ERROR (20, 8) - (20, 10)}
    {Node argument_list (20, 7) - (20, 20)}
    {Node call (20, 4) - (20, 20)}
    {Node expression_statement (20, 4) - (20, 20)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,8 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(garbage)
+    fib(12 garbage )
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
396. Input. char of interest: '   fib(12) garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12) garbage                           |     fib(12)                                   
    astring = format_a_string()               |     garbage                                   
    return 0                                  |     astring = format_a_string()               
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -18,9 +18,8 @@
 def main() -> int:
     """DOC_STRING"""
     somethingelse()
-    fib(12)
-    garbage
+    fib(12) garbage 
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
401. Input. char of interest: 'b(12)
     garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
     garbage astring = format_a_string()      |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:6 - 22:13]
CST Stack:
    {Node ERROR (21, 5) - (21, 12)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+     garbage astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
402. Input. char of interest: '(12)
    a garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    a garbage string = format_a_string()      |     string = format_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:5 - 22:14]
CST Stack:
    {Node ERROR (21, 4) - (21, 13)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    string = format_a_string()
+    a garbage string = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
403. Input. char of interest: '12)
    as garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    as garbage tring = format_a_string()      |     tring = format_a_string()                 
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:5 - 22:15]
CST Stack:
    {Node ERROR (21, 4) - (21, 14)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    tring = format_a_string()
+    as garbage tring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
404. Input. char of interest: '2)
    ast garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    ast garbage ring = format_a_string()      |     ring = format_a_string()                  
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:5 - 22:16]
CST Stack:
    {Node ERROR (21, 4) - (21, 15)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    ring = format_a_string()
+    ast garbage ring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
405. Input. char of interest: ')
    astr garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astr garbage ing = format_a_string()      |     ing = format_a_string()                   
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:5 - 22:17]
CST Stack:
    {Node ERROR (21, 4) - (21, 16)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    ing = format_a_string()
+    astr garbage ing = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
406. Input. char of interest: '
    astri garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astri garbage ng = format_a_string()      |     ng = format_a_string()                    
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:5 - 22:18]
CST Stack:
    {Node ERROR (21, 4) - (21, 17)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    ng = format_a_string()
+    astri garbage ng = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
407. Input. char of interest: '    astrin garbage g':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astrin garbage g = format_a_string()      |     g = format_a_string()                     
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:5 - 22:19]
CST Stack:
    {Node ERROR (21, 4) - (21, 18)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    g = format_a_string()
+    astrin garbage g = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
409. Input. char of interest: '  astring  garbage =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring  garbage = format_a_string()      |     garbage = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:5 - 22:12]
CST Stack:
    {Node ERROR (21, 4) - (21, 11)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    garbage = format_a_string()
+    astring  garbage = format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
411. Input. char of interest: 'astring =  garbage f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring =  garbage format_a_string()      |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:16 - 22:23]
CST Stack:
    {Node ERROR (21, 15) - (21, 22)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+    astring =  garbage format_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
412. Input. char of interest: 'string = f garbage o':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = f garbage ormat_a_string()      |     astring = ormat_a_string()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:15 - 22:24]
CST Stack:
    {Node ERROR (21, 14) - (21, 23)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = ormat_a_string()
+    astring = f garbage ormat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
413. Input. char of interest: 'tring = fo garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = fo garbage rmat_a_string()      |     astring = rmat_a_string()                 
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:15 - 22:25]
CST Stack:
    {Node ERROR (21, 14) - (21, 24)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = rmat_a_string()
+    astring = fo garbage rmat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
414. Input. char of interest: 'ring = for garbage m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = for garbage mat_a_string()      |     astring = mat_a_string()                  
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:15 - 22:26]
CST Stack:
    {Node ERROR (21, 14) - (21, 25)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = mat_a_string()
+    astring = for garbage mat_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
415. Input. char of interest: 'ing = form garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = form garbage at_a_string()      |     astring = at_a_string()                   
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:15 - 22:27]
CST Stack:
    {Node ERROR (21, 14) - (21, 26)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = at_a_string()
+    astring = form garbage at_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
416. Input. char of interest: 'ng = forma garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = forma garbage t_a_string()      |     astring = t_a_string()                    
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:15 - 22:28]
CST Stack:
    {Node ERROR (21, 14) - (21, 27)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = t_a_string()
+    astring = forma garbage t_a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
417. Input. char of interest: 'g = format garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format garbage _a_string()      |     astring = _a_string()                     
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:15 - 22:29]
CST Stack:
    {Node ERROR (21, 14) - (21, 28)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = _a_string()
+    astring = format garbage _a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
418. Input. char of interest: ' = format_ garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_ garbage a_string()      |     astring = a_string()                      
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:15 - 22:30]
CST Stack:
    {Node ERROR (21, 14) - (21, 29)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = a_string()
+    astring = format_ garbage a_string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
419. Input. char of interest: '= format_a garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a garbage _string()      |     astring = format_a()                      
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:24 - 22:39]
CST Stack:
    {Node ERROR (21, 23) - (21, 38)}
    {Node call (21, 14) - (21, 40)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a()
+    astring = format_a garbage _string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
420. Input. char of interest: ' format_a_ garbage s':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_ garbage string()      |     astring = format_a_()                     
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:25 - 22:39]
CST Stack:
    {Node ERROR (21, 24) - (21, 38)}
    {Node call (21, 14) - (21, 40)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_()
+    astring = format_a_ garbage string()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
421. Input. char of interest: 'format_a_s garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_s garbage tring()      |     astring = format_a_s()                    
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:26 - 22:39]
CST Stack:
    {Node ERROR (21, 25) - (21, 38)}
    {Node call (21, 14) - (21, 40)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_s()
+    astring = format_a_s garbage tring()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
422. Input. char of interest: 'ormat_a_st garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_st garbage ring()      |     astring = format_a_st()                   
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:27 - 22:39]
CST Stack:
    {Node ERROR (21, 26) - (21, 38)}
    {Node call (21, 14) - (21, 40)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_st()
+    astring = format_a_st garbage ring()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
423. Input. char of interest: 'rmat_a_str garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_str garbage ing()      |     astring = format_a_str()                  
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:28 - 22:39]
CST Stack:
    {Node ERROR (21, 27) - (21, 38)}
    {Node call (21, 14) - (21, 40)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_str()
+    astring = format_a_str garbage ing()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
424. Input. char of interest: 'mat_a_stri garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_stri garbage ng()      |     astring = format_a_stri()                 
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:29 - 22:39]
CST Stack:
    {Node ERROR (21, 28) - (21, 38)}
    {Node call (21, 14) - (21, 40)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_stri()
+    astring = format_a_stri garbage ng()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
425. Input. char of interest: 'at_a_strin garbage g':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_strin garbage g()      |     astring = format_a_strin()                
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:30 - 22:39]
CST Stack:
    {Node ERROR (21, 29) - (21, 38)}
    {Node call (21, 14) - (21, 40)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_strin()
+    astring = format_a_strin garbage g()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
426. Input. char of interest: 't_a_string garbage (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string garbage ()      |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [22:31 - 22:38]
CST Stack:
    {Node ERROR (21, 30) - (21, 37)}
    {Node call (21, 14) - (21, 40)}
    {Node assignment (21, 4) - (21, 40)}
    {Node expression_statement (21, 4) - (21, 40)}
    {Node block (18, 4) - (22, 12)}
    {Node function_definition (17, 0) - (22, 12)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
+    astring = format_a_string garbage ()
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
427. Input. char of interest: '_a_string( garbage )':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string( garbage )      |     astring = format_a_string(garbage)        
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,7 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string(garbage)
+    astring = format_a_string( garbage )
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
428. Input. char of interest: 'a_string() garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string() garbage       |     astring = format_a_string()               
    return 0                                  |     garbage                                   
if __name__ == '__main__':                    |     return 0                                  
    main()                                    | if __name__ == '__main__':                    
                                              |     main()                                    


ERRPY Recovered AST diff:
--- 
+++ 
@@ -19,8 +19,7 @@
     """DOC_STRING"""
     somethingelse()
     fib(12)
-    astring = format_a_string()
-    garbage
+    astring = format_a_string() garbage 
     return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
433. Input. char of interest: 'ing()
     garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
     garbage return 0                         |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:6 - 23:13]
CST Stack:
    {Node ERROR (22, 5) - (22, 12)}
    {Node block (18, 4) - (22, 21)}
    {Node function_definition (17, 0) - (22, 21)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return 0
+     garbage return 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
434. Input. char of interest: 'ng()
    r garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    r garbage eturn 0                         |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:20]
CST Stack:
    {Node ERROR (22, 4) - (22, 19)}
    {Node block (18, 4) - (22, 21)}
    {Node function_definition (17, 0) - (22, 21)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    r garbage eturn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
435. Input. char of interest: 'g()
    re garbage t':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    re garbage turn 0                         |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:20]
CST Stack:
    {Node ERROR (22, 4) - (22, 19)}
    {Node block (18, 4) - (22, 21)}
    {Node function_definition (17, 0) - (22, 21)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    re garbage turn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
436. Input. char of interest: '()
    ret garbage u':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    ret garbage urn 0                         |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:20]
CST Stack:
    {Node ERROR (22, 4) - (22, 19)}
    {Node block (18, 4) - (22, 21)}
    {Node function_definition (17, 0) - (22, 21)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    ret garbage urn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
437. Input. char of interest: ')
    retu garbage r':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    retu garbage rn 0                         |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:20]
CST Stack:
    {Node ERROR (22, 4) - (22, 19)}
    {Node block (18, 4) - (22, 21)}
    {Node function_definition (17, 0) - (22, 21)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    retu garbage rn 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
438. Input. char of interest: '
    retur garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    retur garbage n 0                         |     0                                         
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:5 - 23:20]
CST Stack:
    {Node ERROR (22, 4) - (22, 19)}
    {Node block (18, 4) - (22, 21)}
    {Node function_definition (17, 0) - (22, 21)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    0
+    retur garbage n 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
440. Input. char of interest: '   return  garbage 0':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return  garbage 0                         |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:13 - 23:20]
CST Stack:
    {Node ERROR (22, 12) - (22, 19)}
    {Node return_statement (22, 4) - (22, 21)}
    {Node block (18, 4) - (22, 21)}
    {Node function_definition (17, 0) - (22, 21)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return 0
+    return  garbage 0
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
441. Input. char of interest: '  return 0 garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0 garbage                          |     return garbage                            
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [23:12 - 23:13]
CST Stack:
    {Node ERROR (22, 11) - (22, 12)}
    {Node return_statement (22, 4) - (22, 20)}
    {Node block (18, 4) - (22, 20)}
    {Node function_definition (17, 0) - (22, 20)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,6 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return garbage
+    return 0 garbage 
 if __name__ == '__main__':
-    main()+    main()


===============================================================================
442. Input. char of interest: ' return 0
 garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
 garbage if __name__ == '__main__':           | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:2 - 25:11]
CST Stack:
    {Node ERROR (23, 1) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -20,4 +20,6 @@
     somethingelse()
     fib(12)
     astring = format_a_string()
-    return 0+    return 0
+ garbage if __name__ == '__main__':
+    main()


===============================================================================
443. Input. char of interest: 'return 0
i garbage f':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       |                                               
    tmp = (a, a)                              | 
    (ba, bb) = tmp                            | 
    inset = a in {0, 1}                       | 
    if a <= 2 or a == 1:                      | 
        return 1                              | 
    elif inset:                               | 
        return 1                              | 
    else:                                     | 
        return fib(a - 1) + fib(a - 2)        | 
                                              | 
def somethingelse():                          | 
    pass                                      | 
                                              | 
def format_a_string(astring: str) -> str:     | 
    return ','.join([x for x in astring])     | 
                                              | 
def main() -> int:                            | 
    """DOC_STRING"""                          | 
    somethingelse()                           | 
    fib(12)                                   | 
    astring = format_a_string()               | 
    return 0                                  | 
i garbage f __name__ == '__main__':           | 
    main()                                    | 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [1:1 - 25:11]
CST Stack:
    {Node ERROR (0, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -0,0 +1,25 @@
+def fib(a: int) -> int:
+    tmp = (a, a)
+    (ba, bb) = tmp
+    inset = a in {0, 1}
+    if a <= 2 or a == 1:
+        return 1
+    elif inset:
+        return 1
+    else:
+        return fib(a - 1) + fib(a - 2)
+
+def somethingelse():
+    pass
+
+def format_a_string(astring: str) -> str:
+    return ','.join([x for x in astring])
+
+def main() -> int:
+    """DOC_STRING"""
+    somethingelse()
+    fib(12)
+    astring = format_a_string()
+    return 0
+i garbage f __name__ == '__main__':
+    main()


===============================================================================
445. Input. char of interest: 'turn 0
if  garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if  garbage __name__ == '__main__':           | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:5 - 24:12]
CST Stack:
    {Node ERROR (23, 4) - (23, 11)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if  garbage __name__ == '__main__':
+    main()


===============================================================================
446. Input. char of interest: 'urn 0
if _ garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if _ garbage _name__ == '__main__':           | if _name__ == '__main__':                     
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:4 - 24:13]
CST Stack:
    {Node ERROR (23, 3) - (23, 12)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if _name__ == '__main__':
-    main()+if _ garbage _name__ == '__main__':
+    main()


===============================================================================
447. Input. char of interest: 'rn 0
if __ garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __ garbage name__ == '__main__':           | if name__ == '__main__':                      
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:4 - 24:14]
CST Stack:
    {Node ERROR (23, 3) - (23, 13)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if name__ == '__main__':
-    main()+if __ garbage name__ == '__main__':
+    main()


===============================================================================
448. Input. char of interest: 'n 0
if __n garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __n garbage ame__ == '__main__':           | if ame__ == '__main__':                       
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:4 - 24:15]
CST Stack:
    {Node ERROR (23, 3) - (23, 14)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if ame__ == '__main__':
-    main()+if __n garbage ame__ == '__main__':
+    main()


===============================================================================
449. Input. char of interest: ' 0
if __na garbage m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __na garbage me__ == '__main__':           | if me__ == '__main__':                        
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:4 - 24:16]
CST Stack:
    {Node ERROR (23, 3) - (23, 15)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if me__ == '__main__':
-    main()+if __na garbage me__ == '__main__':
+    main()


===============================================================================
450. Input. char of interest: '0
if __nam garbage e':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __nam garbage e__ == '__main__':           | if __nam == '__main__':                       
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:10 - 24:21]
CST Stack:
    {Node ERROR (23, 9) - (23, 20)}
    {Node comparison_operator (23, 3) - (23, 34)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __nam == '__main__':
-    main()+if __nam garbage e__ == '__main__':
+    main()


===============================================================================
451. Input. char of interest: '
if __name garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name garbage __ == '__main__':           | if __name == '__main__':                      
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:11 - 24:21]
CST Stack:
    {Node ERROR (23, 10) - (23, 20)}
    {Node comparison_operator (23, 3) - (23, 34)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name == '__main__':
-    main()+if __name garbage __ == '__main__':
+    main()


===============================================================================
452. Input. char of interest: 'if __name_ garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name_ garbage _ == '__main__':           | if __name_ == '__main__':                     
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:12 - 24:21]
CST Stack:
    {Node ERROR (23, 11) - (23, 20)}
    {Node comparison_operator (23, 3) - (23, 34)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name_ == '__main__':
-    main()+if __name_ garbage _ == '__main__':
+    main()


===============================================================================
454. Input. char of interest: ' __name__  garbage =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__  garbage == '__main__':           | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:14 - 24:21]
CST Stack:
    {Node ERROR (23, 13) - (23, 20)}
    {Node comparison_operator (23, 3) - (23, 34)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__  garbage == '__main__':
+    main()


===============================================================================
455. Input. char of interest: '__name__ = garbage =':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ = garbage = '__main__':           | if '__main__':                                
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:4 - 24:24]
CST Stack:
    {Node ERROR (23, 3) - (23, 23)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if '__main__':
-    main()+if __name__ = garbage = '__main__':
+    main()


===============================================================================
457. Input. char of interest: 'name__ ==  garbage '':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ ==  garbage '__main__':           | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:17 - 24:24]
CST Stack:
    {Node ERROR (23, 16) - (23, 23)}
    {Node comparison_operator (23, 3) - (23, 34)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__ ==  garbage '__main__':
+    main()


===============================================================================
458. Input. char of interest: 'ame__ == ' garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == ' garbage __main__':           | if __name__ == ' garbage __main__':           
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == ' garbage __main__':
-    main()+    main()


===============================================================================
459. Input. char of interest: 'me__ == '_ garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '_ garbage _main__':           | if __name__ == '_ garbage _main__':           
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '_ garbage _main__':
-    main()+    main()


===============================================================================
460. Input. char of interest: 'e__ == '__ garbage m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__ garbage main__':           | if __name__ == '__ garbage main__':           
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__ garbage main__':
-    main()+    main()


===============================================================================
461. Input. char of interest: '__ == '__m garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__m garbage ain__':           | if __name__ == '__m garbage ain__':           
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__m garbage ain__':
-    main()+    main()


===============================================================================
462. Input. char of interest: '_ == '__ma garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__ma garbage in__':           | if __name__ == '__ma garbage in__':           
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__ma garbage in__':
-    main()+    main()


===============================================================================
463. Input. char of interest: ' == '__mai garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__mai garbage n__':           | if __name__ == '__mai garbage n__':           
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__mai garbage n__':
-    main()+    main()


===============================================================================
464. Input. char of interest: '== '__main garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main garbage __':           | if __name__ == '__main garbage __':           
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main garbage __':
-    main()+    main()


===============================================================================
465. Input. char of interest: '= '__main_ garbage _':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main_ garbage _':           | if __name__ == '__main_ garbage _':           
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main_ garbage _':
-    main()+    main()


===============================================================================
466. Input. char of interest: ' '__main__ garbage '':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__ garbage ':           | if __name__ == '__main__ garbage ':           
    main()                                    |     main()                                    
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__ garbage ':
-    main()+    main()


===============================================================================
467. Input. char of interest: ''__main__' garbage :':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__' garbage :           | if __name__ == '__main__':                    
    main()                                    |     main()                                    
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [24:27 - 24:34]
CST Stack:
    {Node ERROR (23, 26) - (23, 33)}
    {Node if_statement (23, 0) - (24, 10)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,5 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    main()+if __name__ == '__main__' garbage :
+    main()


===============================================================================
468. Input. char of interest: '__main__': garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__': garbage            | if __name__ == '__main__':                    
    main()                                    |     garbage                                   
                                              | main()                                        


ERRPY Recovered AST diff:
--- 
+++ 
@@ -21,6 +21,5 @@
     fib(12)
     astring = format_a_string()
     return 0
-if __name__ == '__main__':
-    garbage
-main()+if __name__ == '__main__': garbage 
+    main()


===============================================================================
473. Input. char of interest: 'n__':
     garbage m':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
     garbage main()                           |     garbage()                                 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [25:14 - 25:18]
CST Stack:
    {Node ERROR (24, 13) - (24, 17)}
    {Node call (24, 5) - (24, 19)}
    {Node expression_statement (24, 5) - (24, 19)}
    {Node block (24, 5) - (24, 19)}
    {Node if_statement (23, 0) - (24, 19)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    garbage()+     garbage main()


===============================================================================
474. Input. char of interest: '__':
    m garbage a':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    m garbage ain()                           |     ain()                                     
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [25:5 - 25:14]
CST Stack:
    {Node ERROR (24, 4) - (24, 13)}
    {Node if_statement (23, 0) - (24, 19)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    ain()+    m garbage ain()


===============================================================================
475. Input. char of interest: '_':
    ma garbage i':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    ma garbage in()                           |     garbage in ()                             
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [25:5 - 25:7]
CST Stack:
    {Node ERROR (24, 4) - (24, 6)}
    {Node if_statement (23, 0) - (24, 19)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    garbage in ()+    ma garbage in()


===============================================================================
476. Input. char of interest: '':
    mai garbage n':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    mai garbage n()                           |     mai()                                     
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [25:9 - 25:18]
CST Stack:
    {Node ERROR (24, 8) - (24, 17)}
    {Node call (24, 4) - (24, 19)}
    {Node expression_statement (24, 4) - (24, 19)}
    {Node block (24, 4) - (24, 19)}
    {Node if_statement (23, 0) - (24, 19)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    mai()+    mai garbage n()


===============================================================================
477. Input. char of interest: ':
    main garbage (':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main garbage ()                           |     garbage()                                 
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [25:5 - 25:9]
CST Stack:
    {Node ERROR (24, 4) - (24, 8)}
    {Node if_statement (23, 0) - (24, 19)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    garbage()+    main garbage ()


===============================================================================
478. Input. char of interest: '
    main( garbage )':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main( garbage )                           |     main(garbage)                             
                                              | 


ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    main(garbage)+    main( garbage )


===============================================================================
479. Input. char of interest: '    main() garbage 
':

Input:                                        | ERRPY Recovered AST:                          
----------------------------------------------| ----------------------------------------------
def fib(a: int) -> int:                       | def fib(a: int) -> int:                       
    tmp = (a, a)                              |     tmp = (a, a)                              
    (ba, bb) = tmp                            |     (ba, bb) = tmp                            
    inset = a in {0, 1}                       |     inset = a in {0, 1}                       
    if a <= 2 or a == 1:                      |     if a <= 2 or a == 1:                      
        return 1                              |         return 1                              
    elif inset:                               |     elif inset:                               
        return 1                              |         return 1                              
    else:                                     |     else:                                     
        return fib(a - 1) + fib(a - 2)        |         return fib(a - 1) + fib(a - 2)        
                                              |                                               
def somethingelse():                          | def somethingelse():                          
    pass                                      |     pass                                      
                                              |                                               
def format_a_string(astring: str) -> str:     | def format_a_string(astring: str) -> str:     
    return ','.join([x for x in astring])     |     return ','.join([x for x in astring])     
                                              |                                               
def main() -> int:                            | def main() -> int:                            
    """DOC_STRING"""                          |     """DOC_STRING"""                          
    somethingelse()                           |     somethingelse()                           
    fib(12)                                   |     fib(12)                                   
    astring = format_a_string()               |     astring = format_a_string()               
    return 0                                  |     return 0                                  
if __name__ == '__main__':                    | if __name__ == '__main__':                    
    main() garbage                            |     garbage                                   
                                              | 

1 Recoverable error detected:
SyntaxError: invalid syntax at [25:5 - 25:11]
CST Stack:
    {Node ERROR (24, 4) - (24, 10)}
    {Node if_statement (23, 0) - (24, 18)}
    {Node module (0, 0) - (25, 0)}

ERRPY Recovered AST diff:
--- 
+++ 
@@ -22,4 +22,4 @@
     astring = format_a_string()
     return 0
 if __name__ == '__main__':
-    garbage+    main() garbage 


===============================================================================
