# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree

# Ensure correct AST creation given units defined under: https://docs.python.org/3/library/ast.html :: 3.10.7 grammar
# Note: the guide referenced above is not complete, so we've extended it here wher appropriate


## Raise(exc, cause)
raise
raise gg
raise x from y

## Assert(test, msg)
assert x
assert x,y


## Delete(targets)
del x,y,z

## Pass
def thing():
    pass

## Import(names)
import x,y,z

## ImportFrom(module, names, level)
from y import x,y,z

## import from with params
from y import (x,y,z)

## alias(name, asname)
from ..foo.bar import a as b, c
from .foo.bar import a as b, c
from ...foo.bar import a as b, c

## future import from (yes, we use this in fbcode)
from __future__ import annotations
from __future__ import absolute_import, division, print_function, unicode_literals

## comments in places other than on their own lines or after statements
# comment - this is here because at first I forgot to add a newline for
# comments without anything preceeding them which messed up the AST
# line numbers

def foo(
    a=34,
    # a comment here
    skip_loads=True,
):
    pass


a = (# comment in strange place
     1 , 2, 3)

"some # comment (hash) character in a string"
'another # comment (hash) character in a string'

"""
some multiline string # this is not a comment
"""

## Tuple unpacking inside list comprehension
a = [f"{i}{j}" for (i, j) in [("alpha", "beta"), ("one", "two")]]

## multiline format string with format on first line
format_string = f"""{a}
"""

format_string = f"""{a
}
"""

## multiline format string with format on second line
format_string = f"""
{b}
"""

format_string = f"""
{b} {c}
"""

format_string = f'''{sin(a+b)} is
    {cos(b+c):.3} plus remainder
    {tan(a):.3} plus remainder'''

## multiline format string with format on second line continuation

format_string = f"""
{b} {c} \
"""

format_string = f" a \
b {c} \
d {e}"


## formatted value test
format_string = f"{v=!r:->8s}"
format_string = f"{v=:->8s}"
format_string = f"{v=!r}"
format_string = f"{v=}"
format_string = f"{v!r:->8s}"
format_string = f"{v:->8s}"
format_string = f"{v!r}"
format_string = f"{v}"

format_string = f"sometext {v=!r:->8s}"
format_string = f"sometext {v=:->8s}"
format_string = f"sometext {v=!r}"
format_string = f"sometext {v=}"
format_string = f"sometext {v!r:->8s}"
format_string = f"sometext {v:->8s}"
format_string = f"sometext {v!r}"
format_string = f"sometext {v}"
