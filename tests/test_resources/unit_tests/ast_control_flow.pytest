# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree

# Ensure correct AST creation given units defined under: https://docs.python.org/3/library/ast.html :: 3.10.7 grammar
# Note: the guide referenced above is not complete, so we've extended it here wher appropriate


## If(test, body, orelse)
# Parsers can struggle here...
if x:
    doSomething()
    doSomething()

if x:
    doSomething()
    doSomething()
else:
    somethignElse()
    somethignElse()

if x:
    doSomething()
    doSomething()
elif y:
    somethignElse()
    somethignElse()
else:
    uhoh()
    uhoh()

if x:
    doSomething()
    doSomething()
elif y:
    somethignElse()
    somethignElse()
elif y2:
    somethignElse2()
    somethignElse2()
else:
    uhoh()
    uhoh()

## if with nested nodes of if type
# seems unlikely that there could be a bug here but had a hunch (there was no bug ;))
if x > 3:
    something()
elif y < 5:
    if xx == 3:
        another_thing()
    else:
        thing()
else:
    giveup()

## For(target, iter, body, orelse, type_comment)
for a in y:
    somethign()

for a in y:
    somethign()
else:
    ysss()

## For - taget being list
for [name, request] in items:
    pass

## For - taget being tuple
for (name, request) in items:
    pass

## For - taget tuple with one item only
for (name, ) in items:
    pass

## For - taget list with one item only
for [name, ] in items:
    pass

## For - target attribute access
for a.b in items:
    pass

## For - target subscript access
for a[b] in items:
    pass

## For - nested lists and tuples
for (a, [b, c], d) in XXX :
    pass

for [a, (b, c), d] in XXX :
    pass

for [a, [b, c], d] in XXX :
    pass

for (a, (b, c), d) in XXX :
    pass

## For - attribute and subsciprts in lists and tuples
for (a[b], c.d) in XXX:
    pass

for [a[b], c.d] in XXX:
    pass

## While(test, body, orelse)
while x:
    dosomething()

while x:
    dosomething()
else:
    ohuph()

while x > 34:
    dosomething()
else:
    ohuph()

## Break
for a in b:
    if a > 5:
        break
    else:
        continue

## Continue
for a in b:
    if a > 5:
        break
    else:
        continue

## Try(body, handlers, orelse, finalbody)
try:
    something()
except Exception:
    pass
except OtherException as e:
    react()
except (OtherException, Another):
    react2()
except (OtherException, Another) as ee:
    react3()
else:
    elablock()
finally:
    andForver()

## ExceptHandler(type, name, body)
try:
    a+1
except TypeError:
    pass

## With(items, body, type_comment)
with a:
   something(b)

## withitem(context_expr, optional_vars)
with a, c as d:
   something(b, c, d)

with a as b, c as d:
   something(b, d)

with open('file_path', 'w') as file:
    file.write('hello world !')

with A() as a, B() as b, C() as c:
    doSomething(a,b,c)

## With - taget being list
with something() as [a, b]:
    pass

## With - taget being tuple
with something() as (a, b):
    pass

## With - taget being tuple with one item only
with something() as (a, ):
    pass

## With - taget being list with one item only
with something() as [a, ]:
    pass

## With - taget attribute access
with something() as a.b:
    pass

## With - target subscript access
with something() as a[b]:
    pass

## With - nested lists and tuples
with something() as (a, [b, c], d):
    pass

with something() as [a, (b, c), d]:
    pass

with something() as [a, [b, c], d]:
    pass

with something() as (a, (b, c), d):
    pass
