# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree

# Ensure correct AST creation given units defined under: https://docs.python.org/3/library/ast.html :: 3.10.7 grammar
# Note: the guide referenced above is not complete, so we've extended it here wher appropriate


## Constant(value)
123123
123.4124
'a string'

## FormattedValue(value, conversion, format_spec)
f"sin({a}) is {sin(a):.3}"

## JoinedStr(values)
f"sin({a}) is {sin(a):.3}"

## List(elts, ctx)
[1, 2, 3]

## List assign
# [a,b] = 2, 3

## Tuple(elts, ctx)
(1, 2, 3)

## single element tuple
thing = 1,
thing = (1,)

## tuples without parenthesis
1,2
1,2,

## expression statement postfixed with comma
# The following is treated as a tuple due to the trailing comma
Union[
            str,
            int
        ],

## Set(elts)
{1, 2, 3}

## Dict(keys, values)
{'a':1, 'd':5}

## Dict with dictionary_splat
f = {**arg1, **arg2}

## Dict with dictionary_splat and normal keys
f = {**arg1, 'a': 55}

## strings with nested ' or "

x='bb "a" cc'
y="bb 'a' cc"

## string variants
a='a string'
b="a string" # should be converted to 'a string'

## more tricky string variants
x='bb "a" cc'
y="bb 'a' cc"

y="bb \"a\" cc" # should be converted to 'bb "a" cc'
y="bb \'a\' cc" # \ should be removed
z = "\n"

## complex string variants with multiline

x='''bb "a" cc'''
y="""bb 'a' cc"""

a = 'baaa'
b = "baaa"
c = '''baaa'''
d = """baaa"""
multiline = '''
asdas

asdads

    pass

'''

multiline2 = """
asdas

asdads

    pass

"""

## Ellipsis
...

## None
None


## fstring which behave like normal strings
f'nothing'
f"nothing"

f'nothing "thing" '
f"nothing 'thing' "

## f string simple cases
f"sin({a+b}) is {sin(a):.3}"
f'sin({a+b}) is {sin(a):.3}'

## f string simple cases with initial offset
m = f"something{sin(a)} "
m = f"something"

## f string simple cases
f"sin({a+b}) i's {sin(a):.3}"
f'sin({a+b}) i"s {sin(a):.3}'

## f string simple cases w remainder at end
f"sin({a+b}) is {sin(a):.3} plus remainder"
f'sin({a+b}) is {sin(a):.3} plus remainder'

f"Magic wand: {bag['wand']:^10}"
f'Magic wand: {bag["wand"]:^10}'

## f string these f strings require special quote treatment
f"{a['b']}"
f'{a["b"]}'

f"a '' {b} c"
f'a "" {b} c'
f"a  {b} c"
f'a  {b} c'

## f string more examples
f'He said his name is {name!r}.'
f"sin({a}) is {sin(a):.3}" # nothing after final }
f'Results of the {year} {event}'
f"{a} is {sin(a):.3}" # at start
f"ּּ{a}≤" #unicode char in the end
f"ּּ≤{a}" #unicode char in the beginning
f"ּּ{a}≤{a}" #unicode char in center
f"ּּ≤" #unicode char

## f strings - nested
f" f'hi' "
f" {f'hi'} "

## f strings - multi-line
f"""sin({a}) is {sin(a):.3} plus remainder {also} something else {here}"""
f"""sin({a}) is {sin(a):.3} plus remainder {also} something else {here} """
f"""sin({a}) is {sin(a):.3} plus remainder {also} something else {here} remainder"""

f"""is plus remainder something else something else """

f"""is
 plus remainder
 something else
 something else"""

f"""is
 plus remainder
 something else
 something else """

f""""{a}"""


f"""{a
}
"""

## f string - multi-line nested
f""" '{b["c"]}' d """
# f""" "a" '{b["c"]}' "d" """ TODO: Result: f" "a" "{b['c']}" "d" " Expected: f""" "a" "{b['c']}" "d" """
# f""""{b["c"]}" d """ TODO: Result: f""{b['c']}" d " Expected: f'''"{b['c']}" d '''
# f''' "{b["c"]}" d ''' TODO: Result: f" "{b['c']}" d " Expected: f''' "{b['c']}" d '''
f''' '{b['c']}' d '''
f"""
    '{b["c"]}'
"""
f'''
    '{b["c"]}'
'''

## potential CPython bug here,
# column offsets for interpolation nodes for
# nodes on the nth (where n>0) line are off by one
f'''{sin(a+b)} is
    {cos(b+c):.3} plus remainder
    {tan(a):.3} plus remainder'''


f"""sin({a}) is
{ccos(a):.3} plus remainder
something else {here}
something
else {here}
{also
} something else {here}"""

f"""sin({a}) is
 {sin(a):.3} plus remainder
 something else {here}
 something
 else {here}
 {also
 } something else {here}"""

## string concatinated - regular strings

message = "something " \
          "another {a} line"

message = "something " \
          "another ' line" # stored with double quote " in ast

message = 'something ' \
          'another {a} line'

message = 'something ' \
          'another \' line' # stored with double quote " in ast

## string concatinated - byte strings

message = b"something " \
          b"another {a} line"

message = b"something " \
          b"another ' line" # stored with double quote " in ast

message = b'something ' \
          b'another {a} line'

message = b'something ' \
          b'another \' line' # stored with double quote " in ast

## string concatinated - f strings
message = f"something " \
          f"another ' {a} line"

message = f"something{sin(a)} " \
          f"another {a} line" \
          f"another line" \
          "another line with no f string" \


message = "something " \
          f"another {a} line"

message = "something " \
          f"another ' {a} line"


## f-string concatinated

message = f"Hi {name}. " \
          f"You are a {profession}. " \
          f"You were in {affiliation}."

## f-string concatinated tricky cases with {} escape formatting

message = f"something " \
          "another {{a}} line"

message = f"something " \
          "another {a} line"

## f-string {{}} escape formatting
"{{{a}}}"
f"{{{{55}}}}"
f"{{55}}"
f"{k} {{55}}"
f"{{{55}}}"
f"{{{{70 + 4}}}}"

## strings with unicode escape sequences
emoji = "\U0001F4A9"
symbol = "\u261c"
something_else = "\u0001F4A9"
another_something_else = "\U00000001"
string_with_emoji = "words before \U0001F4A9 words after"
multiline = """
this is a line
this is an emoji \U0001F4A9 on a line
this is another line
"""

## f-string with tabulation
f"""
	A
"""
f'''
	A
'''
f"\t"
f'\t'

## raw string with unicode escape sequence
raw_emoji = r"\U0001F4A9"

## f-strings with unicode escape sequences
f_string = f"{symbol} is \U0001F4A9"
f_string2 = f"{something_else} is \u0001F4A9"

## byte string with unicode escape sequence
byte_string = b"Bj\xc3\xb6rk"  # should not be converted. Expected: b'Bj\xc3\xb6rk'
byte_string = b'Bj\xc3\xb6rk'

## tricky ascii characters
something = "\x01"
something_else = "\x8f"
tab = "\x09"
tab2 = "\u0009"
newline = "\x0a"
newline2 = "\U0000000a"
cr = "\x0d"
backslash = "\x5c"

## long integers
timestamp1 = 9223372036854775810
timestamp2 = -9223372036854775810

## complex numbers
complex_half = 0.0302988j

c = 1 + 2.j
c = 1 + 2j
c = 1 + 2.J
c = 1 + 2J
real = c.real
imag = c.imag

## very long floats
timestamp = 0.33333333333333334444444444444444356456456456456456457457456456456456456456
timestamp = 123123123.94856098745609847560987450968734986745096874509867405968740598674509867405968456

## long floats - big exponent
timestamp3 = 9223372036854775810.
timestamp4 = -9223372036854775810.

## long floats - scientific if exponent > 16 digits

not_scientific = 1111111111111111.
scientific = 11111111111111111.

not_scientific = -1111111111111111.
scientific = -11111111111111111.

## long floats - scientific if exponent > 16 digits with mantissa

not_scientific_mantissa = 1111111111111111.123
scientific_mantissa     = 11111111111111111.123

not_scientific_mantissa = -1111111111111111.123
scientific_mantissa     = -11111111111111111.123

## format complex numbers with exponent if more then 16 significant digits
c1 = 1 + 20000.j
c2 = 1 + 20000j
c3 = 1 + 20000.J
c4 = 1 + 20000J

c5 = 1 + 20000000000000000000000.j
c6 = 1 + 20000000000000000000000j
c7 = 1 + 20000000000000000000000.J
c8 = 1 + 20000000000000000000000J

## format complex numbers with exponent if more then 16 significant digits with mantissa
m1 = 1 + 2000000.123j
m2 = 1 + 2000000.123J

m3 = 1 + 2000000000000000000.123j
m4 = 1 + 2000000000000000000.123J

## ensure complex numbers which look like integers are correctly formatted
c6 = 1 + 2000000j
c8 = 1 + 2000000J

c6 = 1 + 2000000000000j
c8 = 1 + 2000000000000J

c6 = 1 + 200000000000000000000j
c8 = 1 + 200000000000000000000J

## b strings single and multiline variants
v1 = b'a b string'
v2 = b"a b string"

h = b"""asasd"""
h = b'''asasd'''

## regex strings single and multiline variants
v1 = r'a b string'
v2 = r"a b string"

h = r"""asasd"""
h = r'''asasd'''

## raw multiline strings
s = r"""a
b
c
"""
t = b"""a
b
c
"""

## strings with line continuations
a = """\
"""
b = '''\
'''
c = "\
"
d = '\
'

## string with tabulation
"""
	A
"""
# '''
# 	A
# '''
# "\t"
# '\t'

## raw strings with trailing slashes that shouldn't be treated as line continuations
a = r"""\
"""
b = r'''\
'''
c = r"\
"
d = r'\
'
h = r"""a\
b\
c
"""

## byte strings with line continuations
a = b"""\
"""
b = b'''\
'''
c = b"\
"
d = b'\
'
h = b"""a\
b\
c
"""

## strings wrapping ' and "
a = '"'
b = "'"
c = "\"'"
d = '\'"'

## b strings wrapping ' and "
a = b'"'
b = b"'"
c = b"\"'"
d = b'\'"'

## raw strings wrapping ' and "
a = r'"'
b = r"'"
c = r"\"'"
d = r'\'"'

## empty strings
a = """"""
a = ""
a = ''

## strings backslashes
a = '\\'
b = "\\"
c = '\"'
d = "\'"
e = "\""
f = '\''

## b-strings backslashes
a = b'\\'
b = b"\\"
c = b'\"'
d = b"\'"

## raw strings backslashes
a = r'\"'
b = r'\''

## small floating point numbers need scientific representation
p =  0.1
p =  0.01
p =  0.001
p =  0.0001
p =  0.00001
p =  0.000001
p =  0.0000001
p =  0.00000001
p =  0.000000001
p =  0.0000000001
p =  0.00000000001
p =  0.000000000001
p =  0.0000000000001
p =  0.00000000000001
m = -0.00000000000001
m = -0.0000000000001
m = -0.000000000001
m = -0.00000000001
m = -0.0000000001
m = -0.000000001
m = -0.00000001
m = -0.0000001
m = -0.000001
m = -0.00001
m = -0.0001
m = -0.001
m = -0.01
m = -0.1

## boundry problem on floating point numbers
0.000001 # 1e-06
0.000002 # 2e-06
0.000003 # 3e-06
0.000004 # 4e-06
0.000005 # 5e-06
0.000006 # 6e-06
0.000007 # 7e-06
0.000008 # 8e-06
0.000009 # 9e-06
0.000010 # 1e-05
0.000020 # 2e-05
0.000030 # 3e-05
0.000040 # 4e-05
0.000050 # 5e-05
0.000060 # 6e-05
0.000070 # 7e-05
0.000080 # 8e-05
0.000090 # 9e-05
0.000100 # 0.0001

## zero should not be shown in scientific format
xx = 0.0 # not to be shown in scientific format

## complex type annotation
# this was the source of a few bugs

SearchUnion = Union[
    List[
        Union[
            Dict[str, Union[List[FlowRunStatus], str]],
            Dict[str, Union[List[str], str]],
            Dict[str, str],
        ],
    ],
    str,
]

## binary integers
x = 0b10101
f = 0B10101

## hexadecimal integers
x = 0x1a
x = 0XaBc

# octal integers
x = 0o13
x = 0O13

## ints and flaots with underscores
x = 00_0
x = 1_01
x = 0b0_1
x = 1_0.1_01
x = 1e1_0j
x = 0b0_1

# string wrapping with escape string character
a = '\\"'
b = "\\'"
c = '"\\'
d = '"\\A"'
e = "'\\A'"
f = '\\A'
g = "\\A"

# string wrapping within f-strings
f"\"{a}\""
f"\'{a}\'"
f"'{a}'"
f"\"a\""
f"\'a\'"
f"'a'"

## tuple end col offset mismatch caused by comments not getting filtered out ("comment")
class classname(param):
    varname1: Datatype1 = function(
        "var description", marker=marker_head.NOT_UII
    )
    varname2: Datatype1 = function(
        """var description "for var 2\"""", marker=marker_head.NOT_UII
    )
    varname3: Struct[
        Field("attribute1", Datatype2),  # comment
        Field("attribute2", Datatype2),  # comment
    ] = function(
        "assign value",
        marker=marker_head.NOT_UII_REMOVE,
    )

# escaping special and non special characters
a = '\c'
b = '\\c'
c = '\\\c'
d = '\\0'
e = '\\x'

a = '\0'
b = '\1'
c = '\2'
d = '\3'
e = '\4'
f = '\5'
g = '\6'
h = '\7'
i = '\a'
j = '\b'
k = '\f'
l = '\n'
m = '\r'
n = '\t'
o = '\v'
p = '\ '
q = '\''
r = '\"'
s = '\\'
