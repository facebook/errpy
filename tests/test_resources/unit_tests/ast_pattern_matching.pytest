# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree

# Ensure correct AST creation given units defined under: https://docs.python.org/3/library/ast.html :: 3.10.7 grammar
# Note: the guide referenced above is not complete, so we've extended it here where appropriate with referenced
# to the relevant PEP's etc


## match_case(pattern, guard, body)
match xx:
    case [x] if x >0:
        something()
    case tuple():
        atuple()

## MatchValue(value)
match x:
    case "Relevant":
        thing()


match x:
    case "Relevant":
        thing()
    case "Relevant2":
        thing()

## MatchSingleton(value)
match x:
    case None:
        thing()
match x:
    case None:
        thing1()
    case True:
        thing2()
    case False:
        thing3()

## MatchSequence(patterns)
match x:
    case [1, 2]:
        seqmatch()

## MatchStar(name)
match x:
    case [1, 2, *rest]:
        thecase1()
    case [*_]:
        thecase2()

## MatchMapping(keys, patterns, rest)
match x:
    case {1: _, 2: _}:
        dsfsdfsdF()
    case {**rest}:
        serser()

## MatchClass(cls, patterns, kwd_attrs, kwd_patterns)
match x:
    case Point2D(0, 0):
        somethign()
    case Point3D(x=0, y=0, z=0):
        somethign2()

## MatchAs(pattern, name)
match x:
    case [x] as y:
        sdfsdfsdf234234()
    case _:
        sdfsdfsdf()

## MatchOr(patterns)
match x:
    case [x] | (y):
        orthing()

## dotted_name as case pattern
match x:
    case x:
        f=99
    case a.b.c.d:
        f=99

## MatchOr
match x:
    case x | y:
        a=10

## Pattern guards
match x:
    case x if y > 2:
        a=10

## MatchSequence's
match xx:
    case [x]:
        something(x)
    case [x, y]:
        something(x, y)
    case (x, y):
        something(x, y)

# The next set of tests are taken from [PEP 636](https://peps.python.org/pep-0636/)

##PEP 636 - simple
match command.split():
    case [action, obj]:
        ... # interpret action, obj

##PEP 636 - simple multiple patterns
match command.split():
    case [action]:
        ... # interpret single-verb action
    case [action, obj]:
        ... # interpret action, obj

##PEP 636 - specific values
match command.split():
    case ["quit"]:
        print("Goodbye!")
        quit_game()
    case ["look"]:
        current_room.describe()
    case ["get", obj]:
        character.get(obj, current_room)
    case ["go", direction]:
        current_room = current_room.neighbor(direction)
    # The rest of your commands go here

##PEP 636 - multple values
match command.split():
    case ["drop", *objects]:
        for obj in objects:
            character.drop(obj, current_room)
    # The rest of your commands go here

##PEP 636 - adding a wildcard
match command.split():
    case ["quit"]: ... # Code omitted for brevity
    case ["go", direction]: ...
    case ["drop", *objects]: ...
    case _:
        print(f"Sorry, I couldn't understand {command!r}")

##PEP 636 - or patterns
match command.split():
    case ["north"] | ["go", "north"]:
        current_room = current_room.neighbor("north")
    case ["get", obj] | ["pick", "up", obj] | ["pick", obj, "up"]:
        ... # Code for picking up the given object

##PEP 636 - sub patterns 1
match command.split():
    case ["go", ("north" | "south" | "east" | "west")]:
        current_room = current_room.neighbor(...)
        # how do I know which direction to go?

##PEP 636 - sub patterns 2
match command.split():
    case ["go", ("north" | "south" | "east" | "west") as direction]:
        current_room = current_room.neighbor(direction)

##PEP 636 - conditions
match command.split():
    case ["go", direction] if direction in current_room.exits:
        current_room = current_room.neighbor(direction)
    case ["go", _]:
        print("Sorry, you can't go that way")

##PEP 636 - matching objects
match event.get():
    case Click(position=(x, y)):
        handle_click_at(x, y)
    case KeyPress(key_name="Q") | Quit():
        game.quit()
    case KeyPress(key_name="up arrow"):
        game.go_north()
    case KeyPress():
        pass # Ignore other keystrokes
    case other_event:
        raise ValueError(f"Unrecognized event: {other_event}")

##PEP 636 - positional arguments
from dataclasses import dataclass

@dataclass
class Click:
    position: tuple
    button: Button

match event.get():
    case Click((x, y)):
        handle_click_at(x, y)

##PEP 636 - constants and enums
class Click:
    __match_args__ = ("position", "button")
    def __init__(self, pos, btn):
        self.position = pos
        self.button = btn

match event.get():
    case Click((x, y), button=Button.LEFT):  # This is a left click
        handle_click_at(x, y)
    case Click():
        pass  # ignore other clicks

##PEP 636 - dict mappings
for action in actions:
    match action:
        case {"text": message, "color": c}:
            ui.set_text_color(c)
            ui.display(message)
        case {"sleep": duration}:
            ui.wait(duration)
        case {"sound": url, "format": "ogg"}:
            ui.play(url)
        case {"sound": _, "format": _}:
            warning("Unsupported audio format")

##PEP 636 - builtin classes
for action in actions:
    match action:
        case {"text": str(message), "color": str(c)}:
            ui.set_text_color(c)
            ui.display(message)
        case {"sleep": float(duration)}:
            ui.wait(duration)
        case {"sound": str(url), "format": "ogg"}:
            ui.play(url)
        case {"sound": _, "format": _}:
            warning("Unsupported audio format")


##PEP 636 - quick intro: literals 1
def http_error(status):
    match status:
        case 400:
            return "Bad request"
        case 404:
            return "Not found"
        case 418:
            return "I'm a teapot"
        case _:
            return "Something's wrong with the Internet"

##PEP 636 - quick intro: literals 2
case 401 | 403 | 404:
    return "Not allowed"

##PEP 636 - quick intro: unpacking
# point is an (x, y) tuple
match point:
    case (0, 0):
        print("Origin")
    case (0, y):
        print(f"Y={y}")
    case (x, 0):
        print(f"X={x}")
    case (x, y):
        print(f"X={x}, Y={y}")
    case _:
        raise ValueError("Not a point")

##PEP 636 - quick intro: attribute capture
from dataclasses import dataclass

@dataclass
class Point:
    x: int
    y: int

def where_is(point):
    match point:
        case Point(x=0, y=0):
            print("Origin")
        case Point(x=0, y=y):
            print(f"Y={y}")
        case Point(x=x, y=0):
            print(f"X={x}")
        case Point():
            print("Somewhere else")
        case _:
            print("Not a point")

##PEP 636 - quick intro: nesting
match points:
    case []:
        print("No points")
    case [Point(0, 0)]:
        print("The origin")
    case [Point(x, y)]:
        print(f"Single point {x}, {y}")
    case [Point(0, y1), Point(0, y2)]:
        print(f"Two on the Y axis at {y1}, {y2}")
    case _:
        print("Something else")

##PEP 636 - quick intro: guard
match point:
    case Point(x, y) if x == y:
        print(f"Y=X at {x}")
    case Point(x, y):
        print(f"Not on the diagonal")

##PEP 636 - quick intro: enum
from enum import Enum
class Color(Enum):
    RED = 0
    GREEN = 1
    BLUE = 2

match color:
    case Color.RED:
        print("I see red!")
    case Color.GREEN:
        print("Grass is green")
    case Color.BLUE:
        print("I'm feeling the blues :(")
