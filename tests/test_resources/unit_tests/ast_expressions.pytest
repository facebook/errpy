# (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.

# Ensure correct AST creation given units defined under: https://docs.python.org/3/library/ast.html :: 3.10.7 grammar
# Note: the guide referenced above is not complete, so we've extended it here wher appropriate

## Expr(value)
-a

## UnaryOp(op, operand)
~a

## UAdd
+a

## USub
-a

## Not
not true
not a

## Invert
not y

## BinOp(left, op, right)
x + y

## Add
x + y

## Sub
x - y

## Mult
x * y

## Div
x / y

## FloorDiv
x // y

## Mod
x % y

## Pow
x ** y

## LShift
x << 2

## RShift
x >> 2

## BitOr
a | b

## BitXor
a ^ b

## BitAnd
a & b

## MatMult
a @ b

## BoolOp(op, values)
x or y

## And
a and b

## Or
a or b

## Compare(left, ops, comparators)
1 <= a < 10

## Eq
a == b

## NotEq
a != h

## Lt
a < b

## LtE
a <= b

## Gt
a > b

## GtE
a >=g

## Is
a is None

## IsNot
a is not g

## In
a in zzz

## NotIn
a not in zzz

## Call(func, args, keywords, starargs, kwargs)
func(a, b=c, *d, **e,)
func(a, b=c, *d, **e)

## keyword(arg, value)
func(a, b=c, *d, **e)

## IfExp(test, body, orelse)
a if b else c

## Attribute(value, attr, ctx)
snake.colour
a.b.c
snake.colour = 'green'
a.b.c = 3
a.b.c = a.b.d

## NamedExpr(target, value)
(x := 4)

## Subscript(value, slice, ctx)
la[1:2, 3]

## Slice(lower, upper, step)
la[1:2]

## more complex subscript cases
la[2]
la[2:]
la[2::-1]
la[2, 9 ]
la[2, 2,]
la[1:2, 1:2]
la[1:2, 1:2,]
la[1:2, 1:2, ]
la[1:2, 2]
la[1:2, 2,]
la[1:2]
lalala[10:20:1]
lalala[10:]
lalala[:20]
lalala[::-1]
lalala[1::-1]
lalala[:]

## subscript value is always with ctx=Load even if on lhs or on rhs of assignment
a[1] = 6
a[1] = a[2]
(a[1])[1] = 6

## ListComp(elt, generators)
[x for x in numbers]
[x for x in numbers if x > 2]
[x async for x in numbers if x > 2]
[ord(c) for line in file for c in line]
[n**2 for n in it if n>5 if n<10]

## SetComp(elt, generators)
{x for x in numbers}

## GeneratorExp(elt, generators)
(n**2 for n in it if n>5 if n<10)

## DictComp(key, value, generators)
{x: x**2 for x in numbers}

## comprehension(target, iter, ifs, is_async)
[ord(c) for line in file for c in line]
(n**2 for n in it if n>5 if n<10)
[i async for i in soc]

## Return(value)
return 6

## Yield(value)
yield
yield xx00
yield (x,y)

## YieldFrom(value)
yield from yy
yield from (x,y)

## Global(names)
global x,y,z

## Nonlocal(names)
nonlocal x,y,z
