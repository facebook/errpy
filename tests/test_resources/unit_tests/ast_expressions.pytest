# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree

# Ensure correct AST creation given units defined under: https://docs.python.org/3/library/ast.html :: 3.10.7 grammar
# Note: the guide referenced above is not complete, so we've extended it here wher appropriate

## Expr(value)
-a

## UnaryOp(op, operand)
~a

## UAdd
+a

## USub
-a

## Not
not true
not a

## Invert
not y

## BinOp(left, op, right)
x + y

## Add
x + y

## Sub
x - y

## Mult
x * y

## Div
x / y

## FloorDiv
x // y

## Mod
x % y

## Pow
x ** y

## LShift
x << 2

## RShift
x >> 2

## BitOr
a | b

## BitXor
a ^ b

## BitAnd
a & b

## MatMult
a @ b

## BoolOp(op, values)
x or y

## And
a and b

## Or
a or b

## And Not
a and not b

## Not And
not a and b

## And ~
a and ~b

## Compare(left, ops, comparators)
1 <= a < 10

## Eq
a == b

## NotEq
a != h

## Lt
a < b

## LtE
a <= b

## Gt
a > b

## GtE
a >=g

## Is
a is None

## IsNot
a is not g

## In
a in zzz

## NotIn
a not in zzz

## Call(func, args, keywords, starargs, kwargs)
func(a, b=c, *d, **e,)
func(a, b=c, *d, **e)

## keyword(arg, value)
func(a, b=c, *d, **e)

## IfExp(test, body, orelse)
a if b else c

## Attribute(value, attr, ctx)
snake.colour
a.b.c
snake.colour = 'green'
a.b.c = 3
a.b.c = a.b.d

## NamedExpr(target, value)
(x := 4)

## Subscript(value, slice, ctx)
la[1:2, 3]

## Slice(lower, upper, step)
la[1:2]

## more complex subscript cases
la[2]
la[2:]
la[2::-1]
la[2, 9 ]
la[2, 2,]
la[1:2, 1:2]
la[1:2, 1:2,]
la[1:2, 1:2, ]
la[1:2, 2]
la[1:2, 2,]
la[1:2]
lalala[10:20:1]
lalala[10:]
lalala[:20]
lalala[::-1]
lalala[1::-1]
lalala[:]

## subscript slices may be tuples
oool = a[b,]
oool = a[b ,]
oool = a[b, ]
oool = a[(b,)]

## subscript value is always with ctx=Load even if on lhs or on rhs of assignment
a[1] = 6
a[1] = a[2]
(a[1])[1] = 6

## subscript slices are always with ctx=Load
# here `requests` is a expected to be with ctx=Load(), and `name` should be with ctx=Load()
requests[name] = package

## more subscript slices are always with ctx=Load
a[b[c]] = d
a[b][c] = d
*a[b] = c

## multiline subscripts start end line column info
# multiline subscripts need to reference start and end lines and column
# information based on the first and last elements of the subscript
Union[
            str,
            int
        ]

## ListComp(elt, generators)
[x for x in numbers]
[x for x in numbers if x > 2]
[x async for x in numbers if x > 2]
[ord(c) for line in file for c in line]
[n**2 for n in it if n>5 if n<10]

## SetComp(elt, generators)
{x for x in numbers}

## GeneratorExp(elt, generators)
(n**2 for n in it if n>5 if n<10)

## DictComp(key, value, generators)
{x: x**2 for x in numbers}

## comprehension(target, iter, ifs, is_async)
[ord(c) for line in file for c in line]
(n**2 for n in it if n>5 if n<10)
[i async for i in soc]

## generator expression in function calls
x = sum( x for x in items )

## generator expression in function calls with guard
x = sum( x for x in items if x > 2 )

## Return(value)
return 6

## Yield(value)
yield
yield xx00
yield (x,y)

## YieldFrom(value)
yield from yy
yield from (x,y)

## Yield, YieldFrom and Await with inside a parenthesized expression
(yield)
(yield 1)
(yield from x)
(yield (await x))
(yield from (await x))
await (yield x)
await (yield from x)

## Global(names)
global x,y,z

## Nonlocal(names)
nonlocal x,y,z

## BoolOp(op, values) - boolean operators simple
a and b
a or b

## BoolOp(op, values) - boolean operators collapsed
a or b or c
a or (b or c)

# AST's for the above differ because:
# "Consecutive operations with the same operator, such as a or b or c,
# are collapsed into one node with several values."
# Wrapping boolean operators within params prevents the collapsing

a and b and c
a and (b and c)

## BoolOp(op, values) - boolean operators combine and + or
a or (b and c)
a or b and c

a and (b or c)
a and b or c

## Assign - mixed tuple list assignment
([b, c], ) = f # single item tuple
[(b, c), ] = f # single item list

a1 = (a, [b, c], d)
a2 = [a, (b, c), d]
a3 = [a, [b, c], d]
a4 = (a, (b, c), d)

(a, [b, c], d) = a1
[a, (b, c), d] = a2
[a, [b, c], d] = a3
(a, (b, c), d) = a4

## Assign - tuple assign with and without parentheses
a, z = d
a, (b, c) = d
(a, (b, c)) = d

## Assign - with starred on right hand side
a, b, *c = *d, None, None
f = *d,

## splats and dict splats appearing at the same time
foo(0, *[1], **{'a': 2})

## list_splat_pattern four versions
*a = b
*print = b
*a[b] = c
*a.b = c

## list_splat for lists, sets and tuples with list splat
x = ["string", "another", identifier, *overrides]
z = {"string", "another", identifier, *overrides}
x = ("string", "another", identifier, *overrides)

## comma seperated expressions - return
return a, b

## comma seperated expressions - yield
yield a, b

## comma seperated expressions - delete
del a, b

## comma seperated expressions - for
for a in a, b:
    pass
