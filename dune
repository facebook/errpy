(env
 (dev
  (flags
   (:standard -w A-30))
  (ocamlopt_flags
   (-g -Oclassic)))
 (release
  (flags
   (:standard -w A-30))
  (ocamlopt_flags (-O3))))

;; generate static and dynamic lib from rust code
(rule
 (targets libffi_ocaml.a dllffi_ocaml.so)
 (action
  (no-infer
   (progn
    (run cargo build --release)
    ;; Copy .a
    (run cp ../../target/release/libffi_ocaml.a libffi_ocaml.a)
    ;; Copy .so + support macos
    (with-accepted-exit-codes (or 0 1)
     (run cp ../../target/release/libffi_ocaml.so dllffi_ocaml.so))
    (with-accepted-exit-codes (or 0 1)
     (run cp ../../target/release/libffi_ocaml.dylib dllffi_ocaml.so))))))

(library
 (name errpy)
 (modules parser ast)
 (public_name errpy)
 (flags -linkall)
 (preprocess
  (pps ppx_deriving.show))
 (libraries ocamlpool)
 (c_library_flags -lstdc++ -lpthread)
 (foreign_archives ffi_ocaml))

(executable
 (name parse_and_print)
 (modes byte exe)
 (modules parse_and_print)
 (libraries errpy))
